{
    "$schema":  "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymenttemplate.json#",
    "contentversion":  "1.0.0.0",
    "parameters":  {
                       "location":  {
                                        "type":  "string",
                                        "defaultvalue":  "chinaeast2"
                                    },
                       "workspacename":  {
                                             "type":  "string"
                                         }
                   },
    "resources":  [
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Suspicious application consent similar to PwnAuth",
                                             "query":  "//This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the FireEye PwnAuth toolkit (https://github.com/fireeye/PwnAuth).\n//The default permissions/scope for the PwnAuth toolkit are user.read, offline_access, mail.readwrite, mail.send, and files.read.all.\n//Consent to applications with these permissions should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\nlet detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated \u003e ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull contains \"user.read\" and ConsentFull contains \"offline_access\" and ConsentFull contains \"mail.readwrite\" and ConsentFull contains \"mail.send\" and ConsentFull contains \"files.read.all\"\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \"User-Agent\", AdditionalDetails[0].value, \"\")\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \"AddressType\", TargetResources[0].modifiedProperties[1].newValue, \"\")\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_2')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Rare application consent",
                                             "query":  "//This will alert when the \"Consent to application\" operation occurs by a user that has not done this operation before or rarely does this.\n//This could indicate that permissions to access the listed Azure App were provided to a malicious actor. \n//Consent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events. \n//This may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\n\nlet current = 1d;\nlet auditLookback = 7d;\n// Setting threshold to 3 as a default, change as needed.  \n// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded\nlet threshold = 3;\n// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results\nlet AuditTrail = AuditLogs | where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current)\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", extend the filter below to capture these too\n| where OperationName == \"Consent to application\"\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName\n// only including operations by initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days\n| where OperationCount \u003e threshold\n;\n// Gather current period of audit data\nlet RecentConsent = AuditLogs | where TimeGenerated \u003e= ago(current)\n| where OperationName == \"Consent to application\"\n| extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \ntostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| parse TargetResources.[0].modifiedProperties with * \"ConsentType: \" ConsentType \"]\" *\n| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType , CorrelationId, Type;\n// Exclude previously seen audit activity for \"Consent to application\" that was seen in the lookback period\n// First for rare InitiatedBy\nlet RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy \n| extend Reason = \"Previously unseen user consenting\";\n// Second for rare TargetResourceName\nlet RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName\n| extend Reason = \"Previously unseen app granted consent\";\nRareConsentBy | union RareConsentApp\n| summarize Reason = makeset(Reason) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, CorrelationId, Type\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_3')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Suspicious application consent for offline access",
                                             "query":  "//This will alert when a user consents to provide a previously-unknown Azure application with offline access via OAuth.\n//Offline access will provide the Azure App with access to the listed resources without requiring two-factor authentication.\n//Consent to applications with offline access and read capabilities should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\nlet detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated \u003e ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull contains \"offline_access\" and ConsentFull contains \"Files.Read\" or ConsentFull contains \"Mail.Read\" or ConsentFull contains \"Notes.Read\" or ConsentFull contains \"ChannelMessage.Read\" or ConsentFull contains \"Chat.Read\" or ConsentFull contains \"TeamsActivity.Read\" or ConsentFull contains \"Group.Read\" or ConsentFull contains \"EWS.AccessAsUser.All\" or ConsentFull contains \"EAS.AccessAsUser.All\"\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \"User-Agent\", AdditionalDetails[0].value, \"\")\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \"AddressType\", TargetResources[0].modifiedProperties[1].newValue, \"\")\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_4')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "User added to Azure Active Directory Privileged Groups",
                                             "query":  "//This will alert when a user is added to any of the Privileged Groups.\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//For Administrator role permissions in Azure Active Directory please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\n//\nlet timeframe = 1h;\nlet OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n| where TimeGenerated \u003e= ago(timeframe)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend DisplayName = tostring(parse_json(modifiedProperties).displayName), GroupName =  trim(@'\"',tostring(parse_json(modifiedProperties).newValue))\n| extend AppId = tostring(parse_json(parse_json(InitiatedBy).app).appId), InitiatedByDisplayName = tostring(parse_json(parse_json(InitiatedBy).app).displayName), ServicePrincipalId = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalId), ServicePrincipalName = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalName)\n| where DisplayName =~ \"Role.WellKnownObjectName\"\n| where GroupName in~ (PrivilegedGroups)\n// If you want to still alert for operations from PIM, remove below filtering for MS-PIM.\n| where InitiatedByDisplayName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, AppId, InitiatedByDisplayName, ServicePrincipalId, ServicePrincipalName, DisplayName, GroupName\n| extend timestamp = TimeGenerated, AccountCustomEntity = ServicePrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_5')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Suspicious number of resource creation or deployment activities",
                                             "query":  "//Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log.\n//The anomaly detection identifies activities that have occured both since the start of the day 1 day ago and the start of the day 7 days ago.\n//The start of the day is considered 12am UTC time.\n//\n\nlet szOperationNames = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nlet starttime = 7d;\nlet endtime = 1d;\nAzureActivity\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(7d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope \u003e 0.2\n| join kind=leftsemi (\n// Last day's activity is anomalous\nAzureActivity\n| where TimeGenerated \u003e= startofday(ago(endtime))\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(1d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope \u003e 0.2    \n) on Caller, CallerIpAddress        \n| mvexpand todynamic(ActivityTimeStamp), todynamic(ActivityStatus), todynamic(OperationIds), todynamic(CorrelationId)\n| extend timestamp = ActivityTimeStamp, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_6')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Creation of expensive computes in Azure",
                                             "query":  "//Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure.\n//Adversary may create new or update existing virtual machines sizes to evade defenses \n//or use it for cryptomining purposes.\n//For Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes \n//Azure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions\n//\nlet timeframe = 1d;\nlet tokens = dynamic([\"416\",\"208\",\"128\",\"120\",\"96\",\"80\",\"72\",\"64\",\"48\",\"44\",\"40\",\"g5\",\"gs5\",\"g4\",\"gs4\",\"nc12\",\"nc24\",\"nv12\"]);\nlet operationList = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName in (operationList)\n| where ActivityStatus == \"Accepted\" \n| where isnotempty(Properties)\n| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))\n| where isnotempty(vmSize)\n| where vmSize has_any (tokens) \n| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)\n| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)\n| project TimeGenerated, OperationName, ActivityStatus, Caller, CallerIpAddress, ComputerName, vmSize\n| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_7')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Suspicious granting of permissions to an account",
                                             "query":  "//Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet createRoleAssignmentActivity = AzureActivity\n| where OperationName == \"Create role assignment\";\ncreateRoleAssignmentActivity \n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller\n| where count_ \u003e= alertOperationThreshold\n| join kind = rightanti ( \ncreateRoleAssignmentActivity\n| where TimeGenerated \u003e ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CorrelationId = makelist(CorrelationId), ActivityCountByCallerIPAddress = count()  \nby ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_8')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Suspicious Resource deployment",
                                             "query":  "//Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen Caller.\n//\n\nlet szOperationNames = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nlet starttime = 14d;\nlet endtime = 1d;\nlet RareCaller = AzureActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where OperationName in~ (szOperationNames)\n| project ResourceGroup, Caller, OperationName, CallerIpAddress\n| join kind=rightantisemi (\nAzureActivity\n| where TimeGenerated \u003e ago(endtime)\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatus = makeset(ActivityStatus), OperationIds = makeset(OperationId), CallerIpAddress = makeset(CallerIpAddress) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n) on Caller, ResourceGroup \n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress);\nlet Counts = RareCaller | summarize ActivityCountByCaller = count() by Caller;\nRareCaller | join kind= inner (Counts) on Caller | project-away Caller1\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = tostring(CallerIpAddress)\n| sort by ActivityCountByCaller desc nulls last \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_9')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Rare subscription-level operations in Azure",
                                             "query":  "//This query looks for a few sensitive subscription-level events based on Azure Activity Logs. \n// For example this monitors for the operation name Create or Update Snapshot which is used for creating backups but could be misused by attackers \n// to dump hashes or extract sensitive information from the disk.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet SensitiveOperationList = dynamic(\n[\"List keys\", \"List Storage Account Keys\", \"Register Subscription\", \"Create or Update Snapshot\", \"Create or Update Network Security Group\"]);\nlet SensitiveActivity = AzureActivity\n| where OperationName in~ (SensitiveOperationList)\n| where ActivityStatus =~ \"Succeeded\";\nSensitiveActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller\n| where count_ \u003e= alertOperationThreshold\n| join kind = rightanti ( \nSensitiveActivity\n| where TimeGenerated \u003e= ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CorrelationIds = makelist(CorrelationId), Resources = makelist(Resource), ResourceGroups = makelist(ResourceGroup), ResourceIds = makelist(ResourceId), ActivityCountByCallerIPAddress = count()  \nby CallerIpAddress, Caller, OperationName\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_10')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Mass secret retrieval from Azure Key Vault",
                                             "query":  "//Identifies mass secret retrieval from Azure Key Vault observed by a single user. \n//Mass secret retrival crossing a certain threshold is an indication of credential dump operations or mis-configured applications. \n//You can tweak the EventCountThreshold based on average count seen in your environment \n//and also filter any known sources (IP/Account) and useragent combinations based on historical analysis to further reduce noise\n//\n\nlet timeframe =1d;\nlet EventCountThreshold = 25;\nlet OperationList = dynamic(\n[\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nAzureDiagnostics\n| where TimeGenerated \u003e ago(timeframe)\n| extend ResultType = columnifexists(\"ResultType\", \"None\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \"None\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in (OperationList) \n| summarize count() by identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, OperationName\n| where count_ \u003e EventCountThreshold  \n| join (\nAzureDiagnostics\n| where TimeGenerated \u003e ago(timeframe)\n| extend ResultType = columnifexists(\"ResultType\", \"NoResultType\")\n| extend requestUri_s = columnifexists(\"requestUri_s\", \"None\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| extend id_s = columnifexists(\"id_s\", \"None\"), CallerIPAddress = columnifexists(\"CallerIPAddress\", \"None\"), clientInfo_s = columnifexists(\"clientInfo_s\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \"None\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ \"None\" and isnotempty(id_s)\n| where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ \"None\" and isnotempty(clientInfo_s)\n| where requestUri_s !~ \"None\" and isnotempty(requestUri_s)\n| where OperationName in~ (OperationList)   \n) on identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g \n| summarize EventCount=sum(count_), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s\n| extend timestamp = EndTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_11')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Sensitive Azure Key Vault operations",
                                             "query":  "//Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, KeyDecrypt, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup. \n//Any Backup operations should match with expected scheduled backup activity.\n//\n\nlet timeframe = 1d;\nlet SensitiveOperationList = dynamic(\n[\"VaultDelete\", \"KeyDelete\", \"SecretDelete\", \"SecretPurge\", \"KeyPurge\", \"SecretBackup\", \"KeyBackup\"]);\nAzureDiagnostics\n| where TimeGenerated \u003e ago(timeframe)\n| extend ResultType = columnifexists(\"ResultType\", \"NoResultType\")\n| extend requestUri_s = columnifexists(\"requestUri_s\", \"None\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| extend id_s = columnifexists(\"id_s\", \"None\"), CallerIPAddress = columnifexists(\"CallerIPAddress\", \"None\"), clientInfo_s = columnifexists(\"clientInfo_s\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \"None\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ \"None\" and isnotempty(id_s)\n| where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ \"None\" and isnotempty(clientInfo_s)\n| where requestUri_s !~ \"None\" and isnotempty(requestUri_s)\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\" \n| where OperationName in~ (SensitiveOperationList)  \n| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s\n| extend timestamp = StartTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_12')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Azure Key Vault access TimeSeries anomaly",
                                             "query":  "//Indentifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm \n//to find large deviations from baseline Azure Key Vault access patterns. Any sudden increase in the count of Azure Key Vault accesses can be an \n//indication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations.\n//TimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052\n//\n\nlet starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 5;\nlet OperationList = dynamic(\n[\"SecretGet\", \"KeyGet\", \"VaultGet\"]);\nlet TimeSeriesData = AzureDiagnostics\n| where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n| extend ResultType = columnifexists(\"ResultType\", \"None\"), CallerIPAddress = columnifexists(\"CallerIPAddress\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in (OperationList) \n| project TimeGenerated, OperationName, Resource, CallerIPAddress \n| make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Resource;\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\n| mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies \u003e 0 | extend AnomalyHour = TimeGenerated\n| where baseline \u003e baselinethreshold // Filtering low count events per baselinethreshold\n| project Resource, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\n// Filter the alerts since specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated \u003e ago(timeframe)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join (\nAzureDiagnostics\n| where TimeGenerated \u003e ago(timeframe)\n| extend ResultType = columnifexists(\"ResultType\", \"NoResultType\")\n| extend requestUri_s = columnifexists(\"requestUri_s\", \"None\"), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(\"identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g\", \"None\")\n| extend id_s = columnifexists(\"id_s\", \"None\"), CallerIPAddress = columnifexists(\"CallerIPAddress\", \"None\"), clientInfo_s = columnifexists(\"clientInfo_s\", \"None\")\n| where ResultType !~ \"None\" and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ \"None\" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ \"None\" and isnotempty(id_s)\n| where CallerIPAddress !~ \"None\" and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ \"None\" and isnotempty(clientInfo_s)\n| where requestUri_s !~ \"None\" and isnotempty(requestUri_s)\n| where ResourceType =~ \"VAULTS\" and ResultType =~ \"Success\"\n| where OperationName in (OperationList)  \n| summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated,*) by bin(TimeGenerated,1h), Resource, OperationName, id_s, CallerIPAddress, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, requestUri_s, clientInfo_s     \n) on Resource, TimeGenerated \n| summarize EventCount=count(), OperationNameList = make_set(OperationName), RequestURLList = make_set(requestUri_s), AccountList = make_set(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g), AccountMax = arg_max(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g,*) by Resource, id_s, clientInfo_s, LatestAnomalyTime\n| extend timestamp = LatestAnomalyTime, IPCustomEntity = CallerIPAddress, AccountCustomEntity = AccountMax\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_13')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Cisco ASA - average attack detection rate increase",
                                             "query":  "//This will help you determine if Cisco ASA devices are under heavier attack than normal over the last hour versus the previous 6 hours based on DeviceEventClassID 733100\n//References: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\n//Details on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html\n//\n\nlet timeframe = 1h;\nlet last1h = CommonSecurityLog \n| where TimeGenerated \u003e= ago(timeframe)\n| where isempty(CommunicationDirection) \n| where DeviceEventClassID == \"733100\"\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \"]\")[0]),\"[ \")[1])\n| extend splitMessage = split(Message, \".\")\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\"] \")[1])\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[0]),\"is \")\n| extend CurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\" \")[0])\n| extend MaxConfiguredBurstRate = toint(CurrentBurstRate[2])\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[1]),\"is \")\n| extend CurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\" \")[0])\n| extend MaxConfiguredAvgRate = toint(CurrentAvgRate[2])\n| extend CumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\"  \")[2]),\"is \")[1])\n| summarize last1hCumTotal = sum(CumulativeTotal), last1hAvgRatePerSec = avg(CurrentAvgRatePerSec), last1hAvgBurstRatePerSec = avg(CurrentBurstRatePerSec) by DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\nlet prev6h = CommonSecurityLog \n| where TimeGenerated between (ago(6h) .. ago(1h))\n| where isempty(CommunicationDirection) \n| where DeviceEventClassID == \"733100\"\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \"]\")[0]),\"[ \")[1])\n| extend splitMessage = split(Message, \".\")\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\"] \")[1])\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[0]),\"is \")\n| extend prevCurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\" \")[0])\n| extend prevMaxConfiguredBurstRate = toint(CurrentBurstRate[2])\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[1]),\"is \")\n| extend prevCurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\" \")[0])\n| extend prevMaxConfiguredAvgRate = toint(CurrentAvgRate[2])\n| extend prevCumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\"  \")[2]),\"is \")[1])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), prev6hCumTotal = sum(prevCumulativeTotal), prev6hAvgRatePerSec = avg(prevCurrentAvgRatePerSec), prev6hAvgBurstRatePerSec = avg(prevCurrentBurstRatePerSec) \nby DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\nlast1h | join (\n  prev6h \n) on DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate\n| project StartTimeUtc, EndTimeUtc, DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate, last1hCumTotal, prev6hCumTotal, prev6hAvgCumTotal = prev6hCumTotal/6, last1hAvgRatePerSec, prev6hAvgRatePerSec, last1hAvgBurstRatePerSec, prev6hAvgBurstRatePerSec\n// Select only events that indicate a doubling of the expected rate in the last hour over the previous 6 hours\n| where last1hCumTotal \u003e 2*prev6hAvgCumTotal or last1hAvgRatePerSec \u003e 2*prev6hAvgRatePerSec or last1hAvgBurstRatePerSec \u003e 2*prev6hAvgBurstRatePerSec\n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_14')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Cisco ASA - threat detection message fired",
                                             "query":  "//Identifies when the Cisco ASA Threat Detection engine fired an alert based on malicious activity occurring on the network inicated by DeviceEventClassID 733101-733105\n//Resources: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\n//Details on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html\n//\n\nlet timeframe = 1h;\nCommonSecurityLog \n| where TimeGenerated \u003e= ago(timeframe)\n| where isempty(CommunicationDirection) \n| where DeviceEventClassID in (\"733101\",\"733102\",\"733103\",\"733104\",\"733105\")\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_15')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Fortinet - Beacon pattern detected",
                                             "query":  "//Identifies patterns in the time deltas of contacts between internal and external IPs in Fortinet network data that are consistent with beaconing.\n// Accounts for randomness (jitter) and seasonality such as working hours that may have been introduced into the beacon pattern.\n// The lookback is set to 1d, the minimum granularity in time deltas is set to 60 seconds and the minimum number of beacons required to emit a\n// detection is set to 4.\n// Increase the lookback period to capture beacons with larger periodicities.\n// The jitter tolerance is set to 0.2 - This means we account for an overall 20% deviation from the infered beacon periodicity. Seasonality is dealt with\n// automatically using series_outliers.\n// Note: In large environments it may be necessary to reduce the lookback period to get fast query times.\n//\n\nlet starttime = 1d;\nlet TimeDeltaThresholdInSeconds = 60; // we ignore beacons diffs that fall below this threshold \nlet TotalBeaconsThreshold = 4; // minimum number of beacons required in a session to surface a row\nlet JitterTolerance = 0.2; // tolerance to jitter, e.g. - 0.2 = 20% jitter is tolerated either side of the periodicity\nlet PrivateIPregex = @\"^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.\"; // exclude destinations that fall into this category\nCommonSecurityLog\n| where DeviceVendor == \"Fortinet\"\n| where TimeGenerated \u003e ago(starttime)\n// eliminate bad data\n| where isnotempty(SourceIP) and isnotempty(DestinationIP) and SourceIP != \"0.0.0.0\"\n// filter out deny, close, rst and SNMP to reduce data volume\n| where DeviceAction !in (\"close\", \"client-rst\", \"server-rst\", \"deny\") and DestinationPort != 161\n// map input fields\n| project TimeGenerated , SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction \n// where destination IPs are public\n| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIPType == \"public\"\n// sort into source-\u003edestination 'sessions'\n| sort by SourceIP asc, DestinationIP asc, DestinationPort asc, TimeGenerated asc\n| serialize\n// time diff the contact times between source and destination to get a list of deltas\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1), nextDestIP = next(DestinationIP, 1), nextDestPort = next(DestinationPort, 1)\n| extend TimeDeltainSeconds = datetime_diff(\"second\",nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP and DestinationIP == nextDestIP and DestinationPort == nextDestPort\n// remove small time deltas below the set threshold\n| where TimeDeltainSeconds \u003e TimeDeltaThresholdInSeconds\n| project TimeGenerated, TimeDeltainSeconds, SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction \n// summarize the deltas by source-\u003edestination\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), sum(ReceivedBytes), sum(SentBytes), makelist(TimeDeltainSeconds), makeset(DeviceAction) by SourceIP, DestinationIP, DestinationPort\n// get some statistical properties of the delta distribution and smooth any outliers (e.g. laptop shut overnight, working hours)\n| extend series_stats(list_TimeDeltainSeconds), outliers=series_outliers(list_TimeDeltainSeconds)\n// expand the deltas and the outliers\n| mvexpand list_TimeDeltainSeconds to typeof(double), outliers to typeof(double)\n// replace outliers with the average of the distribution\n| extend list_TimeDeltainSeconds_normalized=iff(outliers \u003e 1.5 or outliers \u003c -1.5, series_stats_list_TimeDeltainSeconds_avg , list_TimeDeltainSeconds)\n// summarize with the smoothed distribution\n| summarize BeaconCount=count(), makelist(list_TimeDeltainSeconds), list_TimeDeltainSeconds_normalized=makelist(list_TimeDeltainSeconds_normalized), makeset(set_DeviceAction) by StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, sum_ReceivedBytes, sum_SentBytes\n// get stats on the smoothed distribution\n| extend series_stats(list_TimeDeltainSeconds_normalized)\n// match jitter tolerance on smoothed distrib\n| extend MaxJitter = (series_stats_list_TimeDeltainSeconds_normalized_avg*JitterTolerance)\n| where series_stats_list_TimeDeltainSeconds_normalized_stdev \u003c MaxJitter\n// where the minimum beacon threshold is satisfied and there was some data transfer\n| where BeaconCount \u003e TotalBeaconsThreshold and (sum_SentBytes \u003e 0 or sum_ReceivedBytes \u003e 0)\n// final projection\n| project StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, BeaconCount, TimeDeltasInSeconds=list_list_TimeDeltainSeconds, Periodicity=series_stats_list_TimeDeltainSeconds_normalized_avg, ReceivedBytes=sum_ReceivedBytes, SentBytes=sum_SentBytes, Actions=set_set_DeviceAction\n// where periodicity is order of magnitude larger than time delta threshold (eliminates FPs whose periodicity is close to the values we ignored)\n| where Periodicity \u003e= (10*TimeDeltaThresholdInSeconds)\n| extend timestamp = StartTime, IPCustomEntity = DestinationIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_16')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Possible contact with a domain generated by a DGA",
                                             "query":  "//Identifies contacts with domains names in CommonSecurityLog that might have been generated by a Domain Generation Algorithm (DGA). DGAs can be used\n//by malware to generate rendezvous points that are difficult to predict in advance. This detection uses the Alexa Top 1 million domain names to build a model\n//of what normal domains look like. It uses this to identify domains that may have been randomly generated by an algorithm.\n//The triThreshold is set to 500 - increase this to report on domains that are less likely to have been randomly generated, decrease it for more likely.\n//The start time and end time look back over 6 hours of data and the dgaLengthThreshold is set to 8 - meaning domains whose length is 8 or more are reported.\n//\n\nlet triThreshold = 500;\nlet startTime = 6h;\nlet dgaLengthThreshold = 8;\n// fetch the alexa top 1M domains\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\"]  with (format=\"csv\", zipPattern=\"*.csv\"));\n// extract tri grams that are above our threshold - i.e. are common\nlet triBaseline =   top1M\n| extend Domain = tolower(extract(\"([^.]*).{0,7}$\", 1, Domain))\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", Domain), extract_all(\"(...)\", substring(Domain, 1)), extract_all(\"(...)\", substring(Domain, 2)))\n| mvexpand Trigram=AllTriGrams\n| summarize triCount=count() by tostring(Trigram)\n| sort by triCount desc\n| where triCount \u003e triThreshold\n| distinct Trigram;\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\nlet allDataSummarized =   CommonSecurityLog\n| where TimeGenerated \u003e ago(startTime)\n| where isnotempty(DestinationHostName)\n| extend Name = tolower(DestinationHostName)\n| distinct Name\n| where Name has \".\"\n| where Name !endswith \".home\" and Name !endswith \".lan\"\n// extract DGA candidate\n| extend DGADomain = extract(\"([^.]*).{0,7}$\", 1, Name)\n| where strlen(DGADomain) \u003e dgaLengthThreshold\n// throw out domains with number in them\n| where DGADomain matches regex \"^[A-Za-z]{0,}$\"\n// extract the tri grams from summarized data\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", DGADomain), extract_all(\"(...)\", substring(DGADomain, 1)), extract_all(\"(...)\", substring(DGADomain, 2)));\n// throw out domains that have repeating tri's and/or \u003e=3 repeating letters\nlet nonRepeatingTris =  allDataSummarized\n| join kind=leftanti\n(\n    allDataSummarized\n    | mvexpand AllTriGrams\n    | summarize count() by tostring(AllTriGrams), DGADomain\n    | where count_ \u003e 1\n    | distinct DGADomain\n)\non DGADomain;\n// find domains that do not have a common tri in the baseline\nlet dataWithRareTris =  nonRepeatingTris\n| join kind=leftanti\n(\n    nonRepeatingTris\n    | mvexpand AllTriGrams\n    | extend Trigram = tostring(AllTriGrams)\n    | distinct Trigram, DGADomain\n    | join kind=inner\n    (\n        triBaseline\n    )\n    on Trigram\n    | distinct DGADomain\n)\non DGADomain;\ndataWithRareTris\n// join DGAs back on connection data\n| join kind=inner\n(\n    CommonSecurityLog\n    | where TimeGenerated \u003e ago(startTime)\n    | where isnotempty(DestinationHostName)\n    | extend DestinationHostName = tolower(DestinationHostName)\n    | project-rename Name=DestinationHostName, DataSource=DeviceVendor\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SourceIP, DestinationIP, DataSource\n)\non Name\n| project StartTime, EndTime, Name, DGADomain, SourceIP, DestinationIP, DataSource\n| extend timestamp=StartTime, IPCustomEntity=SourceIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_17')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Palo Alto - potential beaconing detected",
                                             "query":  "//Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns. \n//The query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing. \n//This outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\n//Reference Blog:\n//http://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/\n//\n\nlet starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\nCommonSecurityLog\n| where DeviceVendor == \"Palo Alto Networks\" and Activity == \"TRAFFIC\"\n| where TimeGenerated between (ago(starttime)..ago(endtime))\n| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIPType == \"public\"\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds \u003e TimeDeltaThreshold \n| project TimeGenerated, TimeDeltainSeconds, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| summarize count(), sum(ReceivedBytes), sum(SentBytes), make_list(TimeDeltainSeconds) \nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes) \nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| where TotalEvents \u003e TotalEventsThreshold \n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent \u003e PercentBeaconThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_18')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Palo Alto - possible internal to external port scanning",
                                             "query":  "//Identifies a list of internal Source IPs (10.x.x.x Hosts) that have triggered 10 or more non-graceful tcp server resets from one or more Destination IPs which \n//results in an \"ApplicationProtocol = incomplete\" designation. The server resets coupled with an \"Incomplete\" ApplicationProtocol designation can be an indication \n//of internal to external port scanning or probing attack. \n//References: https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK and\n//https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClTaCAK\n//\n\nlet timeframe = 1h;\nCommonSecurityLog \n| where TimeGenerated \u003e ago(timeframe) \n| where isnotempty(DestinationPort) and DeviceAction !in (\"reset-both\", \"deny\") \n// filter out common usage ports. Add ports that are legitimate for your environment\n| where DestinationPort !in (\"443\", \"53\", \"389\", \"80\", \"0\", \"880\", \"8888\", \"8080\")\n| where ApplicationProtocol == \"incomplete\" \n// filter out IANA ephemeral or negotiated ports as per https://en.wikipedia.org/wiki/Ephemeral_port\n| where DestinationPort !between (toint(49512) .. toint(65535)) \n| where Computer != \"\" \n| where DestinationIP !startswith \"10.\"\n// Filter out any graceful reset reasons of AGED OUT which occurs when a TCP session closes with a FIN due to aging out. \n| where AdditionalExtensions !has \"reason=aged-out\" \n// Filter out any TCP FIN which occurs when a TCP FIN is used to gracefully close half or both sides of a connection.\n| where AdditionalExtensions !has \"reason=tcp-fin\" \n// Uncomment one of the following where clauses to trigger on specific TCP reset reasons\n// See Palo Alto article for details - https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK\n// TCP RST-server - Occurs when the server sends a TCP reset to the client\n// | where AdditionalExtensions has \"reason=tcp-rst-from-server\"  \n// TCP RST-client - Occurs when the client sends a TCP reset to the server\n// | where AdditionalExtensions has \"reason=tcp-rst-from-client\"  \n| extend reason = tostring(split(AdditionalExtensions, \";\")[3])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction, DestinationIP\n| where count_ \u003e= 10\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), makeset(DestinationIP), totalcount = sum(count_) by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction\n| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_19')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Time series anomaly detection for total volume of traffic",
                                             "query":  "//Identifies anamalous spikes in network traffic logs as compared to baseline or normal historical patterns. \n//The query leverages a KQL built-in anomaly detection algorithm to find large deviations from baseline patterns. \n//Sudden increases in network traffic volume may be an indication of data exfiltration attempts and should be investigated.\n//The higher the score, the further it is from the baseline value.\n//The output is aggregated to provide summary view of unique source IP to destination IP address and port traffic observed in the flagged anomaly hour. \n//The source IP addresses which were sending less than percentotalthreshold of the total traffic have been exluded whose value can be adjusted as needed .\n//You may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet percentotalthreshold = 25;\nlet TimeSeriesData = CommonSecurityLog \n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| project TimeGenerated,SourceIP, DestinationIP, DeviceVendor\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor;\n//Filtering specific records associated with spikes as outliers\nlet TimeSeriesAlerts=TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies \u003e 0 | extend score = round(score,2), AnomalyHour = TimeGenerated\n| project DeviceVendor,AnomalyHour, TimeGenerated, Total, baseline, anomalies, score;\n//Join anomalies with Base Data to popalate associated records for investigation - Results sorted by score in descending order \nTimeSeriesAlerts \n| join (\n    CommonSecurityLog \n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| summarize HourlyCount = count(), TimeGeneratedMax = arg_max(TimeGenerated, *), DestinationIPlist = make_set(DestinationIP), DestinationPortlist = make_set(DestinationPort) by DeviceVendor, SourceIP, TimeGeneratedHour= bin(TimeGenerated, 1h)\n| extend AnomalyHour = TimeGeneratedHour\n) on AnomalyHour, DeviceVendor \n| extend PercentTotal = round((HourlyCount / Total) * 100, 3)\n| where PercentTotal \u003e percentotalthreshold\n| project DeviceVendor , AnomalyHour, TimeGeneratedMax, SourceIP, DestinationIPlist, DestinationPortlist, HourlyCount, PercentTotal, Total, baseline, score, anomalies\n| summarize HourlyCount=sum(HourlyCount), StartTimeUtc=min(TimeGeneratedMax), EndTimeUtc=max(TimeGeneratedMax), SourceIPlist = make_set(SourceIP), SourceIPMax= arg_max(SourceIP, *), DestinationIPlist = make_set(DestinationIPlist), DestinationPortlist = make_set(DestinationPortlist) by DeviceVendor , AnomalyHour, Total, baseline, score, anomalies\n| project DeviceVendor , AnomalyHour, EndTimeUtc, SourceIPMax ,SourceIPlist, DestinationIPlist, DestinationPortlist, HourlyCount, Total, baseline, score, anomalies\n| extend timestamp= EndTimeUtc , IPCustomEntity = SourceIPMax\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_20')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Wazuh - Large Number of Web errors from an IP",
                                             "query":  "//Identifies instances where Wazuh logged over 400 403 Web Errors from one IP Address. To onboard Wazuh data into Sentinel please view: https://github.com/wazuh/wazuh-documentation/blob/master/source/azure/monitoring%20activity.rst\n//\n\nlet incidentTime = ago(1d);\nCommonSecurityLog\n| where TimeGenerated \u003e incidentTime\n| where DeviceProduct =~ \"Wazuh\"\n| where Activity has \"Web server 400 error code.\"\n| where Message has \"403\"\n| extend HostName=substring(split(DeviceCustomString1,\")\")[0],1)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumberOfErrors = count(SourceIP) by HostName, SourceIP\n| where NumberOfErrors \u003e 400\n| sort by NumberOfErrors desc\n| extend timestamp = StartTime, HostCustomEntity = HostName, IPCustomEntity = SourceIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_21')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Request for single resource on domain",
                                             "query":  "//This will look for connections to a domain where only a single file is requested, this is unusual as most modern web applications require additional recources. This type of activity is often assocaited with malware beaconing or tracking URLs delivered in emails. Developed for Zscaler but applicable to any outbound web logging.\n//\n\nlet timeRange = 1d;\n//The number of URI's seen to be suspicious, higher = less likely to be suspicious\nlet uriThreshold = 1;\nlet suspiciousURLs =\nCommonSecurityLog\n| where TimeGenerated \u003e= ago(timeRange)\n// Only look at connections that were allowed through the web proxy. Comment line out for all events including those which were blocked\n| where DeviceVendor =~ \"Zscaler\" and DeviceAction =~ \"Allowed\"\n// Only look where some data was exchanged. Comment out to see 0 byte connections\n| where SentBytes \u003e 0 and ReceivedBytes \u003e 0\n// Extract the Domain\n| extend Domain = iff(countof(DestinationHostName,'.') \u003e= 2, strcat(split(DestinationHostName,'.')[-2], '.',split(DestinationHostName,'.')[-1]), DestinationHostName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makelist(RequestURL), makelist(DestinationIP), makelist(SourceIP), numOfConnections = count() by Domain\n// Determine the number of URIs that have been visited for the domain\n| extend destinationURI = arraylength(list_RequestURL)\n| where destinationURI \u003c= uriThreshold\n| where tostring(list_RequestURL) has_any (\".php\",\".aspx\")\n;\nsuspiciousURLs\n| mvexpand list_RequestURL, list_DestinationIP\n| extend RequestURL = tostring(list_RequestURL), DestinationIP = tostring(list_DestinationIP), ClientIP = tostring(list_SourceIP)\n| extend timestamp = StartTimeUtc, IPCustomEntity = DestinationIP\n| project-away list_RequestURL, list_DestinationIP, list_SourceIP, destinationURI, Domain, StartTimeUtc, EndTimeUtc, numOfConnections \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_22')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Failed AzureAD logons but success logon to host",
                                             "query":  "//Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.\n//Uses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.\n//\n\nlet timeframe = 1d;\n//Adjust this threshold to fit the environment\nlet signin_threshold = 5;\n//Make a list of all IPs with failed signins to AAD above our threshold\nlet suspicious_signins =\nSigninLogs\n| where TimeGenerated \u003e= ago(timeframe)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress != \"127.0.0.1\"\n| summarize count() by IPAddress\n| where count_ \u003e signin_threshold\n| summarize make_list(IPAddress);\n//See if any of these IPs have sucessfully logged into *nix hosts\nlet linux_logons =\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where Facility contains \"auth\" and ProcessName != \"sudo\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;\n//See if any of these IPs have sucessfully logged into Windows hosts\nlet win_logons =\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4624\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, Reason;\nunion isfuzzy=true linux_logons,win_logons\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, IPCustomEntity = IpAddress, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_23')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "IP with multiple failed Azure AD logins successfully logs in to Palo Alto VPN",
                                             "query":  "//This query creates a list of IP addresses with a number failed login attempts to AAD \n//above a set threshold.  It then looks for any successful Palo Alto VPN logins from any\n//of these IPs within the same timeframe.\n//\nlet timeframe = 1d;\n//Set a threshold of failed AAD signins from an IP address within 1 day above which we want to deem those logins suspicious.\nlet signin_threshold = 5; \n//Make a list of IPs with AAD signin failures above our threshold.\nlet suspicious_signins = \n    SigninLogs\n    | where TimeGenerated \u003e= ago(timeframe)\n    //Looking for logon failure results\n    | where ResultType !in (\"0\", \"50125\", \"50140\")\n    //Exclude localhost addresses to reduce the chance of FPs\n    | where IPAddress != \"127.0.0.1\"\n    | summarize count() by IPAddress\n    | where count_ \u003e  signin_threshold\n    | summarize make_list(IPAddress);\n//See if any of those IPs have sucessfully logged into PA VPNs during the same timeperiod\nCommonSecurityLog\n    | where TimeGenerated \u003e ago(timeframe)\n    //Select only PA VPN sucessful logons\n    | where DeviceVendor == \"Palo Alto Networks\" and DeviceEventClassID == \"globalprotect\"\n    | where Message has \"GlobalProtect gateway user authentication succeeded\"\n    //Parse out the logon source IP from the Message field to match on\n    | extend SourceIP = extract(\"Login from: ([^,]+)\", 1, Message) \n    | where SourceIP in (suspicious_signins)\n    | extend Reason = \"Multiple failed AAD logins from SourceIP\"\n    //Parse out other useful information from Message field\n    | extend User = extract(\"User name: ([^,]+)\", 1, Message) \n    | extend ClientOS = extract(\"Client OS version: ([^,\\\"]+)\", 1, Message)\n    | extend Location = extract(\"Source region: ([^,]{2})\",1, Message)\n    | project TimeGenerated, Reason, SourceIP, User, ClientOS, Location, Message, DeviceName, ReceiptTime, DeviceVendor, DeviceEventClassID, Computer, FileName\n    | extend AccountCustomEntity = User, IPCustomEntity = SourceIP, timestamp = TimeGenerated, HostCustomEntity = DeviceName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_24')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Failed host logons but success logon to AzureAD",
                                             "query":  "//Identifies a list of IP addresses with a minimum number(default of 5) of failed logon attempts to remote hosts.\n//Uses that list to identify any successful logons to Azure Active Directory from these IPs within the same timeframe.\n//\n\nlet timeframe = 1d;\n//Adjust this threshold to fit environment\nlet signin_threshold = 5; \n//Make a list of IPs with failed Windows host logins above threshold\nlet win_fails = \nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4625\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| summarize count() by IpAddress\n| where count_ \u003e signin_threshold\n| summarize make_list(IpAddress);\n//Make a list of IPs with failed *nix host logins above threshold\nlet nix_fails = \nSyslog\n| where TimeGenerated \u003e ago(timeframe)\n| where Facility contains 'auth' and ProcessName != 'sudo'\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP != \"\" and SourceIP != \"127.0.0.1\"\n| summarize count() by SourceIP\n| where count_ \u003e signin_threshold\n| summarize make_list(SourceIP);\n//See if any of the IPs with failed host logins hve had a sucessful Azure AD login\nSigninLogs\n| where TimeGenerated \u003e ago(timeframe)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress in (win_fails) or IPAddress in (nix_fails)\n| extend Reason=  \"Multiple failed host logins from IP address with successful Azure AD login\"\n| extend timstamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_25')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Network endpoint to host executable correlation",
                                             "query":  "//Correlates blocked URLs hosting [malicious] executables with host endpoint data\n//to identify potential instances of executables of the same name having been recently run.\n//\n\nlet timeframe = 1d;\nlet endpointData = \n(SecurityEvent\n  | where TimeGenerated \u003e= ago(timeframe) \n  | where EventID == 4688\n  | extend shortFileName = tostring(split(NewProcessName, '\\\\')[-1])\n  );\n// Correlate suspect executables seen in TrendMicro rule updates with similar activity on endpoints\nCommonSecurityLog\n| where TimeGenerated \u003e= ago(timeframe)\n| where DeviceVendor =~ \"Trend Micro\"\n| where Activity =~ \"Deny List updated\" \n| where RequestURL endswith \".exe\"\n| project TimeGenerated, Activity , RequestURL , SourceIP, DestinationIP\n| extend suspectExeName = tolower(tostring(split(RequestURL, '/')[-1]))\n| join (endpointData) on $left.suspectExeName == $right.shortFileName \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, URLCustomEntity = RequestURL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_26')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Cisco - firewall block but success logon to Azure AD",
                                             "query":  "//Correlate IPs blocked by a Cisco firewall appliance with successful Azure Active Directory signins. \n//Because the IP was blocked by the firewall, that same IP logging on successfully to AAD is potentially suspect\n//and could indicate credential compromise for the user account.\n//\n\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\nlet endtime = 1d;\nCommonSecurityLog\n| where TimeGenerated \u003e= ago(endtime) \n| where DeviceVendor =~ \"Cisco\"\n| where DeviceAction =~ \"denied\"\n| extend SourceIPType = iff(SourceIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where SourceIPType == \"public\"\n| summarize count() by SourceIP\n| join (\n    // Successful signins from IPs blocked by the firewall solution are suspect\n    // Include fully successful sign-ins, but also ones that failed only at MFA stage\n    // as that supposes the password was sucessfully guessed.\n  SigninLogs\n  | where ResultType in (\"0\", \"50074\", \"50076\") \n) on $left.SourceIP == $right.IPAddress\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_27')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Multiple Failed VPN User Logins",
                                             "query":  "//Creates an incident in the event of multiple unsuccessful attempts to log into the VPN server, which could indicate a potential brute force attack.\n//\n\nlet timeframe = ago(1h);\nlet threshold = 20;\nPulseConnectSecure\n| where TimeGenerated \u003e= timeframe\n| where Messages contains \"Login failed\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by User, Source_IP\n| where count_ \u003e threshold\n| extend timestamp = StartTime, AccountCustomEntity = User, IPCustomEntity = Source_IP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_29')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Base64 encoded Windows process command-lines",
                                             "query":  "//Identifies instances of a base64 encoded PE file header seen in the process command line parameter.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName;\nprocessEvents};\nProcessCreationEvents\n| where CommandLine contains \"TVqQAAMAAAAEAAA\"\n| where StartTimeUtc \u003e= ago(timeframe)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_30')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Excessive Windows logon failures",
                                             "query":  "//User has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.\n//\n\nlet starttime = 8d;\nlet endtime = 1d;\nlet threshold = 0.333;\nlet countlimit = 50;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime)\n| where EventID == 4625 and AccountType =~ \"User\"\n| where IpAddress !in (\"127.0.0.1\", \"::1\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n| join kind=leftouter (\n    SecurityEvent \n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where EventID == 4625 and AccountType =~ \"User\"\n    | where IpAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize CountPrev7day = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n) on EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n| where CountToday \u003e= coalesce(CountPrev7day,0)*threshold and CountToday \u003e= countlimit\n| extend Reason = case(\nSubStatus == '0xc000005e', 'No logon servers available to service the logon request',\nSubStatus == '0xc0000062', 'Account name is not properly formatted',\nSubStatus == '0xc0000064', 'Account name does not exist',\nSubStatus == '0xc000006a', 'Incorrect password',    \nSubStatus == '0xc000006d', 'Bad user name or password',\nSubStatus == '0xc000006f', 'User logon blocked by account restriction',\nSubStatus == '0xc000006f', 'User logon outside of restricted logon hours',\nSubStatus == '0xc0000070', 'User logon blocked by workstation restriction',\nSubStatus == '0xc0000071', 'Password has expired',\nSubStatus == '0xc0000072', 'Account is disabled',\nSubStatus == '0xc0000133', 'Clocks between DC and other computer too far out of sync',\nSubStatus == '0xc000015b', 'The user has not been granted the requested logon right at this machine',\nSubStatus == '0xc0000193', 'Account has expirated',\nSubStatus == '0xc0000224', 'User is required to change password at next logon',\nSubStatus == '0xc0000234', 'Account is currently locked out',\nstrcat('Unknown reason substatus: ', SubStatus))\n| extend WorkstationName = iff(WorkstationName == \"-\" or isempty(WorkstationName), Computer , WorkstationName) \n| project StartTimeUtc, EndTimeUtc, EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, Computer, WorkstationName, IpAddress, CountToday, CountPrev7day, Avg7Day = CountPrev7day/7\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), Computer = make_set(Computer,128), IpAddressList = make_set(IpAddress,128), sum(CountToday), sum(CountPrev7day), avg(Avg7Day) \nby EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, WorkstationName\n| order by sum_CountToday desc nulls last \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = WorkstationName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_31')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Process executed from binary hidden in Base64 encoded file",
                                             "query":  "//Encoding malicious software is a technique used to obfuscate files from detection. \n//The first CommandLine component is looking for Python decoding base64. \n//The second CommandLine component is looking for Bash/sh command line base64 decoding.\n//The third one is looking for Ruby decoding base64.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\nprocessEvents;\n};\nProcessCreationEvents \n| where TimeGenerated \u003e ago(timeframe) \n| where CommandLine contains \".decode('base64')\"\n        or CommandLine contains \"base64 --decode\"\n        or CommandLine contains \".decode64(\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by Computer, Account, AccountDomain, FileName, CommandLine, ParentProcessName \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_32')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Group added to built in domain local or global group",
                                             "query":  "//Identifies when a recently created Group was added to a privileged built in domain local group or global group such as the \n//Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition.\n//References: For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups.\n//\n\nlet timeframe = 1h;\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet GroupAddition = SecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\") \n| where AccountType =~ \"User\" and MemberName == \"-\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  \nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid;\nlet GroupCreated = SecurityEvent\n| where TimeGenerated \u003e ago(timeframe)\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType =~ \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, \nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid;\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid \n| extend timestamp = GroupCreateTime, AccountCustomEntity = GroupCreateSubjectUserName, HostCustomEntity = GroupCreateComputer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_33')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Failed logon attempts within 10 mins",
                                             "query":  "//Identifies when failed logon attempts are 20 or higher during a 10 minute period (2 failed logons per minute minimum).\n//\n\nlet timeframe = 10m;\nlet threshold = 20;\nSecurityEvent \n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4625\n| where AccountType =~ \"User\"\n| summarize min(TimeGenerated), max(TimeGenerated), FailedLogonCount = count() by EventID, Activity, Computer, Account, \nTargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| where FailedLogonCount \u003e= threshold\n| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, FailedLogonCount, EventID, Activity, Computer, \nAccount, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_34')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Malware in the recycle bin",
                                             "query":  "//Identifies malware that has been hidden in the recycle bin.\n//References: https://azure.microsoft.com/blog/how-azure-security-center-helps-reveal-a-cyberattack/.\n//\n\nlet timeframe = 1d;\nlet procList = dynamic([\"cmd.exe\",\"ftp.exe\",\"schtasks.exe\",\"powershell.exe\",\"rundll32.exe\",\"regsvr32.exe\",\"msiexec.exe\"]);\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,\nFileName = Process, CommandLine,  ParentProcessName;\nprocessEvents};\nProcessCreationEvents \n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName in~ (procList)\n| where CommandLine contains \":\\\\recycler\"\n| project StartTimeUtc = TimeGenerated, Computer, Account, NewProcessName, FileName, CommandLine, ParentProcessName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_35')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "SecurityEvent - Multiple authentication failures followed by a success",
                                             "query":  "//Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication\n//within a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or\n//possible mis-configuration of a service account within an environment.\n//The lookback is set to 6h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum\n//of 5 failures followed by a success for an account within 1 hour to surface an alert.\n//\n\nlet timeRange = 6h;\nlet authenticationWindow = 1h;\nlet authenticationThreshold = 5;\nSecurityEvent\n| where TimeGenerated \u003e ago(timeRange)\n| where EventID == 4624 or EventID == 4625\n| where IpAddress != \"-\" and isnotempty(Account)\n| extend Outcome = iff(EventID == 4624, \"Success\", \"Failure\")\n// bin outcomes into 5 minute windows to reduce the volume of data\n| summarize OutcomeCount=count() by Account, IpAddress, Computer, Outcome, bin(TimeGenerated, 5m)\n| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount\n// sort ready for sessionizing - by account and time of the authentication outcome\n| sort by Account asc, TimeGenerated asc\n| serialize \n// sessionize into failure groupings until either the account changes or there is a success\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == \"Success\")\n// count the failures in each session\n| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == \"Failure\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(Outcome), makeset(Computer), makeset(IpAddress) by SessionStartedUtc, Account\n// the session must not start with a success, and must end with one\n| where array_index_of(list_Outcome, \"Success\") != 0\n| where array_index_of(list_Outcome, \"Success\") == array_length(list_Outcome) - 1\n| project-away SessionStartedUtc, list_Outcome \n// where the number of failures before the success is above the threshold \n| where FailureCountBeforeSuccess \u003e= authenticationThreshold\n// expand out ip and computer for customer entity assignment\n| mvexpand set_IpAddress, set_Computer\n| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)\n| extend timestamp=StartTime, AccountCustomEntity=Account, HostCustomEntity=Computer, IPCustomEntity=IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_36')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "AD account with don't expire password - disabled",
                                             "query":  "//Identifies whenever a user account has the setting \"Password Never Expires\" in the user account properties selected.\n//This is indicated in Security event 4738 in the EventData item labeled UserAccountControl with an included value of %%2089 \n//%%2089 resolves to \"Dont Expire Password - Disabled\".\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID == 4738\n// 2089 value indicates the Don't Expire Password value has been set\n| where UserAccountControl has \"%%2089\" \n| extend Value_2089 = iff(UserAccountControl has \"%%2089\",\"'Don't Expire Password' - Disabled\", \"Not Changed\")\n// 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event. \n| extend Value_2050 = iff(UserAccountControl has \"%%2050\",\"'Password Not Required' - Disabled\", \"Not Changed\")\n// If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.  \n| extend Value_2082 = iff(UserAccountControl has \"%%2082\",\"'Password Not Required' - Enabled\", \"Not Changed\")\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_37')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "AD user created password not set within 24-48 hours",
                                             "query":  "//Identifies whenever a new account is created with a default password and password is not changed within 24-48 hours.\n//Simple version, can be more precise with Windowing, but not necessary if run as an alert on a daily basis.\n//Effectively, there is an event 4722 indicating a user enabled and no event 4723 indicating a password was changed within in that day or the next day.\n//\n\nlet starttime = 2d;\nlet endtime = 1d;\nSecurityEvent\n// include yesterday and not today, so we can confirm a match occurs within the next day\n| where TimeGenerated \u003e= startofday(ago(starttime)) and TimeGenerated \u003c= startofday(ago(endtime))  \n// 4722: User Account Enabled\n| where EventID == 4722 \n// Removing Machine Accounts\n| where TargetUserName !endswith \"$\" \n| join kind= leftanti (\n  SecurityEvent\n  //verify over the last 2 days\n  | where TimeGenerated \u003e= startofday(ago(starttime))\n  // Attempt made to change password\n  | where EventID == 4723\n  // Removing Machine Accounts\n  | where TargetUserName !endswith \"$\"\n) on TargetUserName, TargetDomainName\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, SubjectUserName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_38')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Potential Kerberoasting",
                                             "query":  "//A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment. \n//Each SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment. \n//An attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains \n//a hash of the Service account. This can then be used for offline cracking. This hunting query looks for accounts that are generating excessive \n//requests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number \n//of request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.\n//\n\nlet starttime = 1d;\nlet endtime = 1h;\nlet prev23hThreshold = 4;\nlet prev1hThreshold = 15;\nlet Kerbevent =\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime)\n| where EventID == 4769\n| parse EventData with * 'TicketEncryptionType\"\u003e' TicketEncryptionType \"\u003c\" *\n| where TicketEncryptionType == '0x17'\n| parse EventData with * 'TicketOptions\"\u003e' TicketOptions \"\u003c\" *\n| where TicketOptions == '0x40810000'\n| parse EventData with * 'Status\"\u003e' Status \"\u003c\" *\n| where Status == '0x0'\n| parse EventData with * 'ServiceName\"\u003e' ServiceName \"\u003c\" *\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\" \n| parse EventData with * 'TargetUserName\"\u003e' TargetUserName \"\u003c\" *\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| parse EventData with * 'IpAddress\"\u003e::ffff:' ClientIPAddress \"\u003c\" *;\nlet Kerbevent23h = Kerbevent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName) \nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status\n| where ServiceNameCountPrev23h \u003c prev23hThreshold;\nlet Kerbevent1h = \nKerbevent\n| where TimeGenerated \u003e= ago(endtime)\n| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName) \nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;\nKerbevent1h \n| join kind=leftanti\n(\nKerbevent23h\n) on TargetUserName\n// Threshold value set above is based on testing, this value may need to be changed for your environment.\n| where ServiceNameCountPrev1h \u003e prev1hThreshold\n| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions, \nTicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, IPCustomEntity = ClientIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_39')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Powershell Empire cmdlets seen in command line",
                                             "query":  "//Identifies instances of PowerShell Empire cmdlets in powershell process command line data.\n//\n\nlet timeframe = 1d;\nlet regexEmpire = @\"SetDelay|GetDelay|Set-LostLimit|Get-LostLimit|Set-Killdate|Get-Killdate|Set-WorkingHours|Get-WorkingHours|Get-Sysinfo|Add-Servers|Invoke-ShellCommand|Start-AgentJob|Update-Profile|Get-FilePart|Encrypt-Bytes|Decrypt-Bytes|Encode-Packet|Decode-Packet|Send-Message|Process-Packet|Process-Tasking|Get-Task|Start-Negotiate|Invoke-DllInjection|Invoke-ReflectivePEInjection|Invoke-Shellcode|Invoke-ShellcodeMSIL|Get-ChromeDump|Get-ClipboardContents|Get-IndexedItem|Get-Keystrokes|Invoke-Inveigh|Invoke-NetRipper|local:Invoke-PatchDll|Invoke-NinjaCopy|Get-Win32Types|Get-Win32Constants|Get-Win32Functions|Sub-SignedIntAsUnsigned|Add-SignedIntAsUnsigned|Compare-Val1GreaterThanVal2AsUInt|Convert-UIntToInt|Test-MemoryRangeValid|Write-BytesToMemory|Get-DelegateType|Get-ProcAddress|Enable-SeDebugPrivilege|Invoke-CreateRemoteThread|Get-ImageNtHeaders|Get-PEBasicInfo|Get-PEDetailedInfo|Import-DllInRemoteProcess|Get-RemoteProcAddress|Copy-Sections|Update-MemoryAddresses|Import-DllImports|Get-VirtualProtectValue|Update-MemoryProtectionFlags|Update-ExeFunctions|Copy-ArrayOfMemAddresses|Get-MemoryProcAddress|Invoke-MemoryLoadLibrary|Invoke-MemoryFreeLibrary|Out-Minidump|Get-VaultCredential|Invoke-DCSync|Translate-Name|Get-NetDomain|Get-NetForest|Get-NetForestDomain|Get-DomainSearcher|Get-NetComputer|Get-NetGroupMember|Get-NetUser|Invoke-Mimikatz|Invoke-PowerDump|Invoke-TokenManipulation|Exploit-JMXConsole|Exploit-JBoss|Invoke-Thunderstruck|Invoke-VoiceTroll|Set-WallPaper|Invoke-PsExec|Invoke-SSHCommand|Invoke-PSInject|Invoke-RunAs|Invoke-SendMail|Invoke-Rule|Get-OSVersion|Select-EmailItem|View-Email|Get-OutlookFolder|Get-EmailItems|Invoke-MailSearch|Get-SubFolders|Get-GlobalAddressList|Invoke-SearchGAL|Get-SMTPAddress|Disable-SecuritySettings|Reset-SecuritySettings|Get-OutlookInstance|New-HoneyHash|Set-MacAttribute|Invoke-PatchDll|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|New-ElevatedPersistenceOption|New-UserPersistenceOption|Add-Persistence|Invoke-CallbackIEX|Add-PSFirewallRules|Invoke-EventLoop|Invoke-PortBind|Invoke-DNSLoop|Invoke-PacketKnock|Invoke-CallbackLoop|Invoke-BypassUAC|Get-DecryptedCpassword|Get-GPPInnerFields|Invoke-WScriptBypassUAC|Get-ModifiableFile|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceUserAdd|Invoke-ServiceCMD|Write-UserAddServiceBinary|Write-CMDServiceBinary|Write-ServiceEXE|Write-ServiceEXECMD|Restore-ServiceEXE|Invoke-ServiceStart|Invoke-ServiceStop|Invoke-ServiceEnable|Invoke-ServiceDisable|Get-ServiceDetail|Find-DLLHijack|Find-PathHijack|Write-HijackDll|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-Webconfig|Get-ApplicationHost|Write-UserAddMSI|Invoke-AllChecks|Invoke-ThreadedFunction|Test-Login|Get-UserAgent|Test-Password|Get-ComputerDetails|Find-4648Logons|Find-4624Logons|Find-AppLockerLogs|Find-PSScriptsInPSAppLog|Find-RDPClientConnections|Get-SystemDNSServer|Invoke-Paranoia|Invoke-WinEnum{|Get-SPN|Invoke-ARPScan|Invoke-Portscan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|New-InMemoryModule|Add-Win32Type|Export-PowerViewCSV|Get-MacAttribute|Copy-ClonedFile|Get-IPAddress|Convert-NameToSid|Convert-SidToName|Convert-NT4toCanonical|Get-Proxy|Get-PathAcl|Get-NameField|Convert-LDAPProperty|Get-NetDomainController|Add-NetUser|Add-NetGroupUser|Get-UserProperty|Find-UserField|Get-UserEvent|Get-ObjectAcl|Add-ObjectAcl|Invoke-ACLScanner|Get-GUIDMap|Get-ADObject|Set-ADObject|Get-ComputerProperty|Find-ComputerField|Get-NetOU|Get-NetSite|Get-NetSubnet|Get-DomainSID|Get-NetGroup|Get-NetFileServer|SplitPath|Get-DFSshare|Get-DFSshareV1|Get-DFSshareV2|Get-GptTmpl|Get-GroupsXML|Get-NetGPO|Get-NetGPOGroup|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Invoke-ImpersonateUser|Create-ProcessWithToken|Free-AllTokens|Enum-AllTokens|Invoke-RevertToSelf|Set-Speaker(\\$Volume){\\$wshShell|Local:Get-RandomString|Local:Invoke-PsExecCmd|Get-GPPPassword|Local:Inject-BypassStuff|Local:Invoke-CopyFile\\(\\$sSource,|ind-Fruit|New-IPv4Range|New-IPv4RangeFromCIDR|Parse-Hosts|Parse-ILHosts|Exclude-Hosts|Get-TopPort|Parse-Ports|Parse-IpPorts|Remove-Ports|Write-PortscanOut|Convert-SwitchtoBool|Get-ForeignUser|Get-ForeignGroup\";\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\nprocessEvents};\nlet decodedPS = ProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe) \n| where CommandLine contains \" -encodedCommand\"\n| parse kind=regex flags=i CommandLine with * \"-EncodedCommand \" encodedCommand\n| project StartTimeUtc = TimeGenerated, encodedCommand = tostring(split(encodedCommand, ' ')[0]), CommandLine\n// Note: currently the base64_decodestring function is limited to supporting UTF8\n| extend decodedCommand = translate('\\0','', base64_decodestring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand);\n(decodedPS\n| union \n(ProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName in~ (\"powershell.exe\",\"powershell_ise.exe\")\n| where CommandLine !contains \"-encodedcommand\")\n| extend StartTimeUtc = TimeGenerated\n)\n| where CommandLine matches regex regexEmpire\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_40')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Multiple RDP connections from Single System",
                                             "query":  "//Identifies when an RDP connection is made to multiple systems and above the normal for the previous 7 days.  \n//Connections from the same system with the same account within the same day.\n//RDP connections are indicated by the EventID 4624 with LogonType = 10\n//\n\nlet endtime = 1d;\nlet starttime = 8d;\nlet threshold = 2.0;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)  \nby Account, IpAddress, AccountType, Activity, LogonTypeName\n| join kind=inner (\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account, IpAddress\n) on Account, IpAddress\n| extend Ratio = ComputerCountToday/(ComputerCountPrev7Days*1.0)\n// Where the ratio of today to previous 7 days is more than double.\n| where Ratio \u003e threshold\n| project StartTimeUtc, EndTimeUtc, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_41')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "RDP Nesting",
                                             "query":  "//Identifies when an RDP connection is made to a first system and then an RDP connection is made from the first system \n//to another system with the same account within the 60 minutes. Additionally, if historically daily  \n//RDP connections are indicated by the logged EventID 4624 with LogonType = 10\n//\n\nlet endtime = 1d;\nlet starttime = 8d;\n// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day.  Change the threshold as needed.\nlet threshold = 5;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n// Labeling the first RDP connection time, computer and ip\n| extend FirstHop = TimeGenerated, FirstComputer = toupper(Computer), FirstIPAddress = IpAddress, Account = tolower(Account)  \n| join kind=inner (\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n// Labeling the second RDP connection time, computer and ip\n| extend SecondHop = TimeGenerated, SecondComputer = toupper(Computer), SecondIPAddress = IpAddress, Account = tolower(Account)\n) on Account\n// Make sure that the first connection is after the second connection --\u003e SecondHop \u003e FirstHop\n// Then identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match --\u003e FirstComputer != SecondComputer\n// Then make sure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers --\u003e FirstIPAddress != SecondIPAddress\n| where FirstComputer != SecondComputer and FirstIPAddress != SecondIPAddress and SecondHop \u003e FirstHop\n// where the second hop occurs within 30 minutes of the first hop\n| where SecondHop \u003c= FirstHop+30m\n| distinct Account, FirstHop, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 7 days where the Account and IP has connected 5 or more computers.\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize makeset(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress\n// Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\n| where ComputerCount \u003e= threshold\n| mvexpand set_Computer\n| extend Computer = toupper(set_Computer)\n) on Account, $left.SecondComputer == $right.Computer, $left.SecondIPAddress == $right.IpAddress\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop) by Account, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, \nSecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = FirstHopFirstSeen, AccountCustomEntity = Account, HostCustomEntity = FirstComputer, IPCustomEntity = FirstIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_42')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Rare RDP Connections",
                                             "query":  "//Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\n//RDP connections are indicated by the EventID 4624 with LogonType = 10\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count() \nby Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 14 days that is not rare\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where EventID == 4624\n| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n) on Account, Computer\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)  \nby Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_43')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Security Event log cleared",
                                             "query":  "//Checks for event id 1102 which indicates the security event log was cleared. \n//It uses Event Source Name \"Microsoft-Windows-Eventlog\" to avoid generating false positives from other sources, like AD FS servers for instance.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 1102 and EventSourceName == \"Microsoft-Windows-Eventlog\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_44')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Process execution frequency anomaly",
                                             "query":  "//Identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors. \n//The query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns. \n//Sudden increases in execution frequency of sensitive processes should be further investigated for malicious activity.\n//Tune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 5;\nlet ExeList = dynamic([\"powershell.exe\",\"cmd.exe\",\"wmic.exe\",\"psexec.exe\",\"cacls.exe\",\"rundll.exe\"]);\nlet TimeSeriesData = \nSecurityEvent\n| where EventID == 4688 | extend Process = tolower(Process)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where Process in (ExeList)\n| project TimeGenerated, Computer, AccountType, Account, Process\n| make-series Total=count() on TimeGenerated from ago(starttime) to ago(endtime) step timeframe by Process;\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies \u003e 0\n| project Process, TimeGenerated, Total, baseline, anomalies, score\n| where Total \u003e TotalEventsThreshold;\nTimeSeriesAlerts\n| join (\nSecurityEvent\n| where EventID == 4688 | extend Process = tolower(Process)\n| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account\n) on Process, TimeGenerated \n| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score \n| extend timestamp = AnomalyHour, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_45')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Account added and removed from privileged groups",
                                             "query":  "//Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise. \n//\n\nlet timeframe = 1d;\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet AC_Add = \nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n// Event ID related to member addition.\n| where EventID in (4728, 4732,4756) \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID  \n| parse EventData with * '\"MemberName\"\u003e' AccountAdded \",OU\" * \n| where isnotempty(AccountAdded)\n| extend GroupAddedTo = TargetUserName, AddingAccount = Account \n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, \"||\", GroupAddedTo, \"||\", AddingAccount )\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated;\nlet AC_Remove = \nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n// Event IDs related to member removal.\n| where EventID in (4729,4733,4757)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID \n| parse EventData with * '\"MemberName\"\u003e' AccountRemoved \",OU\" * \n| where isnotempty(AccountRemoved)\n| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, \"||\", GroupRemovedFrom, \"||\", RemovingAccount)\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, RemovedAccountId = tolower(AccountRemoved), \nRemovedByUser = SubjectUserName, RemovedByUserLogonId = SubjectLogonId,  GroupRemovedFrom = TargetUserName, TargetDomainName; \nAC_Add \n| join kind= inner AC_Remove on $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount \n| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)\n| where DurationinSecondAfter_Removed \u003e 0\n| project-away AccountRemoved_GroupRemovedFrom_RemovingAccount\n| extend timestamp = AccountAddedTime, AccountCustomEntity = RemovedAccountId, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_46')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "User account added to built in domain local or global group",
                                             "query":  "//Identifies when a user account has been added to a privileged built in domain local group or global group \n//such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition.\n//\n\nlet timeframe = 1d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// When MemberName contains '-' this indicates addition of a group to a group\n| where AccountType == \"User\" and MemberName != \"-\"\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (4728, 4732, 4756)   \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| extend SimpleMemberName = tostring(split(tostring(split(MemberName, \",\")[0]),\"CN=\")[1])\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, SimpleMemberName, MemberName, MemberSid, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid\n| extend timestamp = StartTimeUtc, AccountCustomEntity = SimpleMemberName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_47')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "User account created and deleted within 10 mins",
                                             "query":  "//Identifies when a user account is created and then deleted within 10 minutes. This can be an indication of compromise and\n//an adversary attempting to hide in the noise.\n//\n\nlet timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n// A user account was created\n| where EventID == 4720\n| where AccountType =~ \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n  SecurityEvent\n  | where TimeGenerated \u003e ago(timeframe) \n  // A user account was deleted \n  | where EventID == 4726\n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= threshold\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_48')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "User account enabled and disabled within 10 mins",
                                             "query":  "//Identifies when a user account is enabled and then disabled within 10 minutes. This can be an indication of compromise and\n//an adversary attempting to hide in the noise.\n//\n\nlet timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n// A user account was enabled\n| where EventID == 4722\n| where AccountType =~ \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n  SecurityEvent\n  | where TimeGenerated \u003e ago(timeframe) \n  // A user account was disabled \n  | where EventID == 4725\n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= threshold\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_49')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "New user created and added to the built-in administrators group",
                                             "query":  "//Identifies when a user account was created and then added to the builtin Administrators group in the same day.\n//This should be monitored closely and all additions reviewed.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e ago(timeframe) \n| where EventID == 4720\n| where AccountType == \"User\"\n| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer), \nCreatedUser = tolower(TargetUserName), Domain = toupper(TargetDomainName), CreatedUserSid = TargetSid, AccountUsedToCreateUser = SubjectUserName\n|join (\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where AccountType == \"User\"\n// 4732 - A member was added to a security-enabled local group\n| where EventID == 4732\n//TargetSid is the builin Admins group: S-1-5-32-544\n| where TargetSid == \"S-1-5-32-544\"\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = TargetUserName, \nDomain = toupper(TargetDomainName), GroupSid = TargetSid, UserAdded = SubjectUserName, UserAddedSid = SubjectUserSid, CreatedUser = tolower(SubjectUserName), \nCreatedUserSid = MemberSid\n)\non CreatedUserSid\n//Create User first, then the add to the group.\n| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, Domain, GroupAddTime, GroupAddEventID, \nGroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, UserAdded, UserAddedSid \n| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_50')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. An alert is generated for recent sign-ins that have location counts that are anomalous\n//over last day but also over the last 7-day and 14-day periods.\n//\n\nlet lookBack_long = 14d;\nlet lookBack_med = 7d;\nlet lookBack = 1d;\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack_long))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_long)),now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| where Slope \u003e 0.3\n| top 50 by Slope desc\n| join kind = leftsemi (\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack_med))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_med)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n| top 50 by Slope desc\n| where Slope \u003e 0.3\n) on UserPrincipalName, AppDisplayName\n| join kind = leftsemi (\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n| top 50 by Slope desc\n// Higher threshold requirement on last day anomaly\n| where Slope \u003e 5\n) on UserPrincipalName, AppDisplayName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_51')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Brute Force Attack against GitHub Account",
                                             "query":  "//Attackers who are trying to guess your users passwords or use brute-force methods to get in. If your organization is using SSO with Azure Active Directory, authentication logs to GitHub.com will be generated. Using the following query can help you identify a sudden increase in failed logon attempt of users.\n//\n\nlet LearningPeriod = 7d; \nlet BinTime = 1h; \nlet RunTime = 1h; \nlet StartTime = 1h; \nlet NumberOfStds = 3; \nlet MinThreshold = 10.0; \nlet EndRunTime = StartTime - RunTime; \nlet EndLearningTime = StartTime + LearningPeriod; \nlet GitHubFailedSSOLogins = (SigninLogs \n| where AppDisplayName == \"GitHub.com\" \n| where ResultType == 50056); \nGitHubFailedSSOLogins \n| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime)) \n| summarize FailedLoginsCountInBinTime = count() by User = Identity, bin(TimeGenerated, BinTime) \n| summarize AvgOfFailedLoginsInLearning = avg(FailedLoginsCountInBinTime), StdOfFailedLoginsInLearning = stdev(FailedLoginsCountInBinTime) by User \n| extend LearningThreshold = max_of(AvgOfFailedLoginsInLearning + StdOfFailedLoginsInLearning * NumberOfStds, MinThreshold) \n| join kind=innerunique ( \n  GitHubFailedSSOLogins \n  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime)) \n  | summarize FailedLoginsCountInRunTime = count() by User = Identity \n) on User \n| where FailedLoginsCountInRunTime \u003e LearningThreshold\n//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_52')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Attempt to bypass conditional access rule in Azure AD",
                                             "query":  "//Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\n//The ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\n//or if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\n//References: \n//https://docs.microsoft.com/azure/active-directory/conditional-access/overview\n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//ConditionalAccessStatus == 0 // Success\n//ConditionalAccessStatus == 1 // Failure\n//ConditionalAccessStatus == 2 // Not Applied\n//ConditionalAccessStatus == 3 // unknown\n//\n\nlet timeRange = ago(1d);\nlet threshold = 1;\nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, \": \", ResultDescription) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name\n| where IPAddressCount \u003e threshold and StatusDetails !has \"MFA successfully completed\"\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = makeset(IPAddresses), Status = makeset(Status), CorrelationIds = makeset(CorrelationIds) by StartTimeUtc, EndTimeUtc, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_53')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Attempts to sign in to disabled accounts",
                                             "query":  "//Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\n//Default threshold for Azure Applications attempted to sign in to is 3.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator.\n//\n\nlet timeframe = 1d;\nlet threshold = 3;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeframe)\n| where ResultType == \"50057\"\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(), applicationCount = dcount(AppDisplayName), \napplicationSet = makeset(AppDisplayName) by UserPrincipalName, IPAddress\n| where applicationCount \u003e= threshold\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_54')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Distributed Password cracking attempts in AzureAD",
                                             "query":  "//Identifies distributed password cracking attempts from the Azure Active Directory SigninLogs.\n//The query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n//50055   Invalid password, entered expired password.\n//50056   Invalid or null password - Password does not exist in store for this user.\n//50126   Invalid username or password, or invalid on-premises username or password.\n//\n\nlet timeRange = 1d;\nlet s_threshold = 30;\nlet l_threshold = 3;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| where OperationName =~ \"Sign-in activity\"\n// Error codes that we want to look at as they are related to the use of incorrect password.\n| where ResultType in (\"50126\", \"50053\" , \"50055\", \"50056\")\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend LocationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),LocationCount=dcount(LocationString), Location = make_set(LocationString), \nIPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), \nBrowser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName                               \n// Setting a generic threshold - Can be different for different environment\n| where SigninCount \u003e s_threshold and LocationCount \u003e= l_threshold\n| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)\n| distinct *\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_55')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Failed login attempts to Azure Portal",
                                             "query":  "//Identifies failed login attempts in the Azure Active Directory SigninLogs to the Azure Portal.  Many failed logon \n//attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.  \n//The following are excluded due to success and non-failure results:\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//0 - successful logon\n//50125 - Sign-in was interrupted due to a password reset or password registration entry.\n//50140 - This error occurred due to Keep me signed in interrupt when the user was signing-in.\n//\n\nlet timeRange = 1d;\nlet lookBack = 7d;\nlet threshold_Failed = 5;\nlet threshold_FailedwithSingleIP = 20;\nlet threshold_IPAddressCount = 2;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet azPortalSignins = materialize(SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n// Azure Portal only\n| where AppDisplayName =~ \"Azure Portal\")\n;\nlet successPortalSignins = azPortalSignins\n| where TimeGenerated \u003e= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n//| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n| distinct TimeGenerated, UserPrincipalName, Id, ResultType\n;\nlet failPortalSignins = azPortalSignins\n| where TimeGenerated \u003e= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n;\n// Verify there is no success for the same connection attempt after the fail\nlet failnoSuccess = failPortalSignins | join kind= leftouter (\n   successPortalSignins \n) on UserPrincipalName, Id\n| where TimeGenerated \u003e TimeGenerated1\n| project-away TimeGenerated1, UserPrincipalName1, Id1, ResultType1\n;\n// Lookup up resolved identities from last 7 days\nlet identityLookup = azPortalSignins\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from portal signins\nlet unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (\n   identityLookup \n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;\nu_azPortalSignins\n| extend Status = strcat(ResultType, \": \", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation\n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\n| where (IPAddressCount \u003e= threshold_IPAddressCount and FailedLogonCount \u003e= threshold_Failed) or FailedLogonCount \u003e= threshold_FailedwithSingleIP\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_56')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "GitHub Signin Burst from Multiple Locations",
                                             "query":  "//This alerts when there Signin burst from multiple locations in GitHub (AAD SSO).\n//\n\nlet RunTime = 1h;\nSigninLogs\n| where TimeGenerated \u003e ago(RunTime)\n| where AppDisplayName == \"GitHub.com\"\n| where ResultType == 0\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location) by User = Identity\n| where CountOfLocations \u003e 1\n//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_57')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Sign-ins from IPs that attempt sign-ins to disabled accounts",
                                             "query":  "//Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator.\n//\n\nlet lookBack = 1d;\nSigninLogs \n| where TimeGenerated \u003e= ago(lookBack)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), disabledAccountLoginAttempts = count(), \ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), \napplicationSet = makeset(AppDisplayName) by IPAddress\n| order by disabledAccountLoginAttempts desc\n| join kind= leftouter (\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\n    SigninLogs\n    | where TimeGenerated \u003e= ago(lookBack)\n    | where ResultType == 0\n    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount \u003c 100\n) on IPAddress  \n// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\n| where successfulAccountSigninCount != 0\n| project StartTimeUtc, EndTimeUtc, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet\n| order by disabledAccountLoginAttempts\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_58')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Brute force attack against Azure Portal",
                                             "query":  "//Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures \n//and by a successful authentication within a given time window. \n//(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)\n//Default Failure count is 5, Default Success count is 1 and default Time Window is 20 minutes.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n//\n\nlet failureCountThreshold = 5;\nlet successCountThreshold = 1;\nlet timeRange = 1d;\nlet authenticationWindow = 20m;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| where AppDisplayName contains \"Azure Portal\"\n// Split out failure versus non-failure types\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddress = makeset(IPAddress), makeset(OS), makeset(Browser), makeset(City), \nmakeset(ResultType), FailureCount = countif(FailureOrSuccess==\"Failure\"), SuccessCount = countif(FailureOrSuccess==\"Success\") \nby bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName, AppDisplayName\n| where FailureCount \u003e= failureCountThreshold and SuccessCount \u003e= successCountThreshold\n| mvexpand IPAddress\n| extend IPAddress = tostring(IPAddress)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_59')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Password spray attack against Azure AD application",
                                             "query":  "//Identifies evidence of password spray activity against Azure AD applications by looking for failures from multiple accounts from the same\n//IP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range\n//are bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\n//This can be an indicator that an attack was successful.\n//The default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 3 days\n//Note: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n//\n\nlet timeRange = 3d;\nlet lookBack = 7d;\nlet authenticationWindow = 20m;\nlet authenticationThreshold = 5;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n// Lookup up resolved identities from last 7 days\nlet identityLookup = SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| where isnotempty(UserId)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// collect window threshold breaches\nSigninLogs\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(failureCodes)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName\n| where FailedPrincipalCount \u003e= authenticationThreshold\n| summarize WindowThresholdBreaches = count() by IPAddress\n| join kind= inner (\n// where we breached a threshold, join the details back on all failure data\n SigninLogs\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(failureCodes)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId\n// lookup any unresolved identities\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\n| join kind= leftouter (\n identityLookup \n) on $left.UnresolvedUserId==$right.UserId\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName\n| extend FailedPrincipalCount = arraylength(set_UserPrincipalName)\n) on IPAddress\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches\n| join kind= inner (\nSigninLogs // get data on success vs. failure history for each IP\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress\n| where GlobalFailPrincipalCount \u003e GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\n) on IPAddress\n| project-away IPAddress1\n| extend timestamp=StartTime, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_60')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Successful logon from IP and failure from a different IP",
                                             "query":  "//Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP.\n//This may indicate a malicious attempt at password guessing based on knowledge of the users account.\n//\n\nlet timeFrame = 1d;\nlet logonDiff = 10m;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeFrame) \n| where ResultType == \"0\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])\n| join kind= inner (\n    SigninLogs \n    | where TimeGenerated \u003e= ago(timeFrame) \n    | where ResultType !in (\"0\", \"50140\") \n    | where ResultDescription !~ \"Other\"  \n    | where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription\n) on UserPrincipalName, AppDisplayName \n| where SuccessLogonTime \u003c FailedLogonTime and FailedLogonTime - SuccessLogonTime \u003c= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription \n| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_61')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Failed logon attempts in authpriv",
                                             "query":  "//Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in \n//isnt provisioned on the machine. A few hits could indicate someone attempting to access a machine they arent authorized to access. \n//If there are many of hits, especially from outside your network, it could indicate a brute force attack. \n//Default threshold for logon attempts is 15.\n//\n\nlet startdate = 1d;\nlet threshold = 15;\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\n// are aggregated.\nlet authfail = Syslog\n| where TimeGenerated \u003e= ago(startdate)     \n| where Facility =~ \"authpriv\"   // looks at authpriv messages\n| where SyslogMessage contains \"authentication failure\" and SyslogMessage contains \" uid=0\"\n| parse SyslogMessage with * \"rhost=\" ExternalIP\n| project TimeGenerated, Computer, ProcessName, HostIP, ExternalIP, ProcessID;  \n// Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \nlet userfail = Syslog \n| where TimeGenerated \u003e= ago(startdate)\n| where Facility =~ \"authpriv\" \n| where SyslogMessage contains \"user unknown\"\n| project TimeGenerated, Computer, HostIP, ProcessID;\n// Join the two log messages above\nlet userauthfail = authfail | join (userfail) on Computer, HostIP, ProcessID\n| project TimeGenerated, Computer, HostIP, ExternalIP, ProcessID ;\n// Extract the EventTime of the first logon attempt\nlet firstfail = userauthfail\n| summarize arg_min(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, FirstLogonAttempt = TimeGenerated;\n// Extract the EventTime of the last logon attempt\nlet lastfail = userauthfail\n| summarize arg_max(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, LatestLogonAttempt = TimeGenerated;\n// Join first and last logon attempt data and calculate the time between them (AttemptPeriodLength).\nlet faildates = firstfail | join (lastfail) on Computer, ExternalIP\n| project ExternalIP, Computer, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt;\n// Count the number of failed logon attempts by External IP and internal machine\nlet totalfails = userauthfail\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TotalLogonAttempts = count() by ExternalIP, Computer, HostIP\n| project StartTimeUtc, EndTimeUtc, ExternalIP, Computer, HostIP, TotalLogonAttempts;\n// Combine total attempts with timing data from above\nlet finalfails = totalfails | join (faildates) on Computer, ExternalIP\n| project StartTimeUtc, EndTimeUtc, SourceAddress = ExternalIP, DestinationHost = Computer, DestinationIP = HostIP, TotalLogonAttempts, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts\n| order by DestinationHost asc nulls last;\nfinalfails \n| where TotalLogonAttempts \u003e= threshold\n| extend timestamp = StartTimeUtc, HostCustomEntity = DestinationHost, IPCustomEntity = DestinationIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_62')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Squid proxy events related to mining pools",
                                             "query":  "//Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used. \n// http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet timeframe = 1d;\nlet DomainList = dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \"xmrget.com\", \n\"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \"supportxmr.com\",\n\"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \"gntl.co.uk\", \"semipool.com\", \n\"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \"coinpoolit.webhop.me\", \"nanopool.org\", \n\"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \"extrmepool.org\", \"webcoin.me\", \n\"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \"dwarfpool.com\", \"hash-to-coins.com\", \n\"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \"moneropool.ru\", \"cryptonotepool.org.uk\",\n\"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\",\n\"shscrypto.net\"]);\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_63')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Squid proxy events for ToR proxies",
                                             "query":  "//Check for Squid proxy events associated with common ToR proxies. This query presumes the default squid log format is being used.\n//http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet timeframe = 1d;\nlet DomainList = dynamic([\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\", \n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\", \n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\", \n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\"]);\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == \"200\"\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_64')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "New internet-exposed SSH endpoints",
                                             "query":  "//Looks for SSH endpoints with a history of sign-ins only from private IP addresses are accessed from a public IP address.\n//\n\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.'; \nlet avgthreshold = 0;\nlet probabilityLimit = 0.01;\nlet startime = 7d;\nlet ssh_logins = Syslog\n| where TimeGenerated \u003e= ago(startime)\n| where Facility contains \"auth\" and ProcessName =~ \"sshd\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage) \n| where isnotempty(SourceIP)\n| extend ipType = iff(SourceIP matches regex PrivateIPregex,\"private\" ,\"public\");\nssh_logins \n| summarize privatecount=countif(ipType==\"private\"), publiccount=countif(ipType==\"public\") by HostName, HostIP, bin(EventTime, 1d)\n| summarize \npublicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),\nprivateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP\n| mv-apply publicIPLoginHistory = publicIPLoginHistory on\n(\n    order by todatetime(publicIPLoginHistory['logon_time']) asc\n    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))\n)\n| mv-apply privateIPLoginHistory = privateIPLoginHistory on\n(\n    order by todatetime(privateIPLoginHistory['logon_time']) asc\n    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))\n)\n// Some logins from private IPs\n| where privateAverage \u003e avgthreshold\n// There is a non-zero number of logins from public IPs\n| where publicAverage \u003e avgthreshold\n// Approximate probability of seeing login from a public IP is \u003c 1%\n| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)\n| where probabilityPublic \u003c probabilityLimit\n// Today has the highest number of logins from public IPs that we've seen in the last week\n| extend publicLoginCountToday = publicIPLoginCountList[-1]\n| where publicLoginCountToday \u003e= maxPublicLoginCount\n| extend HostCustomEntity = HostName\n// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect\n// | join kind=rightsemi (\n//   ssh_logins\n//  | where ipType == \"public\"\n//  ) on HostName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_65')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "SSH - Potential Brute Force",
                                             "query":  "//Identifies an IP address that had 15 failed attempts to sign in via SSH in a 4 hour block during a 24 hour time period.\n//\n\nlet timeframe = 1d;\nlet threshold = 15;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where SyslogMessage contains \"Failed password for invalid user\"\n| where ProcessName =~ \"sshd\" \n| parse kind=relaxed SyslogMessage with * \"invalid user\" user \" from \" ip \" port\" port \" ssh2\"\n| project user, ip, port, SyslogMessage, EventTime\n| summarize EventTimes = make_list(EventTime), PerHourCount = count() by ip, bin(EventTime, 4h), user\n| where PerHourCount \u003e threshold\n| mvexpand EventTimes\n| extend EventTimes = tostring(EventTimes) \n| summarize StartTimeUtc = min(EventTimes), EndTimeUtc = max(EventTimes), UserList = makeset(user), sum(PerHourCount) by IPAddress = ip\n| extend UserList = tostring(UserList) \n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress, AccountCustomEntity = UserList\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_66')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Microsoft COVID-19 file hash indicator matches",
                                             "query":  "//Identifies a match in CommonSecurityLog Event data from any FileHash published in the Microsoft COVID-19 Threat Intel Feed - as described at https://www.microsoft.com/security/blog/2020/05/14/open-sourcing-covid-threat-intelligence/\n//\n\nlet dt_lookBack = 1h;\nlet covidIndicators = (externaldata(TimeGenerated:datetime, FileHashValue:string, FileHashType: string, TlpLevel: string, Product: string, ThreatType: string, Description: string )\n[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.Covid19.Indicators.csv\"] with (format=\"csv\"));\nlet fileHashIndicators = covidIndicators\n| where isnotempty(FileHashValue);\n// Handle matches against both lower case and uppercase versions of the hash:\n( fileHashIndicators | extend FileHashValue = tolower(FileHashValue)\n  | union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\n|  join (\n   CommonSecurityLog | where TimeGenerated \u003e= ago(dt_lookBack) \n   | where isnotempty(FileHash)\n   | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n)\non $left.FileHashValue == $right.FileHash\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by FileHashValue\n| project LatestIndicatorTime, FileHashValue, FileHashType, Description, ThreatType,  \nCommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction, \nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity\n| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, AccountCustomEntity = SourceUserName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_67')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Low-severity",
                                             "displayName":  "Anomalous User Agent connection attempt",
                                             "query":  "//Identifies connection attempts (success or fail) from clients with very short or very long User Agent strings and with less than 100 connection attempts.\n//\n\nlet timeFrame = 1d;\nlet short_uaLength = 5;\nlet long_uaLength = 1000;\nlet c_threshold = 100;\nW3CIISLog \n| where TimeGenerated \u003e= ago(timeFrame)\n// Exclude local IPs as these create noise\n| where cIP !startswith \"192.168.\" and cIP != \"::1\"\n| where isnotempty(csUserAgent) and csUserAgent !in~ (\"-\", \"MSRPC\") and (string_size(csUserAgent) \u003c= short_uaLength or string_size(csUserAgent) \u003e= long_uaLength)\n| extend csUserAgent_size = string_size(csUserAgent)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ConnectionCount = count() by Computer, sSiteName, sPort, csUserAgent, csUserAgent_size, csUserName , csMethod, csUriStem, sIP, cIP, scStatus, scSubStatus, scWin32Status\n| where ConnectionCount \u003c c_threshold\n| extend timestamp = StartTimeUtc, AccountCustomEntity = csUserName, HostCustomEntity = Computer, IPCustomEntity = cIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_68')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "High count of failed attempts from same client IP",
                                             "query":  "//Identifies when 20 or more failed attempts from a given client IP in 1 minute occur on the IIS server.\n//This could be indicative of an attempted brute force. This could also simply indicate a misconfigured service or device.\n//Recommendations: Validate that these are expected connections from the given Client IP.  If the client IP is not recognized, \n//potentially block these connections at the edge device.\n//If these are expected connections, verify the credentials are properly configured on the system, service, application or device \n//that is associated with the client IP.\n//References:\n//IIS status code mapping: https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\n//Win32 Status code mapping: https://msdn.microsoft.com/library/cc231199.aspx\n//\n\nlet timeFrame = 1d;\nlet timeBin = 1m;\nlet failedThreshold = 20;\nW3CIISLog\n| where TimeGenerated \u003e= ago(timeFrame)\n| where scStatus in (\"401\",\"403\")\n| where csUserName != \"-\"\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\", \nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\", \nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\", \nscWin32Status_Hex =~ \"1\", \"Incorrect function.\", \nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\", \nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\", \nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\", \nscWin32Status_Hex =~ \"5\", \"Access is denied.\", \nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\", \nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\", \n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of failed attempts from same client IP\n| summarize makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\n| where FailedConnectionsCount \u003e= failedThreshold\n| project TimeGenerated, cIP, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\n| order by FailedConnectionsCount\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = cIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_69')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "High count of failed logons by a user",
                                             "query":  "//Identifies when 100 or more failed attempts by a given user in 10 minutes occur on the IIS Server.\n//This could be indicative of attempted brute force based on known account information.\n//This could also simply indicate a misconfigured service or device. \n//References:\n//IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\n//Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n//\n\nlet timeFrame = 1d;\nlet timeBin = 10m;\nlet failedThreshold = 100;\nW3CIISLog\n| where TimeGenerated \u003e= ago(timeFrame)\n| where scStatus in (\"401\",\"403\")\n| where csUserName != \"-\"\n// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI\n| extend csUriQuery = iff(csUriQuery startswith \"MailboxId=\", tostring(split(csUriQuery, \"\u0026\")[0]) , csUriQuery )\n| extend csUriQuery = iff(csUriQuery startswith \"X-ARR-CACHE-HIT=\", strcat(tostring(split(csUriQuery, \"\u0026\")[0]),tostring(split(csUriQuery, \"\u0026\")[1])) , csUriQuery )\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\", \nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\", \nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\", \nscWin32Status_Hex =~ \"1\", \"Incorrect function.\", \nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\", \nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\", \nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\", \nscWin32Status_Hex =~ \"5\", \"Access is denied.\", \nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\", \nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\", \n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of failed logons by a user\n| summarize makeset(decodedUriQuery), makeset(cIP), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), csUserName, Computer, sIP\n| where FailedConnectionsCount \u003e= failedThreshold\n| project TimeGenerated, csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_cIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount\n| order by FailedConnectionsCount\n| extend timestamp = TimeGenerated, AccountCustomEntity = csUserName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_70')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "High count of connections by client IP on many ports",
                                             "query":  "//Identifies when 30 or more ports are used for a given client IP in 10 minutes occurring on the IIS server.\n//This could be indicative of attempted port scanning or exploit attempt at internet facing web applications.  \n//This could also simply indicate a misconfigured service or device.\n//References:\n//IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\n//Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n//\n\nlet timeFrame = 1d;\nlet timeBin = 10m;\nlet portThreshold = 30;\nW3CIISLog\n| where TimeGenerated \u003e= ago(timeFrame)\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"775\", \"The referenced account is currently locked out and cannot be logged on to.\",\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\",\nscWin32Status_Hex =~ \"532\", \"Logon failure: The specified account password has expired.\",\nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\", \nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\", \nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\", \nscWin32Status_Hex =~ \"1\", \"Incorrect function.\", \nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\", \nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\", \nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\", \nscWin32Status_Hex =~ \"5\", \"Access is denied.\", \nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\", \nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\", \n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of attempts by client IP on many ports\n| summarize makeset(sPort), makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), ConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\n| extend portCount = arraylength(set_sPort)\n| where portCount \u003e= portThreshold\n| project TimeGenerated, cIP, set_sPort, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, ConnectionsCount, portCount\n| order by portCount\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_71')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Detection-Medium-severity",
                                             "displayName":  "Malicious web application requests linked with MDATP alerts",
                                             "query":  "//Takes MDATP alerts where web scripts are present in the evidence and correlates with requests made to those scripts\n//in the WCSIISLog to surface new alerts for potentially malicious web request activity.\n//The lookback for alerts is set to 1h and the lookback for W3CIISLogs is set to 7d. A sample set of popular web script extensions\n//has been provided in scriptExtensions that should be tailored to your environment.\n//\n\nlet alertTimeWindow = 1h;\nlet logTimeWindow = 7d;\n// Define script extensions that suit your web application environment - a sample are provided below\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]); \nlet alertData = materialize(SecurityAlert \n| where TimeGenerated \u003e ago(alertTimeWindow) \n| where ProviderName == \"MDATP\" \n// Parse and expand the alert JSON \n| extend alertData = parse_json(Entities) \n| mvexpand alertData);\nlet fileData = alertData\n// Extract web script files from MDATP alerts - our malicious web scripts - candidate webshells\n| where alertData.Type =~ \"file\" \n| where alertData.Name has_any(scriptExtensions) \n| extend FileName = tostring(alertData.Name), Directory = tostring(alertData.Directory);\nlet hostData = alertData\n// Extract server details from alerts and map to alert id\n| where alertData.Type =~ \"host\"\n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId\n| distinct HostName, DnsDomain, SystemAlertId;\n// Join the files on their impacted servers\nlet webshellData = fileData\n| join kind=inner (hostData) on SystemAlertId \n| project TimeGenerated, FileName, Directory, HostName, DnsDomain;\nwebshellData\n| join (  \n// Find requests that were made to this file on the impacted server in the W3CIISLog table \nW3CIISLog  \n| where TimeGenerated \u003e ago(logTimeWindow) \n// Restrict to accesses to script extensions \n| where csUriStem has_any(scriptExtensions)\n| extend splitUriStem = split(csUriStem, \"/\")  \n| extend FileName = splitUriStem[-1], HostName = sComputerName\n// Summarize potential attacker activity\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), RequestUserAgents=make_set(csUserAgent), ReqestMethods=make_set(csMethod), RequestStatusCodes=make_set(scStatus), RequestCookies=make_set(csCookie), RequestReferers=make_set(csReferer), RequestQueryStrings=make_set(csUriQuery) by AttackerIP=cIP, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName), HostName  \n) on FileName, HostName\n| project StartTime, EndTime, AttackerIP, RequestUserAgents, HostName, SiteName, ShellLocation, ReqestMethods, RequestStatusCodes, RequestCookies, RequestReferers, RequestQueryStrings, RequestCount = count_\n// Expose the attacker ip address as a custom entity\n| extend timestamp=StartTime, IPCustomEntity = AttackerIP, HostCustomEntity = HostName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'detection_query_72')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      }
                  ]
}
