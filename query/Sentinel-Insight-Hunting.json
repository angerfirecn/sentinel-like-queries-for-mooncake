{
    "$schema":  "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymenttemplate.json#",
    "contentversion":  "1.0.0.0",
    "parameters":  {
                       "location":  {
                                        "type":  "string"
                                    },
                       "workspacename":  {
                                             "type":  "string"
                                         }
                   },
    "resources":  [
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AuditLogs",
                                             "displayName":  "Consent to Application discovery",
                                             "query":  "//This query looks at the last 14 days for any \"Consent to application\" operation\n//occurs by a user or app. This could indicate that permissions to access the listed AzureApp\n//was provided to a malicious actor. Consent to appliction, Add service principal and \n//Add OAuth2PermissionGrant events should be rare. If available, additional context is added \n//from the AuditLogs based on CorrleationId from the same account that performed \"Consent to \n//application\".\n//For further information on AuditLogs please see \n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities\n//This may help detect the Oauth2 attack that can be initiated by this publicly available tool\n//https://github.com/fireeye/PwnAuth\n//\n\nlet auditLookback = 14d;\n// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 30 days will be exluded\nlet threshold = 3;\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | extend ModProps = TargetResources.[0].modifiedProperties\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\n// Get just the InitiatedBy and CorrleationId so we can look at associated audit activity\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", replace the below if you are interested in those as starting points for OperationName\nlet HistoricalConsent = auditLogEvents(auditLookback)  \n| where OperationName == \"Consent to application\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \nby Type, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n// Remove comment below to only include operations initiated by a user or app that is above the threshold for the last 30 days\n//| where OperationCount \u003e threshold\n;\nlet Correlate = HistoricalConsent \n| summarize by InitiatedBy, CorrelationId;\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", replace the below if you changed the starting OperationName above\nlet allOtherEvents = auditLogEvents(auditLookback) \n| where OperationName != \"Consent to application\";\n// Gather associated activity based on audit activity for \"Consent to application\" and InitiatedBy and CorrleationId\nlet CorrelatedEvents = Correlate \n| join allOtherEvents on InitiatedBy, CorrelationId\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \nby Type, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n;\n// Union the results\nlet Results = union isfuzzy=true HistoricalConsent,CorrelatedEvents;\n// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)\nResults\n| extend newValue = split(newValue, \";\")\n| extend PropertyUpdate = pack(PropertyName, newValue, \"Id\", Id)\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) \nby InitiatedBy, IpAddress, TargetResourceName, OperationName, CorrelationId\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_1')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AuditLogs",
                                             "displayName":  "Rare Audit activity initiated by App",
                                             "query":  "//Compares the current day to the last 14 days of audits to identify new audit activities by \n//OperationName, InitiatedByApp, UserPrincipalName, PropertyName, newValue\n//This can be useful when attempting to track down malicious activity related to additions of new users,\n//additions to groups, removal from groups by Azure Apps and automated approvals.\n//\n\nlet current = 1d;\nlet auditLookback = 14d;\nlet AuditTrail = AuditLogs \n| where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current) \n| extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| where isnotempty(InitiatedByApp)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend IpAddress = tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where isnotempty(newValue) and newValue != \"\\\"\\\"\"\n| summarize  by OperationName, InitiatedByApp, UserPrincipalName, IpAddress, TargetResourceName, PropertyName, newValue;\nlet AccountMods = AuditLogs \n| where TimeGenerated \u003e= ago(current)\n| extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| where isnotempty(InitiatedByApp)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend IpAddress = tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where isnotempty(newValue) and newValue != \"\\\"\\\"\"\n| where PropertyName != \"TargetId.UserType\"\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"newValue\",newValue, \"Id\", Id, \"CorrelationId\", CorrelationId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedByApp, UserPrincipalName, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue;\nlet RareAudits = AccountMods | join kind= leftanti (\n   AuditTrail \n) on OperationName, InitiatedByApp, UserPrincipalName, PropertyName, newValue;\nRareAudits\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc),Activity = make_set(Activity) by InitiatedByApp, OperationName, UserPrincipalName, IpAddress, TargetResourceName\n| order by UserPrincipalName asc, StartTimeUtc asc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_2')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AuditLogs",
                                             "displayName":  "Rare Audit activity initiated by User",
                                             "query":  "//Compares the current day to the last 14 days of audits to identify new audit activities by \n//OperationName, InitiatedByUser, UserPrincipalName, PropertyName, newValue\n//This can be useful when attempting to track down malicious activity related to additions of \n//new users, additions to groups, removal from groups by specific users.\n//\n\nlet current = 1d;\nlet auditLookback = 14d;\nlet AuditTrail = AuditLogs \n| where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current) \n| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(InitiatedByUser)\n| extend InitiatedByIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| summarize count() by OperationName, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, PropertyName, newValue, TargetResourceName;\nlet AccountMods = AuditLogs \n| where TimeGenerated \u003e= ago(current)\n| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(InitiatedByUser)\n| extend InitiatedByIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where PropertyName !in (\"TargetId.UserType\", \"StsRefreshTokensValidFrom\", \"LastDirSyncTime\") and (PropertyName != \"Action Client Name\" and newValue != \"\\\"DirectorySync\\\"\") and (PropertyName != \"Included Updated Properties\" and newValue != \"\\\"LastDirSyncTime\\\"\")\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"newValue\",newValue, \"Id\", Id, \"CorrelationId\", CorrelationId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, Category, OperationName, PropertyName, newValue, TargetResourceName;\nlet RareAudits = AccountMods | join kind= leftanti (\n   AuditTrail \n) on OperationName, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, PropertyName, newValue;\nRareAudits \n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), make_set(Activity) by InitiatedByUser, InitiatedByIPAddress, OperationName, UserPrincipalName, TargetResourceName\n| order by UserPrincipalName asc, StartTimeUtc asc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedByUser, HostCustomEntity = TargetResourceName, IPCustomEntity = InitiatedByIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_3')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AuditLogs",
                                             "displayName":  "User Granted Access and associated audit activity",
                                             "query":  "//Identifies when a new user is granted access and any subsequent audit related activity.  This can help you identify rogue or malicious user behavior.\n//\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 14 days will be excluded\nlet threshold = 3;\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\nlet HistoricalAdd = auditLogEvents(auditLookback)\n| where OperationName in~ (opName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \nby Type, InitiatedBy, IpAddress, TargetUserName, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n// Remove comment below to only include operations initiated by a user or app that is above the threshold for the last 14 days\n| where OperationCount \u003e threshold\n;\n// Get list of new added users to correlate with all other events\nlet Correlate = HistoricalAdd \n| summarize by InitiatedBy, TargetUserName, CorrelationId;\n// Get all other events related to list of newly added users\nlet allOtherEvents = auditLogEvents(auditLookback);\n// Join the new added user list to get the list of associated events\nlet CorrelatedEvents = Correlate \n| join allOtherEvents on InitiatedBy, TargetUserName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \nby Type, InitiatedBy, IpAddress, TargetUserName, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n;\n// Union the results so we can see when the user was added and any associated events that occurred during the same time.\nlet Results = union isfuzzy=true HistoricalAdd,CorrelatedEvents;\n// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)\nResults\n| extend newValue = split(newValue, \";\")\n| extend PropertyUpdate = pack(PropertyName, newValue, \"Id\", Id)\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) \nby InitiatedBy, IpAddress, TargetUserName, TargetResourceName, OperationName, CorrelationId\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_4')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AuditLogs",
                                             "displayName":  "User Granted Access and Grants others Access",
                                             "query":  "//Identifies when a new user is granted access and starts granting access to other users.  This can help you identify rogue or malicious user behavior.\n//\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan, operation:dynamic)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | where OperationName in~ (operation)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\n// Assigning time for First TargetUserName that was added\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \n| project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \nFirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \n| project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \nSecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\nlet NewUserAddsUser = FirstAdd | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\n// we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\n| where FirstAddTimeUtc \u003c SecondAddTimeUtc\n;\n// Build out some of the properties for context\nNewUserAddsUser\n| extend FirstnewValue = split(FirstnewValue, \";\"), SecondnewValue = split(SecondnewValue, \";\")\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate) by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \nIpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\n| extend timestamp = FirstAddTimeUtc, AccountCustomEntity = FirstInitiatedBy, HostCustomEntity = FirstTargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_5')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure Sentinel Analytics Rules Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Analytics Rules administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.SecurityInsights/alertRules/write\", \"Microsoft.SecurityInsights/alertRules/delete\"]);\n// Azure Sentinel Analytics - Rule Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_6')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure storage key enumeration",
                                             "query":  "//Listing of storage keys is an interesting operation in Azure which might expose additional \n//secrets and PII to callers as well as granting access to VMs. While there are many benign operations of this\n//type, it would be interesting to see if the account performing this activity or the source IP address from \n//which it is being done is anomalous. \n//The query below generates known clusters of ip address per caller, notice that users which only had single\n//operations do not appear in this list as we cannot learn from it their normal activity (only based on a single\n//event). The activities for listing storage account keys is correlated with this learned \n//clusters of expected activities and activity which is not expected is returned. \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"List Storage Account Keys\"\n| where ActivityStatus == \"Succeeded\" \n| join kind= inner (\n    AzureActivity\n    | where TimeGenerated \u003e= ago(timeframe)\n    | where OperationName == \"List Storage Account Keys\"\n    | where ActivityStatus == \"Succeeded\" \n    | project ExpectedIpAddress=CallerIpAddress, Caller \n    | evaluate autocluster()\n) on Caller \n| where CallerIpAddress != ExpectedIpAddress\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResourceIds = makeset(ResourceId), ResourceIdCount = dcount(ResourceId) by OperationName, Caller, CallerIpAddress\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_7')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure Network Security Group NSG Administrative Operations",
                                             "query":  "//Identifies set of Azure NSG administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.Network/networkSecurityGroups/write\", \"Microsoft.Network/networkSecurityGroups/delete\"]);\n// Azure NSG Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_8')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure Sentinel Connectors Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Data Connectors administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.SecurityInsights/dataConnectors/write\", \"Microsoft.SecurityInsights/dataConnectors/delete\"]);\n// Azure Sentinel Data Connectors Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_9')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure Sentinel Workbooks Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Workbooks administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"microsoft.insights/workbooks/write\", \"microsoft.insights/workbooks/delete\"]);\n// Azure Sentinel Workbook Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_10')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Azure Virtual Network Subnets Administrative Operations",
                                             "query":  "//Identifies set of Azure Virtual Network Subnets administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.Network/virtualNetworks/subnets/write\"]);\n// Creating Virtual Network Subnets\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue == \"Created\"\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_11')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Common deployed resources",
                                             "query":  "//This query looks for common deployed resources (resource name and resource groups) and can be used\n//in combination with other signals that show suspicious deployment to evaluate if the resource is one\n//that is commonly being deployed/created or unique. \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create or Update Virtual Machine\" or OperationName == \"Create Deployment\" \n| where ActivityStatus == \"Succeeded\" \n| project Resource, ResourceGroup \n| evaluate basket()\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_12')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Creation of an anomalous number of resources",
                                             "query":  "//Looks for anomalous number of resources creation or deployment activities in azure activity log.\n//It is best to run this query on a look back period which is at least 7 days.\n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create or Update Virtual Machine\" or OperationName == \"Create Deployment\" \n| where ActivityStatus == \"Succeeded\" \n| make-series dcount(ResourceId)  default=0 on EventSubmissionTimestamp in range(ago(7d), now(), 1d) by Caller\n| extend AccountCustomEntity = Caller\n| render timechart \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_13')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Granting permissions to account",
                                             "query":  "//Shows the most prevalent users who grant access to others on azure resources and for each account \n//their common source ip address. If an operation is not from this IP address it may be worthy of investigation.\n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create role assignment\"\n| where ActivityStatus == \"Succeeded\" \n| project Caller, CallerIpAddress\n| evaluate basket()\n| extend AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_14')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Port opened for an Azure Resource",
                                             "query":  "//Identifies what ports may have been opened for a given Azure Resource over the last 7 days \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName has_any (\"Create\", \"Update\") and OperationName has_any (\"Ip\", \"Security Rule\")\n// Choosing Accepted here because it has the Rule Attributes included\n| where ActivityStatus == \"Accepted\" \n// If there is publicIP info, include it\n| extend publicIPAddress_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).ipAddress) \n| extend publicIPAddressVersion_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).publicIPAddressVersion) \n| extend publicIPAllocationMethod_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).publicIPAllocationMethod) \n// Include rule attributes for context\n| extend access = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).access) \n| extend description = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).description) \n| extend destinationPortRange = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).destinationPortRange) \n| extend direction = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).direction) \n| extend protocol = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).protocol) \n| extend sourcePortRange = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).sourcePortRange) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResourceIds = makeset(ResourceId) by Caller, CallerIpAddress, Resource, ResourceGroup, \nActivityStatus, ActivitySubstatus, SubscriptionId, access, description, destinationPortRange, direction, protocol, sourcePortRange  \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_15')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureActivity",
                                             "displayName":  "Rare Custom Script Extension",
                                             "query":  "//The Custom Script Extension downloads and executes scripts on Azure virtual machines. This extension is useful for post deployment configuration, software installation, or any other configuration or management tasks. \n// Scripts could be downloaded from external links, Azure storage, GitHub, or provided to the Azure portal at extension run time. This could also be used maliciously by an attacker. \n// The query tries to identify rare custom script extensions that have been executed in your envioenment\n//\nlet current = 1d;\nlet Lookback = 14d;\nlet CustomScriptExecution = AzureActivity \n| where TimeGenerated \u003e= ago(Lookback) \n| where OperationName =~ \"Create or Update Virtual Machine Extension\"\n| extend Settings = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).settings)))\n| parse Settings with * 'fileUris\":[' FileURI \"]\" *\n| parse Settings with * 'commandToExecute\":' commandToExecute '}' *\n| extend message_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).statusMessage)).error)).message);\nlet LookbackCustomScriptExecution = CustomScriptExecution\n| where TimeGenerated \u003e= ago(Lookback) and TimeGenerated \u003c ago(current)\n| where isnotempty(FileURI) and isnotempty(commandToExecute)\n| summarize max(TimeGenerated), OperationCount = count() by Caller, Resource, CallerIpAddress, FileURI, commandToExecute;\nlet CurrentCustomScriptExecution = CustomScriptExecution\n| where TimeGenerated \u003e= ago(current)\n| where isnotempty(FileURI) and isnotempty(commandToExecute)\n| project TimeGenerated, ActivityStatus, OperationId, CorrelationId, ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup, FileURI, commandToExecute, FailureMessage = message_, HTTPRequest, Settings;\nlet RareCustomScriptExecution =  CurrentCustomScriptExecution\n| join kind= leftanti (LookbackCustomScriptExecution) on Caller, CallerIpAddress, FileURI, commandToExecute;\nlet IPCheck = RareCustomScriptExecution \n| summarize arg_max(TimeGenerated, OperationName), OperationIds = makeset(OperationId), CallerIpAddresses = makeset(CallerIpAddress) by ActivityStatus, CorrelationId, ResourceId, Caller, Resource, ResourceGroup, FileURI, commandToExecute, FailureMessage\n| extend IPArray = arraylength(CallerIpAddresses);\n//Get IPs for later summarization so all associated CorrelationIds and Caller actions have an IP.  Success and Fails do not always have IP\nlet multiIP = IPCheck | where IPArray \u003e 1\n| mvexpand CallerIpAddresses | extend CallerIpAddress = tostring(CallerIpAddresses)\n| where isnotempty(CallerIpAddresses);\nlet singleIP = IPCheck | where IPArray \u003c= 1\n| mvexpand CallerIpAddresses | extend CallerIpAddress = tostring(CallerIpAddresses);\nlet FullDetails = singleIP | union multiIP;\n//Get IP address associated with successes and fails with no IP listed\nlet IPList = FullDetails | where isnotempty(CallerIpAddress) | summarize by CorrelationId, Caller, CallerIpAddress;\nlet EmptyIP = FullDetails | where isempty(CallerIpAddress) | project-away CallerIpAddress;\nlet IpJoin = EmptyIP | join kind= leftouter (IPList) on CorrelationId, Caller | project-away CorrelationId1, Caller1;\nlet nonEmptyIP = FullDetails | where isnotempty(CallerIpAddress);\nnonEmptyIP | union IpJoin\n// summarize all activities with a given CorrelationId and Caller together so we can provide a singular result\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityStatusSet = makeset(ActivityStatus), OperationIds = makeset(OperationIds), FailureMessages = makeset(FailureMessage) by CorrelationId, ResourceId, CallerIpAddress, Caller, Resource, ResourceGroup, FileURI, commandToExecute\n| extend timestamp = StartTime, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_16')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-AzureDiagnostics",
                                             "displayName":  "Check critical ports opened to the entire internet",
                                             "query":  "//Discover all critical ports from a list having rules like Any for sourceIp, which means that they are opened to everyone. Critial ports should not be opened to everyone, and should be filtered.\n//\n\n//Check critical ports opened to the entire internet\nAzureDiagnostics\n| where Category == \"NetworkSecurityGroupEvent\" \n| where direction_s == \"In\" \n| where conditions_destinationPortRange_s in (\n\"22\",\"22-22\"          //SSH\n,\"3389\",\"3389-3389\"   //RDP\n,\"137\",\"137-137\"      //NetBIOS\n,\"138\",\"138-138\"      //NetBIOS\n,\"139\",\"139-139\"      //SMB\n,\"53\",\"53-53\"         //DNS\n,\"3020\",\"3020-3020\"   //CIFS\n,\"3306\",\"3306-3306\"   //MySQL\n,\"1521\",\"1521-1521\"   //Oracle Database\n,\"2483\",\"2483-2483\"   //Oracle Database\n,\"5432\",\"5432-5432\"   //PostgreSQL\n,\"389\",\"389-389\"      //LDAP\n,\"27017\",\"27017-27017\"//MongoDB\n,\"20\",\"20-20\"         //FTP\n,\"21\",\"21-21\"         //FTP\n,\"445\",\"445-445\"      //Active Directory\n,\"161\",\"161-161\"      //SNMP\n,\"25\",\"25-25\"         //SMTP\n)\n or (conditions_destinationPortRange_s == \"0-65535\" and conditions_sourcePortRange_s == \"0-65535\")\n| where priority_d \u003c 65000    //Not to check the Azure defaults\n| where conditions_sourceIP_s == \"0.0.0.0/0,0.0.0.0/0\" or conditions_sourceIP_s == \"0.0.0.0/0\" //With rules Any/Any\n| where type_s !~ \"block\"\n| order by TimeGenerated desc\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by OperationName, systemId_g, vnetResourceGuid_g, subnetPrefix_s, macAddress_s, primaryIPv4Address_s, ruleName_s,\n direction_s, priority_d, type_s, conditions_destinationIP_s, conditions_destinationPortRange_s, conditions_sourceIP_s, conditions_sourcePortRange_s, ResourceId\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_17')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-MultipleDataSources",
                                             "displayName":  "Failed service logon attempt by user account with available AuditData",
                                             "query":  "//User account failed to logon in current period (default last 1 day). Excludes Windows Sign in attempts due to noise and limits to only more than 10 failed logons or 3 different IPs used.\n//Additionally, Azure Audit Log data from the last several days(default 7 days) related to the given UserPrincipalName will be joined if available.\n//This can help to understand any events for this same user related to User or Group Management.\n//Results may indicate a potential malicious use of an account that is rarely used. It is possible this is an account that is new or newly enabled.\n//The associated Azure Audit data should help determine any recent changes to this account and may help you understand why the logons are failing.\n//Receiving no results indicates that there were no less than 10 failed logons or that the Auditlogs related to this UserPrincipalName in the default 7 days.\n//\n\nlet current = 1d;\nlet failLimit = 10;\nlet ipLimit = 3;\nlet auditLookback = 7d;\nlet FailedSignins = SigninLogs \n| where TimeGenerated \u003e= ago(current)\n| where ResultType != \"0\" and AppDisplayName != \"Windows Sign In\"\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| extend CityState = strcat(tostring(LocationDetails.city),\"|\", tostring(LocationDetails.state))\n| extend Result = strcat(ResultType,\"-\",ResultDescription) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctIPAddressCount = dcount(IPAddress), IPAddresses = makeset(IPAddress), \nCityStates = makeset(CityState), DistinctResultCount = dcount(Result), Results = makeset(Result), AppDisplayNames = makeset(AppDisplayName), \nFailedLogonCount = count() by Type, OperationName, Category, UserPrincipalName = tolower(UserPrincipalName), ClientAppUsed, Location, CorrelationId\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, AppDisplayNames, DistinctIPAddressCount, IPAddresses, DistinctResultCount, \nResults, FailedLogonCount, Location, CityStates \n| where FailedLogonCount \u003e= failLimit or DistinctIPAddressCount \u003e= ipLimit\n| extend Activity = pack(\"IPAddresses\", IPAddresses, \"AppDisplayNames\", AppDisplayNames, \"Results\", Results, \"Location\", Location, \"CityStates\", CityStates)\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, Activity\n| extend AccountCustomEntity = UserPrincipalName;\nlet AccountMods = AuditLogs | where TimeGenerated \u003e= ago(current+auditLookback)\n| where Category == \"UserManagement\" or Category == \"GroupManagement\"\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend InitiatedBy = case(\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).displayName)), tostring(parse_json(tostring(InitiatedBy.app)).displayName),\n\"\")\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), oldValue = tostring(ModProps.oldValue), newValue = tostring(ModProps.newValue)\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"oldValue\",oldValue,\"newValue\",newValue) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedBy, UserPrincipalName, Category, OperationName, CorrelationId, Id\n| extend AccountCustomEntity = UserPrincipalName;\n// Gather only Audit data for UserPrincipalNames that we have Audit data for\nlet AccountNameOnly = FailedSignins | project UserPrincipalName;\nlet AuditMods = AccountNameOnly\n| join kind= innerunique (\nAccountMods\n) on UserPrincipalName;\nlet AvailableAudits = AuditMods | project UserPrincipalName;\nlet SigninsWithAudit = AvailableAudits\n| join kind= innerunique (\nFailedSignins\n) on UserPrincipalName;\n// Union the Current Signin failures so we do not lose them with the Auditing data we do have\nlet Activity = (union isfuzzy=true\nSigninsWithAudit, AuditMods)\n| order by StartTimeUtc, UserPrincipalName;\nActivity\n| project StartTimeUtc, EndTimeUtc, DataType = Type, Category, OperationName, UserPrincipalName, InitiatedBy, Activity, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, CorrelationId, Id\n| order by UserPrincipalName, StartTimeUtc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_18')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-MultipleDataSources",
                                             "displayName":  "Failed Login Attempt by Expired account",
                                             "query":  "//This query looks at Account Logon events found through Windows Event Ids as well as SigninLogs to discover \n//login attempts by accounts that have expired.\n//\n\nlet timeframe = 1d;\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID == 4625\n//4625: An account failed to log on\n| where AccountType == 'User' \n| where SubStatus == '0xc0000193' \n| extend Reason = \ncase\n( SubStatus == '0xc0000193', 'Windows EventID (4625) - Account has expired', \"Unknown\")\n| project Computer, Account,  Reason , TimeGenerated\n),\n(\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID == 4769\n//4769: A Kerberos service ticket was requested ( Kerberos Auth)\n| parse EventData with * 'Status\"\u003e' Status \"\u003c\" *\n| parse EventData with * 'TargetUserName\"\u003e' TargetUserName \"\u003c\" *\n| where Status == '0x12'\n| where TargetUserName !has \"$\" and isnotempty(TargetUserName)\n| extend Reason = \ncase(\nStatus == '0x12', 'Windows EventID (4769) - Account disabled, expired, locked out',\n'Unknown'), Account = TargetUserName \n| project Computer, Account, Reason , TimeGenerated\n),\n(\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID == 4776 \n// 4776: The domain controller attempted to validate the credentials for an account ( NTLM Auth)\n| where Status == \"0xc0000193\"\n| extend Reason = \ncase(\nErrorCode == '0xc0000193', 'Windows EventID (4776) - Account has expired',\n'Unknown'), Account = TargetAccount \n| parse EventData with * 'Workstation\"\u003e' Workstation \"\u003c\" *\n| extend Workstation = trim_start(@\"[\\\\]*\", Workstation)\n| extend Computer = iff(isnotempty(Workstation), Workstation, Computer ) \n| project Computer, Account, Reason , TimeGenerated\n) ,\n(\nSigninLogs\n| where TimeGenerated \u003e= ago(timeframe) \n| where ResultType == \"50057\" \n| extend Reason = \ncase(\nResultType == '50057', 'SigninLogs( Result Code- 50057) - User account is disabled. The account has been disabled by an administrator.',\n'Unknown'), Account = UserPrincipalName \n| project Computer, Account, Reason , TimeGenerated\n) )\n| summarize StartTimeUtc = min(TimeGenerated), EndTImeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, Reason\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n| order by EventCount desc \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_19')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-MultipleDataSources",
                                             "displayName":  "Retrospective hunt for STRONTIUM IP IOCs",
                                             "query":  "//Matches domain name IOCs related to Strontium group activity with CommonSecurityLog and SecurityAlert dataTypes.\n//The query is scoped in the time window that these IOCs were active.\n//References: https://blogs.microsoft.com/on-the-issues/2019/07/17/new-cyberthreats-require-new-ways-to-protect-democracy.\n//\n\nlet STRONTIUM_IPS = dynamic([\"82.118.242.171\" , \"167.114.153.55\" , \"94.237.37.28\", \"31.220.61.251\" , \"128.199.199.187\" ]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where TimeGenerated between (startofday(datetime(2019-02-01)) .. endofday(datetime(2019-08-05)))\n| where SourceIP in (STRONTIUM_IPS) or DestinationIP in (STRONTIUM_IPS)\n| extend IPCustomEntity = SourceIP\n),\n(SecurityAlert\n| where TimeGenerated between (startofday(datetime(2019-02-01)) .. endofday(datetime(2019-08-05)))\n| extend RemoteAddress = iff(ExtendedProperties has \"RemoteAddress\", tostring(parse_json(ExtendedProperties)[\"RemoteAddress\"]), \"None\")\n| where RemoteAddress != \"None\"\n| where RemoteAddress in (STRONTIUM_IPS)\n| extend IPCustomEntity = RemoteAddress\n) \n)\n| extend timestamp = TimeGenerated\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_20')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-MultipleDataSources",
                                             "displayName":  "User Granted Access and created resources",
                                             "query":  "//Identifies when a new user is granted access and starts creating resources in Azure.  This can help you identify rogue or malicious user behavior.\n//\n\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan, operation:dynamic)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | where OperationName in~ (operation)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\nlet UserAdd = auditLogEvents(auditLookback, opName) \n| project Action = \"User Added\", TimeGenerated, Type, InitiatedBy_Caller = InitiatedBy, IpAddress, TargetUserName = tolower(TargetUserName), OperationName, PropertyName_ResourceId = PropertyName, Value = newValue;\n// Get the simple list of creatd users so we can use later to get just the associated resource creation events\nlet SimpleUserList = UserAdd | project TimeGenerated, TargetUserName;\nlet ResourceCreation = AzureActivity\n| where TimeGenerated \u003e= ago(auditLookback)\n// We look for any Operation that created and then succeeded where ActivityStatus has a value so that we can provide context\n| where OperationName has \"Create\"\n| where ActivityStatus has \"Succeeded\"\n| project Action = \"Resource Created\", ResourceCreationTimeGenerated = TimeGenerated, Type, InitiatedBy_Caller = tolower(Caller), IpAddress = CallerIpAddress, OperationName, Value = OperationNameValue, PropertyName_ResourceId = ResourceId;\n// Get just the Resources added by the new user\nlet ResourceMatch = SimpleUserList | join kind= innerunique (\n   ResourceCreation\n) on $left.TargetUserName == $right.InitiatedBy_Caller\n// where the resource creation is after (greater than) the user addition\n| where TimeGenerated \u003c ResourceCreationTimeGenerated\n| project-away TimeGenerated \n| project-rename TimeGenerated = ResourceCreationTimeGenerated\n;\nlet SimpleResourceMatch = ResourceMatch | project InitiatedBy_Caller;\n// Get only resource add, remove, change by the new user\nlet UserAddWithResource = SimpleResourceMatch | join kind= rightsemi (\n   UserAdd \n) on $left.InitiatedBy_Caller == $right.TargetUserName;\n// union the user addition events and resource addition events and provide common column names, additionally pack the value, property and resource info to reduce result set.\nUserAddWithResource \n| union isfuzzy=true ResourceMatch\n| extend PropertySet = pack(\"Value\", Value, \"PropertyName_ResourceId\", PropertyName_ResourceId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makeset(PropertySet)  by Action, Type, TargetUserName, InitiatedBy_Caller, IpAddress, OperationName\n| order by StartTimeUtc asc \n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_21')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Alerts related to IP",
                                             "query":  "//Any Alerts that fired related to a given IpAddress during the range of +6h and -3d\n//\n\nlet GetAllAlertsWithIp = (suspiciousEventTime:datetime, v_ipAddress:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n// expand JSON properties\n| where ExtendedProperties contains v_ipAddress or Entities contains v_ipAddress\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project StartTimeUtc = StartTime, EndTimeUtc = EndTime, AlertName, Computer, Account, IpAddress, ExtendedProperties, Entities\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and \u003cipaddress\u003e value below\nGetAllAlertsWithIp(datetime('2019-02-05T10:02:51.000'), (\"\u003cipaddress\u003e\"))\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_22')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Alerts related to account",
                                             "query":  "//Any Alerts that fired related to a given account during the range of +6h and -3d\n//\n\nlet GetAllAlertsForUser = (suspiciousEventTime:datetime, v_User:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| where Account contains v_User\n// expand JSON properties\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project TimeGenerated, AlertName, Computer, Account, IpAddress, ExtendedProperties \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and username value below\nGetAllAlertsForUser(datetime('2019-01-20T10:02:51.000'), toupper(\"\u003cusername\u003e\"))\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_23')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Alerts On Host",
                                             "query":  "//Any Alerts that fired on a given host during the range of +6h and -3d\n//\n\nlet GetAllAlertsOnHost = (suspiciousEventTime:datetime, v_Host:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| where Computer contains v_Host\n// expand JSON properties\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project TimeGenerated, AlertName, Computer, Account, IpAddress, ExtendedProperties\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and hostname value below\nGetAllAlertsOnHost(datetime('2019-01-20T10:02:51.000'), toupper(\"\u003chostname\u003e\"))\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_24')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Alerts related to File",
                                             "query":  "//Any Alerts that fired related to a given File during the range of +6h and -3d\n//\n\nlet GetAllAlertsWithFile = (suspiciousEventTime:datetime, v_File:string){\nlet v_StartTime = suspiciousEventTime-1d;\nlet v_EndTime = suspiciousEventTime+1d;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| where ExtendedProperties has v_File\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and \u003cfilename\u003e value below\nGetAllAlertsWithFile(datetime('2019-01-18T10:36:07Z'), \"\u003cfilename\u003e\")\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_25')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Alerts With This Process",
                                             "query":  "//Any Alerts that fired on any host with this same process in the range of +-1d\n//\n\nlet GetAllAlertsWithProcess = (suspiciousEventTime:datetime, v_Process:string){\nlet v_StartTime = suspiciousEventTime-1d;\nlet v_EndTime = suspiciousEventTime+1d;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| where ProcessName has v_Process\n| extend Extprop = parsejson(ExtendedProperties)\n| extend ProcessName = parse_json(ExtendedProperties).[\"Suspicious Process\"]\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project TimeGenerated, AlertName, ProcessName, Computer, Account, IpAddress, ExtendedProperties \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n| top 10 by TimeGenerated desc nulls last\n};\n// change datetime value and \u003cprocessname\u003e value below\nGetAllAlertsWithProcess(datetime('2019-01-18T10:36:07Z'), \"\u003cprocessname\u003e\")\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_26')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Web shell command alert enrichment",
                                             "query":  "//Extracts MDATP Alerts that indicate a command was executed by a web shell. Uses time window based querying to idneitfy the potential web shell location on the server, then enriches with Attacker IP and User Agent\n//\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nlet timeRange = 3d; \nlet lookupWindow = 1m;  \nlet lookupBin = lookupWindow / 2.0; \nlet distinctIpThreshold = 3; \nlet alerts = SecurityAlert  \n| where TimeGenerated \u003e ago(timeRange) \n| extend alertData = parse_json(Entities), recordGuid = new_guid(); \nlet shellAlerts = alerts \n| where ProviderName =~ \"MDATP\"  \n| mvexpand alertData \n| where alertData.Type =~ \"file\" and alertData.Name =~ \"w3wp.exe\" \n| distinct SystemAlertId \n| join kind=inner (alerts) on SystemAlertId; \nlet alldata = shellAlerts  \n| mvexpand alertData \n| extend Type = alertData.Type; \nlet filedata = alldata  \n| extend id = tostring(alertData.$id)  \n| extend ImageName = alertData.Name  \n| where Type =~ \"file\" and ImageName != \"w3wp.exe\" \n| extend imagefileref = id;  \nlet commanddata = alldata  \n| extend CommandLine = tostring(alertData.CommandLine)  \n| extend creationtime = tostring(alertData.CreationTimeUtc)  \n| where Type =~ \"process\"  \n| where isnotempty(CommandLine)  \n| extend imagefileref = tostring(alertData.ImageFile.$ref); \nlet hostdata = alldata \n| where Type =~ \"host\" \n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId \n| distinct HostName, DnsDomain, SystemAlertId; \nlet commandKeyedData = filedata \n| join kind=inner (  \ncommanddata  \n) on imagefileref \n| join kind=inner (hostdata) on SystemAlertId \n| project recordGuid, TimeGenerated, ImageName, CommandLine, TimeKey = bin(TimeGenerated, lookupBin), HostName, DnsDomain \n| extend Start = TimeGenerated; \nlet baseline = W3CIISLog  \n| where TimeGenerated \u003e ago(timeRange) \n| project-rename SourceIP=cIP, PageAccessed=csUriStem \n| summarize dcount(SourceIP) by PageAccessed \n| where dcount_SourceIP \u003c= distinctIpThreshold; \ncommandKeyedData \n| join kind=inner ( \nW3CIISLog  \n| where TimeGenerated \u003e ago(timeRange) \n| where csUriStem has_any(scriptExtensions)  \n| extend splitUriStem = split(csUriStem, \"/\")  \n| extend FileName = splitUriStem[-1] | extend firstDir = splitUriStem[-2] | extend TimeKey = range(bin(TimeGenerated-lookupWindow, lookupBin), bin(TimeGenerated, lookupBin),lookupBin)  \n| mv-expand TimeKey to typeof(datetime)  \n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Site=sSiteName, HostName=sComputerName, AttackerIP=cIP, AttackerUserAgent=csUserAgent, csUriStem, filename=tostring(FileName), tostring(firstDir), TimeKey \n) on TimeKey, HostName \n| where (StartTime - EndTime) between (0min .. lookupWindow) \n| extend IPCustomEntity = AttackerIP, timestamp = StartTime\n| extend attackerP = pack(AttackerIP, AttackerUserAgent)  \n| summarize Site=make_set(Site), Attacker=make_bag(attackerP) by csUriStem, filename, tostring(ImageName), CommandLine, HostName, IPCustomEntity, timestamp\n| project Site, ShellLocation=csUriStem, ShellName=filename, ParentProcess=ImageName, CommandLine, Attacker, HostName, IPCustomEntity, timestamp\n| join kind=inner (baseline) on $left.ShellLocation == $right.PageAccessed\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_27')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityAlert",
                                             "displayName":  "Web shell file alert enrichment",
                                             "query":  "//Extracts MDATP Alert for a web shell being placed on the server and then enriches this event with information from W3CIISLog to idnetigy the Attacker that placed the shell\n//\nlet timeWindow = 3d;\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);  \nSecurityAlert  \n| where TimeGenerated \u003e ago(timeWindow)  \n| where ProviderName =~ \"MDATP\" \n| extend alertData = parse_json(Entities)  \n| mvexpand alertData  \n// Get only the file type from the JSON, this gives us the file name\n| where alertData.Type =~ \"file\"  \n// This can be expanded to include other script extensions \n| where alertData.Name has_any(scriptExtensions)\n| extend FileName = alertData.Name \n| project TimeGenerated, tostring(FileName), alertData.Directory \n| join (  \nW3CIISLog  \n| where TimeGenerated \u003e ago(timeWindow)  \n| where csUriStem has_any(scriptExtensions) \n| extend splitUriStem = split(csUriStem, \"/\")  \n| extend FileName = splitUriStem[-1] \n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by AttackerIP=cIP, AttackerUserAgent=csUserAgent, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName)  \n) on FileName \n| project StartTime, EndTime, AttackerIP, AttackerUserAgent, SiteName, ShellLocation\n| extend timestamp = StartTime, IPCustomEntity = AttackerIP  \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_28')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "AD Account Lockout",
                                             "query":  "//Detects Active Directory account lockouts\n//\nlet timeframe = 7d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4740\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LockoutsCount = count() by Activity, Account, TargetSid, TargetDomainName, SourceComputerId, SourceDomainController = Computer\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = TargetDomainName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_29')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Cscript script daily summary breakdown",
                                             "query":  "//breakdown of scripts running in the environment\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project EventTime=TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\n// Daily summary of cscript activity ? extracting script name and parameters from commandline:\nProcessCreationEvents \n| where EventTime \u003e= ago(timeframe)\n| where FileName =~ \"cscript.exe\"\n// remove commandline switches\n| project EventTime, ComputerName, AccountName, removeSwitches = replace(@\"/+[a-zA-Z0-9:]+\", \"\", ProcessCommandLine)\n// remove the leading cscript.exe process name \n| project EventTime, ComputerName, AccountName, CommandLine = trim(@\"[a-zA-Z0-9\\\\:\"\"]*cscript(.exe)?(\"\")?(\\s)+\", removeSwitches)\n// extract the script name:\n| project EventTime, ComputerName, AccountName, \n// handle case where script name is enclosed in \" characters or is not enclosed in quotes \nScriptName= iff(CommandLine startswith @\"\"\"\", \nextract(@\"([:\\\\a-zA-Z_\\-\\s0-9\\.()]+)(\"\"?)\", 0, CommandLine), \nextract(@\"([:\\\\a-zA-Z_\\-0-9\\.()]+)(\"\"?)\", 0, CommandLine)), CommandLine \n| project EventTime, ComputerName, AccountName, ScriptName=trim(@\"\"\"\", ScriptName) , ScriptNameLength=strlen(ScriptName), CommandLine \n// extract remainder of commandline as script parameters: \n| project EventTime, ComputerName, AccountName, ScriptName, ScriptParams = iff(ScriptNameLength \u003c strlen(CommandLine), substring(CommandLine, ScriptNameLength +1), \"\")\n| summarize min(EventTime), count() by ComputerName, AccountName, ScriptName, ScriptParams\n| order by count_ asc nulls last \n| extend timestamp = min_EventTime, HostCustomEntity = ComputerName, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_30')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "VIP account more than 6 failed logons in 10",
                                             "query":  "//VIP Account with more than 6 failed logon attempts in 10 minutes, include your own VIP list in the table below\n// NTSTATUS codes - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\n//\n\n// Create DataTable with your own values, example below shows dummy usernames and domain\nlet List = datatable(VIPUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\", \"administrator\", \"\"];\nlet timeframe = 10m;\nList\n| project TargetUserName = tolower(VIPUser), TargetDomainName = toupper(Domain)\n| join kind= rightsemi ( \nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n| where EventID == \"4625\"\n| where AccountType == \"User\"\n) on TargetUserName, TargetDomainName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FailedVIPLogons = count() by EventID, Activity, WorkstationName, Account, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| where FailedVIPLogons \u003e= 6\n// map the most common ntstatus codes\n| extend StatusDesc = case(\nStatus =~ \"0x80090302\", \"SEC_E_UNSUPPORTED_FUNCTION\",\nStatus =~ \"0x80090308\", \"SEC_E_INVALID_TOKEN\",\nStatus =~ \"0x8009030E\", \"SEC_E_NO_CREDENTIALS\",\nStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nStatus =~ \"0xC0000017\", \"STATUS_NO_MEMORY\",\nStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nStatus =~ \"0xC0000034\", \"STATUS_OBJECT_NAME_NOT_FOUND\",\nStatus =~ \"0xC000005E\", \"STATUS_NO_LOGON_SERVERS\",\nStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nStatus =~ \"0xC00000FE\", \"STATUS_NO_SUCH_PACKAGE\",\nStatus =~ \"0xC000009A\", \"STATUS_INSUFFICIENT_RESOURCES\",\nStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nStatus =~ \"0xC0000106\", \"STATUS_NAME_TOO_LONG\",\nStatus =~ \"0xC000010B\", \"STATUS_INVALID_LOGON_TYPE\",\nStatus =~ \"0xC000015B\", \"STATUS_LOGON_TYPE_NOT_GRANTED\",\nStatus =~ \"0xC000018B\", \"STATUS_NO_TRUST_SAM_ACCOUNT\",\nStatus =~ \"0xC0000224\", \"STATUS_PASSWORD_MUST_CHANGE\",\nStatus =~ \"0xC0000234\", \"STATUS_ACCOUNT_LOCKED_OUT\",\nStatus =~ \"0xC00002EE\", \"STATUS_UNFINISHED_CONTEXT_DELETED\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| extend SubStatusDesc = case(\nSubStatus =~ \"0x80090325\", \"SEC_E_UNTRUSTED_ROOT\",\nSubStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nSubStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nSubStatus =~ \"0xC0000064\", \"STATUS_NO_SUCH_USER\",\nSubStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nSubStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nSubStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nSubStatus =~ \"0xC000006F\", \"STATUS_INVALID_LOGON_HOURS\",\nSubStatus =~ \"0xC0000070\", \"STATUS_INVALID_WORKSTATION\",\nSubStatus =~ \"0xC0000071\", \"STATUS_PASSWORD_EXPIRED\",\nSubStatus =~ \"0xC0000072\", \"STATUS_ACCOUNT_DISABLED\",\nSubStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nSubStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nSubStatus =~ \"0xC0000133\", \"STATUS_TIME_DIFFERENCE_AT_DC\",\nSubStatus =~ \"0xC000018D\", \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\",\nSubStatus =~ \"0xC0000193\", \"STATUS_ACCOUNT_EXPIRED\",\nSubStatus =~ \"0xC0000380\", \"STATUS_SMARTCARD_WRONG_PIN\",\nSubStatus =~ \"0xC0000381\", \"STATUS_SMARTCARD_CARD_BLOCKED\",\nSubStatus =~ \"0xC0000382\", \"STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED\",\nSubStatus =~ \"0xC0000383\", \"STATUS_SMARTCARD_NO_CARD\",\nSubStatus =~ \"0xC0000384\", \"STATUS_SMARTCARD_NO_KEY_CONTAINER\",\nSubStatus =~ \"0xC0000385\", \"STATUS_SMARTCARD_NO_CERTIFICATE\",\nSubStatus =~ \"0xC0000386\", \"STATUS_SMARTCARD_NO_KEYSET\",\nSubStatus =~ \"0xC0000387\", \"STATUS_SMARTCARD_IO_ERROR\",\nSubStatus =~ \"0xC0000388\", \"STATUS_DOWNGRADE_DETECTED\",\nSubStatus =~ \"0xC0000389\", \"STATUS_SMARTCARD_CERT_REVOKED\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| project StartTimeUtc, EndTimeUtc, FailedVIPLogons, EventID, Activity, WorkstationName, Account, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, StatusDesc, SubStatus, SubStatusDesc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_31')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Enumeration of users and groups",
                                             "query":  "//Finds attempts to list users or groups using the built-in Windows net tool \n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,        AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nFolderPath = \"\",\nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName == 'net.exe' and AccountName != \"\" and ProcessCommandLine !contains '\\\\'  and ProcessCommandLine !contains '/add' \n| where (ProcessCommandLine contains ' user ' or ProcessCommandLine contains ' group ') and (ProcessCommandLine endswith ' /do' or ProcessCommandLine endswith ' /domain') \n| extend Target = extract(\"(?i)[user|group] (\\\"*[a-zA-Z0-9-_ ]+\\\"*)\", 1, ProcessCommandLine) | filter Target  != '' \n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by AccountName, Target, ProcessCommandLine, ComputerName\n| project minTimeGenerated, maxTimeGenerated, count_, AccountName, Target, ProcessCommandLine, ComputerName\n| sort by AccountName, Target\n| extend timestamp = minTimeGenerated, AccountCustomEntity = AccountName, HostCustomEntity = ComputerName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_32')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Summary of failed user logons by reason of failure",
                                             "query":  "//A summary of failed logons can be used to infer lateral movement with the intention of discovering credentials and sensitive data\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where AccountType == 'User' and EventID == 4625\n| extend Reason = case(\nSubStatus == '0xc000005e', 'No logon servers available to service the logon request',\nSubStatus == '0xc0000062', 'Account name is not properly formatted',\nSubStatus == '0xc0000064', 'Account name does not exist',\nSubStatus == '0xc000006a', 'Incorrect password',    SubStatus == '0xc000006d', 'Bad user name or password',\nSubStatus == '0xc000006f', 'User logon blocked by account restriction',\nSubStatus == '0xc000006f', 'User logon outside of restricted logon hours',\nSubStatus == '0xc0000070', 'User logon blocked by workstation restriction',\nSubStatus == '0xc0000071', 'Password has expired',\nSubStatus == '0xc0000072', 'Account is disabled',\nSubStatus == '0xc0000133', 'Clocks between DC and other computer too far out of sync',\nSubStatus == '0xc000015b', 'The user has not been granted the requested logon right at this machine',\nSubStatus == '0xc0000193', 'Account has expirated',\nSubStatus == '0xc0000224', 'User is required to change password at next logon',\nSubStatus == '0xc0000234', 'Account is currently locked out',\nstrcat('Unknown reason substatus: ', SubStatus))\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Reason\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_33')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Group added to Built in Domain Local or Global Group",
                                             "query":  "//A Group created in the last 7 days was added to a privileged built in domain local group or global group such as the \n//Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition\n//\n\nlet timeframe = 7d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\n// The SIDs for DnsAdmins and DnsUpdateProxy can be different than *-1102 and -*1103. Check these SIDs in your domain before running the query \nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nlet GroupAddition = SecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\") \n| where AccountType == \"User\" and MemberName == \"-\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  \nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid, Account, Computer\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer;\nlet GroupCreated = SecurityEvent\n| where TimeGenerated \u003e ago(timeframe)\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType == \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, \nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid, Account, Computer;\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid\n| extend timestamp = GroupCreateTime, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_34')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Hosts with new logons",
                                             "query":  "//Shows new accounts that have logged onto a host for the first time - this may clearly be benign activity but an account \n//logging onto multiple hosts for the first time can also be used to look for evidence of that account being used to move \n//laterally across a network.\n//\n\nlet starttime = 7d;\nlet endtime = 1d;\nlet LogonEvents=() { \nlet logonSuccess=SecurityEvent \n| where EventID==4624 \n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='Logon';\nlet logonFail=SecurityEvent \n| where EventID==4625 \n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='LogonFailure';\nlogonFail \n| union logonSuccess\n};\nLogonEvents \n| where TimeGenerated \u003e ago(endtime) \n| where ActionType == 'Logon' \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by ComputerName, AccountName \n| join kind=leftanti ( \nLogonEvents \n| where TimeGenerated between(ago(starttime)..ago(endtime)) \n| where ActionType == 'Logon' \n| summarize count() by ComputerName, AccountName \n) on ComputerName, AccountName \n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), HostCount=dcount(ComputerName), HostSet=makeset(ComputerName, 10)  by AccountName, ComputerName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_35')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Least Common Parent And Child Process Pairs",
                                             "query":  "//Looks across your environment for least common Parent/Child process combinations.  \n//Will possibly find some malicious activity disguised as well known process names.  \n//By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration) and isnotnull(ParentProcessName)\n| extend ProcArray = split(NewProcessName, '\\\\'), ParentProcArray = split(ParentProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray), ParentProcArrayLength = arraylength(ParentProcArray)\n| extend LastIndex = ProcArrayLength - 1, ParentLastIndex = ParentProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex], ParentProc = ParentProcArray[ParentLastIndex]\n| where Proc !in (Allowlist)\n| extend ParentChildPair = strcat(ParentProc , ' \u003e ', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by ParentChildPair\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_36')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Least Common Processes by Command Line",
                                             "query":  "//Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration) and NewProcessName !endswith 'conhost.exe'\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by CommandLine\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_37')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Least Common Processes Including Folder Depth",
                                             "query":  "//Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 15;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration)\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n// ProcArray[0] is the proc's Drive\n| extend DriveDepthProc = strcat(ProcArray[0], '-', ProcArrayLength, '-', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by DriveDepthProc\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_38')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Masquerading files",
                                             "query":  "//Malware writers often use windows system process names for their malicious process names to make them blend \n//in with other legitimate commands that the Windows system executes.\n//An analyst can create a simple query looking for a process named svchost.exe. \n//It is recommended to filter out well-known security identifiers (SIDs) that are used to launch the legitimate svchost.exe process. \n//The query also filters out the legitimate locations from which svchost.exe is launched.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where NewProcessName endswith \"\\\\svchost.exe\"\n| where SubjectUserSid !in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\")\n| where NewProcessName !contains \":\\\\Windows\\\\System32\"\n| where NewProcessName !contains \":\\\\Windows\\\\Syswow64\"\n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by Computer, SubjectUserName, NewProcessName, CommandLine, Account\n| project minTimeGenerated , maxTimeGenerated , count_ , Computer , SubjectUserName , NewProcessName , CommandLine, Account \n| extend timestamp = minTimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_39')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "New processes observed in last 24 hours",
                                             "query":  "//These new processes could be benign new programs installed on hosts; however, especially in normally stable environments, \n//these new processes could provide an indication of an unauthorized/malicious binary that has been installed and run. \n//Reviewing the wider context of the logon sessions in which these binaries ran can provide a good starting point for identifying possible attacks.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where TimeGenerated \u003e= ago(starttime) \n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, @'')[(-1)]), ProcessCommandLine = CommandLine, InitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine='',InitiatingProcessParentFileName='';\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n| summarize HostCount=dcount(ComputerName) by tostring(FileName)\n| join kind=rightanti (\n    ProcessCreationEvents\n    | where TimeGenerated \u003e= ago(endtime)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computers = makeset(ComputerName) , HostCount=dcount(ComputerName) by tostring(FileName)\n) on FileName\n| project StartTimeUtc, Computers, HostCount, FileName\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_40')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Summary of users created using uncommon/undocumented commandline switches",
                                             "query":  "//Summarizes uses of uncommon \u0026 undocumented commandline switches to create persistence\n//User accounts may be created to achieve persistence on a machine.\n//Read more here: https://attack.mitre.org/wiki/Technique/T1136\n//Query for users being created using \"net user\" command\n//\"net user\" commands are noisy, so needs to be joined with another signal -\n//e.g. in this example we look for some undocumented variations (e.g. /ad instead of /add)\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, \n    AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, '\\\\')[-1]), \n    ProcessCommandLine = CommandLine, \n    FolderPath = \"\", InitiatingProcessFileName=ParentProcessName,\n    InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\"\n| where FileName in~ (\"net.exe\", \"net1.exe\")\n| parse kind=regex flags=iU ProcessCommandLine with * \"user \" CreatedUser \" \" * \"/ad\"\n| where not(FileName =~ \"net1.exe\" and InitiatingProcessFileName =~ \"net.exe\" and replace(\"net\", \"net1\", InitiatingProcessCommandLine) =~ ProcessCommandLine)\n| extend CreatedOnLocalMachine=(ProcessCommandLine !contains \"/do\")\n| where ProcessCommandLine contains \"/add\" or (CreatedOnLocalMachine == 0 and ProcessCommandLine !contains \"/domain\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), MachineCount=dcount(ComputerName) by CreatedUser, CreatedOnLocalMachine, InitiatingProcessFileName, FileName, ProcessCommandLine, InitiatingProcessCommandLine\n| extend timestamp = StartTimeUtc, AccountCustomEntity = CreatedUser\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_41')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "PowerShell downloads",
                                             "query":  "//Finds PowerShell execution events that could involve a download\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project  TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,        AccountDomain=SubjectDomainName,\n  FileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe) \n| where FileName in~ (\"powershell.exe\", \"powershell_ise.exe\")\n| where ProcessCommandLine has \"Net.WebClient\"\n   or ProcessCommandLine has \"DownloadFile\"\n   or ProcessCommandLine has \"Invoke-WebRequest\"\n   or ProcessCommandLine has \"Invoke-Shellcode\"\n   or ProcessCommandLine contains \"http:\"\n| project TimeGenerated, ComputerName, AccountName, InitiatingProcessFileName, FileName, ProcessCommandLine\n| top 100 by TimeGenerated\n| extend timestamp = TimeGenerated, HostCustomEntity = ComputerName, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_42')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "New PowerShell scripts encoded on the commandline",
                                             "query":  "//Identify and decode new encoded powershell scripts this week versus previous 14 days\n//\n\nlet starttime = 21d;\nlet midtime = 14d;\nlet endtime = 7d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project  TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,AccountDomain=SubjectDomainName,\n  FileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nlet encodedPSScripts = \nProcessCreationEvents \n| where TimeGenerated \u003e= ago(midtime)\n| where FileName =~ \"powershell.exe\"\n| where ProcessCommandLine contains \"-encodedCommand\";\nencodedPSScripts\n| where TimeGenerated \u003e ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by ProcessCommandLine\n| parse ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n| project StartTimeUtc, EndTimeUtc, decodedCommand=base64_decodestring(substring(encodedCommand, 0, \n strlen(encodedCommand) - (strlen(encodedCommand) %8))), encodedCommand \n| join kind=anti (encodedPSScripts\n  | where TimeGenerated between(ago(starttime)..ago(endtime))\n  | summarize count() by ProcessCommandLine\n  | parse ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n  | project decodedCommand=base64_decodestring(substring(encodedCommand, 0, \n   strlen(encodedCommand) - (strlen(encodedCommand) %8))), encodedCommand \n) on encodedCommand, decodedCommand \n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_43')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Entropy for Processes for a given Host",
                                             "query":  "//Entropy calculation used to help identify Hosts where they have a high variety of processes(a high entropy process list on a given Host over time).\n//This helps us identify rare processes on a given Host. Rare here means a process shows up on the Host relatively few times in the the last 7days.\n//The Weight is calculated based on the Entropy, Process Count and Distinct Hosts with that Process. The lower the Weight/ProcessEntropy the, more interesting.\n//The Weight calculation increases the Weight if the process executes more than once on the Host or has executed on more than 1 Hosts.\n//In general, this should identify processes on a Host that are rare and rare for the environment.\n//References: https://medium.com/udacity/shannon-entropy-information-gain-and-picking-balls-from-buckets-5810d35d54b4\n//https://en.wiktionary.org/wiki/Shannon_entropy\n//\n\n// May need to reduce the number of days if the environment is very large.  Try 3-5 days, but less accuracy.\nlet end = startofday(now());\nlet start = end - 7d;\nlet Exclude = SecurityEvent\n// Timeframe is set so that results do not change during the same day (UTC time)\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID == 4688\n| summarize ExcludeCompCount = dcount(Computer),  ExcludeProcCount = count() by Process \n// Removing noisy processes for an environment, adjust as needed\n| where ExcludeProcCount \u003e= 2000 and ExcludeCompCount \u003e 2\n;\nlet AllSecEvents = SecurityEvent\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID == 4688\n// excluding well known processes\n| where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n| where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n| where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n| project Computer, Process;\n// Removing noisy process from full list\nlet Include = Exclude | join kind= rightanti (\nAllSecEvents\n) on Process;\n// Identifying prevalence for a given process in the environment\nlet DCwPC = Include | summarize DistinctComputersWithProcessCount = dcount(Computer) by Process\n| join kind=inner (\nInclude \n) on Process\n| distinct Computer, Process, DistinctComputersWithProcessCount;\n// Getting the Total process count on each host to use as the denominator in the entropy calc\nlet TPCoH = Include | summarize TotalProcessCountOnHost = count(Process) by Computer\n| join kind=inner (\nInclude \n) on Computer\n| distinct Computer, Process, TotalProcessCountOnHost\n//Getting a decimal value for later computation\n| extend TPCoHValue = todecimal(TotalProcessCountOnHost);\n// Need the count of each class in my bucket or also said as count of ProcName(Class) per Host(Bucket) for use in the entropy calc\nlet PCoH = Include | summarize ProcessCountOnHost = count(Process) by Computer, Process\n| join kind=inner (\nInclude\n) on Computer,Process\n| distinct Computer, Process, ProcessCountOnHost\n//Getting a decimal value for later computation\n| extend PCoHValue = todecimal(ProcessCountOnHost);\nlet Combined = DCwPC | join ( TPCoH ) on Computer, Process | join ( PCoH ) on Computer, Process; \nlet Results = Combined\n// Entropy calculation\n| extend ProcessEntropy = -log2(PCoHValue/TPCoHValue)*(PCoHValue/TPCoHValue)\n| extend AdjustedProcessEntropy = toreal(ProcessEntropy*10000)\n// Calculating Weight, see details in description\n| extend Weight = toreal((ProcessEntropy*10000)*ProcessCountOnHost*DistinctComputersWithProcessCount)\n// Remove or increase value to see processes with low entropy, meaning more common.\n| where Weight \u003c= 75\n| project Computer, Process, Weight , ProcessEntropy, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount, AdjustedProcessEntropy;\n// Join back full entry\nResults | join kind= inner (\n    SecurityEvent\n    | where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n    | where EventID == 4688\n    // excluding well known processes\n    | where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n    | where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n    | where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n    | where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n    | where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n    | project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName\n) on Computer, Process\n| project TimeGenerated, EventID, Computer, SubjectUserSid, Account, Weight, AdjustedProcessEntropy, FullDecimalProcessEntropy = ProcessEntropy, Process, NewProcessName, CommandLine, ParentProcessName, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount\n| sort by Weight asc, AdjustedProcessEntropy asc, NewProcessName asc\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_44')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Rare processes run by Service accounts",
                                             "query":  "//Service accounts normally are supposed to perform a limited set of tasks in a stable environment. \n//The query collects a list of service account and then joins them with rare processes in an environment to detect anomalous behaviours.\n//\n\nlet timeframe = 1d;\nlet List1 = datatable(AccountName:string)[\"MSSQLSERVER\", \"ReportServer\", \"MSDTSServer100\", \"IUSR\"];         \n// Provide a list of service account/ built-in accounts in an environment.\nlet List2 = SecurityEvent                                                                                   \n// Self generating a list of Service account using event Id :4624\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == \"4624\"\n| where Account !contains \"$\" and Account !contains \"Local SYSTEM\" and Account !contains  \"Local SERVICE\" and Account !contains  \"Network SERVICE\" and Account !contains \"NT AUTHORITY\" and Account !contains \"NT-AUTORIT??T\"\n| where LogonType == \"5\"                                                                                          \n| extend AccountName = Account \n| distinct AccountName;\nlet Accounts = List1 | union (List2 | distinct AccountName);\nlet ProcessCreationEvents=() {\n    let processEvents=SecurityEvent\n\t| where TimeGenerated \u003e= ago(timeframe)\n    | where EventID==4688\n    // filter out common randomly named files related to MSI installers and browsers\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n    | project TimeGenerated, \n      ComputerName=Computer,\n      AccountName=SubjectUserName, \n      AccountDomain=SubjectDomainName,\n      FileName=tostring(split(NewProcessName, '\\\\')[-1]),\n      ProcessCommandLine = CommandLine, \n      InitiatingProcessFileName=ParentProcessName,\n      InitiatingProcessCommandLine=\"\",\n      InitiatingProcessParentFileName=\"\";\n    processEvents;\n    };\n    let normalizedProcesses = ProcessCreationEvents \n       // normalize guids\n       | project TimeGenerated, AccountName, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", FileName)\n       // normalize digits away\n       | project TimeGenerated, AccountName, FileName=replace(@'\\d', 'n', FileName); \nlet freqs = normalizedProcesses\n    | summarize frequency = count() by FileName\n    | join kind= leftouter (\n       normalizedProcesses\n       | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated)  by FileName, AccountName\n    ) on FileName;\n   let Finalfreqs = freqs \n    | where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 10))\n    | order by frequency asc\n    | project FileName, frequency, Since, LastSeen , AccountName \n    // restrict results to unusual processes seen in last day \n    | where LastSeen \u003e= ago(timeframe);\nAccounts\n    | join kind= inner (\n        Finalfreqs\n) on AccountName\n| where frequency \u003c 10\n| project-away AccountName1\n| extend AccountCustomEntity = AccountName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_45')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Rare Process Path",
                                             "query":  "//Identifies when a process is running from a rare path. This could indicate malicious or unexpected activity as attacks \n//often try to use common process names running from non-standard locations\n//\n\nlet end = startofday(now());\nlet start = end - 8d;\nlet processEvents=\nSecurityEvent\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID==4688\n// excluding well known processes\n| where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n| where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n| where NewProcessName !has \":\\\\Windows\\\\WinSxS\\\\amd64_microsoft-windows-servicingstack_\" and ParentProcessName !has \":\\\\Windows\\\\WinSxS\\\\amd64_microsoft-windows-servicingstack_\"\n| where NewProcessName !endswith \":\\\\WindowsAzure\\\\SecAgent\\\\WaSecAgentProv.exe\" \n| where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n| where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n| where NewProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and NewProcessName !endswith \"\\\\MpCmdRun.exe\" \n| where NewProcessName !has ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\'\n// filter out common randomly named paths and files\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Temp\\\\[0-9A-Za-z-]*\\\\DismHost\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\Users\\\\[0-9A-Za-z-_~\\.]*\\\\AppData\\\\Local\\\\Temp\\\\[0-9A-Za-z-]*\\\\DismHost\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Temp\\\\[0-9A-Za-z-]*\\\\MpSigStub\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\[0-9A-Za-z]*\\\\amd64\\\\setup\\.exe\") and (ParentProcessName !has \":\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\\" \nor ParentProcessName !has \"\\\\AppData\\\\Local\\\\Temp\\\\mpam-\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Microsoft.NET\\\\(Framework|Framework64)\\\\v[0-9].[0-9].[0-9]*\\\\(csc\\.exe|cvtres\\.exe|mscorsvw\\.exe|ngentask\\.exe|ngen\\.exe)\")\n| where not(NewProcessName matches regex @\"\\\\WindowsAzure\\\\GuestAgent_[0-9].[0-9].[0-9]*.[0-9]*_[0-9]*-[0-9]*-[0-9]*_[0-9]*\\\\\") \nand not(ParentProcessName matches regex @\"\\\\WindowsAzure\\\\GuestAgent_[0-9].[0-9].[0-9]*.[0-9]*_[0-9]*-[0-9]*-[0-9]*_[0-9]*\\\\\")\n| where not(NewProcessName matches regex @\"\\\\[0-9A-Za-z]*\\\\epplauncher.exe\")\n| where not(NewProcessName matches regex @\"\\\\Packages\\\\Plugins\\\\Microsoft\\.\")\n| extend path_parts = parse_path(NewProcessName)\n| extend ProcessPath = tostring(path_parts.DirectoryPath)\n;\nlet normalizedProcessPath = processEvents\n| extend NormalizedProcessPath = ProcessPath\n// normalize guids\n| project TimeGenerated, Computer, Account, Process, ProcessPath, \nNormalizedProcessPath = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", NormalizedProcessPath)\n// normalize digits away\n| project TimeGenerated, Computer, Account, Process, ProcessPath, NormalizedProcessPath = replace(@'\\d', '#', NormalizedProcessPath)\n; \nlet freqs = normalizedProcessPath\n| summarize makelist(Computer), makelist(Account), makelist(ProcessPath), frequency=count() by NormalizedProcessPath, Process\n| join kind= leftouter (\nnormalizedProcessPath\n| summarize StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated) by NormalizedProcessPath, Process\n) on NormalizedProcessPath, Process;\nfreqs\n| where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))\n| order by frequency asc  \n| mvexpand Computer = list_Computer, Account = list_Account, ProcessPath = list_ProcessPath\n| project StartTimeUtc, EndTimeUtc, frequency, Process, NormalizedProcessPath, tostring(ProcessPath), tostring(Computer), tostring(Account)\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_46')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Hosts running a rare process with commandline",
                                             "query":  "//Looking for hosts running a rare process. Less than 1% of the average for 30 days and less than a count of 100 on a given host or less than a 14 count on a given host from the last 7 days\n//\nlet v_StartTime = ago(7d);\nlet v_EndTime = ago(1m);\nlet basic=materialize(\n  SecurityEvent\n    | where TimeGenerated \u003e= ago(30d)\n    | where EventID == 4688\n    | where isnotempty(CommandLine) and NewProcessName !endswith \":\\\\windows\\\\system32\\\\conhost.exe\" and CommandLine !~ NewProcessName and CommandLine !~ strcat('\\\"',NewProcessName,'\\\"',\" \"))\n    | extend CommandLine=tolower(CommandLine)\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (v_StartTime .. v_EndTime))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, NewProcessName, CommandLine\n    | where Count \u003e 0 and Count \u003c 100);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  NewProcessName, CommandLine;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on NewProcessName, CommandLine | project-away NewProcessName1, CommandLine1\n  | where Count \u003c 7 or (Count \u003c= Avg*0.01 and Count \u003c 100) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_47')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Hosts running a rare process",
                                             "query":  "//Looking for hosts running a rare process. Less than 1% of the average for 30 days and less than a count of 100 on a given host or less than a 14 count on a given host from the last 7 days\n//\nlet v_StartTime = ago(1d);\nlet v_EndTime = ago(1m);\nlet basic=materialize(\n  SecurityEvent\n    | where TimeGenerated \u003e= ago(30d)\n    | where EventID == 4688\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (v_StartTime .. v_EndTime))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, NewProcessName\n    | where Count \u003e 0 and Count \u003c 100);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  NewProcessName;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on NewProcessName | project-away NewProcessName1\n  | where Count \u003c 14 or (Count \u003c= Avg*0.01 and Count \u003c 100) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_48')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Suspicious Windows Login outside normal hours",
                                             "query":  "//Looking for suspiciopus interactive logon events which are outside normal logon hours for the user. Current day logon events are comapred with last 14 days activity \n//and filtered for events which are above or below of historical logon hour range seen for the user.\n//\nlet v_StartTime = 14d;\nlet v_EndTime = 2d;\nlet lookback = 1d;\nlet AllLogonEvents = materialize(\nSecurityEvent\n| where TimeGenerated  between (ago(v_StartTime)..ago(v_EndTime))\n| where EventID in (4624, 4625)\n| where LogonTypeName in~ ('2 - Interactive','10 - RemoteInteractive')\n| where AccountType =~ 'User'\n| extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)\n| extend DayofWeek = case(\nDayNumberofWeek == \"00:00:00\", \"Sunday\", \nDayNumberofWeek == \"1.00:00:00\", \"Monday\", \nDayNumberofWeek == \"2.00:00:00\", \"Tuesday\", \nDayNumberofWeek == \"3.00:00:00\", \"Wednesday\", \nDayNumberofWeek == \"4.00:00:00\", \"Thursday\", \nDayNumberofWeek == \"5.00:00:00\", \"Friday\", \nDayNumberofWeek == \"6.00:00:00\", \"Saturday\",\"InvalidTimeStamp\")\n// map the most common ntstatus codes\n| extend StatusDesc = case(\nStatus =~ \"0x80090302\", \"SEC_E_UNSUPPORTED_FUNCTION\",\nStatus =~ \"0x80090308\", \"SEC_E_INVALID_TOKEN\",\nStatus =~ \"0x8009030E\", \"SEC_E_NO_CREDENTIALS\",\nStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nStatus =~ \"0xC0000017\", \"STATUS_NO_MEMORY\",\nStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nStatus =~ \"0xC0000034\", \"STATUS_OBJECT_NAME_NOT_FOUND\",\nStatus =~ \"0xC000005E\", \"STATUS_NO_LOGON_SERVERS\",\nStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nStatus =~ \"0xC00000FE\", \"STATUS_NO_SUCH_PACKAGE\",\nStatus =~ \"0xC000009A\", \"STATUS_INSUFFICIENT_RESOURCES\",\nStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nStatus =~ \"0xC0000106\", \"STATUS_NAME_TOO_LONG\",\nStatus =~ \"0xC000010B\", \"STATUS_INVALID_LOGON_TYPE\",\nStatus =~ \"0xC000015B\", \"STATUS_LOGON_TYPE_NOT_GRANTED\",\nStatus =~ \"0xC000018B\", \"STATUS_NO_TRUST_SAM_ACCOUNT\",\nStatus =~ \"0xC0000224\", \"STATUS_PASSWORD_MUST_CHANGE\",\nStatus =~ \"0xC0000234\", \"STATUS_ACCOUNT_LOCKED_OUT\",\nStatus =~ \"0xC00002EE\", \"STATUS_UNFINISHED_CONTEXT_DELETED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| extend SubStatusDesc = case(\nSubStatus =~ \"0x80090325\", \"SEC_E_UNTRUSTED_ROOT\",\nSubStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nSubStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nSubStatus =~ \"0xC0000064\", \"STATUS_NO_SUCH_USER\",\nSubStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nSubStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nSubStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nSubStatus =~ \"0xC000006F\", \"STATUS_INVALID_LOGON_HOURS\",\nSubStatus =~ \"0xC0000070\", \"STATUS_INVALID_WORKSTATION\",\nSubStatus =~ \"0xC0000071\", \"STATUS_PASSWORD_EXPIRED\",\nSubStatus =~ \"0xC0000072\", \"STATUS_ACCOUNT_DISABLED\",\nSubStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nSubStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nSubStatus =~ \"0xC0000133\", \"STATUS_TIME_DIFFERENCE_AT_DC\",\nSubStatus =~ \"0xC000018D\", \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\",\nSubStatus =~ \"0xC0000193\", \"STATUS_ACCOUNT_EXPIRED\",\nSubStatus =~ \"0xC0000380\", \"STATUS_SMARTCARD_WRONG_PIN\",\nSubStatus =~ \"0xC0000381\", \"STATUS_SMARTCARD_CARD_BLOCKED\",\nSubStatus =~ \"0xC0000382\", \"STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED\",\nSubStatus =~ \"0xC0000383\", \"STATUS_SMARTCARD_NO_CARD\",\nSubStatus =~ \"0xC0000384\", \"STATUS_SMARTCARD_NO_KEY_CONTAINER\",\nSubStatus =~ \"0xC0000385\", \"STATUS_SMARTCARD_NO_CERTIFICATE\",\nSubStatus =~ \"0xC0000386\", \"STATUS_SMARTCARD_NO_KEYSET\",\nSubStatus =~ \"0xC0000387\", \"STATUS_SMARTCARD_IO_ERROR\",\nSubStatus =~ \"0xC0000388\", \"STATUS_DOWNGRADE_DETECTED\",\nSubStatus =~ \"0xC0000389\", \"STATUS_SMARTCARD_CERT_REVOKED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| project StartTime = TimeGenerated, DayofWeek, HourOfLogin, EventID, Activity, IpAddress, WorkstationName, Computer, TargetUserName, TargetDomainName, ProcessName, SubjectUserName, PrivilegeList, LogonTypeName, StatusDesc, SubStatusDesc\n);\nAllLogonEvents\n| where TargetDomainName !in (\"Window Manager\",\"Font Driver Host\")\n| summarize max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek) by TargetUserName\n| join kind= inner\n(\n    AllLogonEvents\n    | where StartTime \u003e ago(lookback)\n)\non TargetUserName\n// Filtering for logon events based on range of max and min of historical logon hour values seen\n| where HourOfLogin \u003e max_HourOfLogin or HourOfLogin \u003c min_HourOfLogin\n// Also populating additional column showing historical days of week when logon was seen\n| extend historical_DayofWeek = tostring(historical_DayofWeek)\n| summarize Total= count(), max(HourOfLogin), min(HourOfLogin), current_DayofWeek =make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, StatusDesc, SubStatusDesc, historical_DayofWeek\n| extend historical_DayofWeek = todynamic(historical_DayofWeek) \n| extend timestamp = StartTime, AccountCustomEntity = TargetUserName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_49')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Uncommon processes - bottom 5%",
                                             "query":  "//Shows the rarest processes seen running for the first time. (Performs best over longer time ranges - eg 3+ days rather than 24 hours!)\n//These new processes could be benign new programs installed on hosts; \n//However, especially in normally stable environments, these new processes could provide an indication of an unauthorized/malicious binary that has been installed and run. \n//Reviewing the wider context of the logon sessions in which these binaries ran can provide a good starting point for identifying possible attacks.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n// filter out common randomly named files related to MSI installers and browsers\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n| project TimeGenerated, ComputerName=Computer, AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]), ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName, InitiatingProcessCommandLine=\"\", InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\nlet normalizedProcesses = ProcessCreationEvents \n| where TimeGenerated \u003e= ago(timeframe)\n// normalize guids\n| project TimeGenerated, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", FileName)\n// normalize digits away\n| project TimeGenerated, FileName=replace(@'\\d', 'n', FileName); \nlet freqs = normalizedProcesses\n| summarize frequency=count() by FileName\n| join kind= leftouter (\nnormalizedProcesses\n| summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated) by FileName\n) on FileName;\nfreqs \n| where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))\n| order by frequency asc\n| project FileName, frequency, Since, LastSeen \n// restrict results to unusual processes seen in last day \n| where LastSeen \u003e= ago(1d)\n| extend timestamp = LastSeen \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_50')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Summary of user logons by logon type",
                                             "query":  "//Comparing succesful and nonsuccessful logon attempts can be used to identify attempts to move laterally within the \n//environment with the intention of discovering credentials and sensitive data.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID in (4624, 4625)\n| where AccountType == 'User' \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Amount = count() by LogonTypeName\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_51')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "User Account added to Built in Domain Local or Global Group",
                                             "query":  "//User account was added to a privileged built in domain local group or global group such as the Enterprise Adminis, Cert Publishers or DnsAdmins\n//Be sure to verify this is an expected addition.\n//\n\nlet timeframe = 10d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where AccountType == \"User\"\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (\"4728\", \"4732\", \"4756\")   \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid \n| extend timestamp = StartTimeUtc, HostCustomEntity = Computer, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_52')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "Long lookback User Account Created and Deleted within 10mins",
                                             "query":  "//User account created and then deleted within 10 minutes across last 14 days\n//\n\n// TimeFrame is the number of lookback days, default is last 14 days\nlet timeframe = 14d;\n// TimeDelta is the difference between when the account was created and when it was deleted, default is set to 10min or less\nlet timedelta = 10m;\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n// A user account was created\n| where EventID == \"4720\"\n| where AccountType == \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n   SecurityEvent\n   | where TimeGenerated \u003e ago(timeframe) \n   // A user account was deleted \n   | where EventID == \"4726\" \n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c timedelta\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= 0\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, HostCustomEntity = Computer, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_53')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "User account added or removed from a security group by an unauthorized user",
                                             "query":  "//User account added or removed from a security group by an unauthorized user, pass in a list\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID in (4728, 4729, 4732, 4733, 4746, 4747, 4751, 4752, 4756, 4757, 4761, 4762)\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_54')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "User created by unauthorized user",
                                             "query":  "//User account created by an unauthorized user, pass in a list\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4720\n| where AccountType == \"User\"\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_55')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SecurityEvent",
                                             "displayName":  "VIP account more than 6 failed logons in 10",
                                             "query":  "//VIP Account with more than 6 failed logon attempts in 10 minutes, include your own VIP list in the table below\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(VIPUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 10m;\nList | extend Account = strcat(Domain,\"\\\\\",VIPUser) | join kind= inner (\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where EventID == \"4625\"\n| where AccountType == \"User\"\n| where LogonType == \"2\" or LogonType == \"3\"\n) on Account \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FailedVIPLogons = count() by LogonType, Account\n| where FailedVIPLogons \u003e= 6\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_56')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. The intent is to hunt for user account compromise, possibly via a specific application\n//vector.\n//\n\nlet timeRange=ago(14d);\nSigninLogs \n// Forces Log Analytics to recognize that the query should be run over full time range\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName, UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(timeRange,now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare, Slope, Variance, RVariance, Interception, LineFit) = series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| top 3 by Slope desc\n| extend AccountCustomEntity = UserPrincipalName \n| render timechart\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_57')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application - with sign-in details",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. The intent is to hunt for user account compromise, possibly via a specific application\n//vector.\n//This variation of the query joins the results back onto the original sign-in data to allow review of the \n//location set with each identified user in tabular form.\n//\n\nlet timeRange = ago(14d);\nSigninLogs \n// Forces Log Analytics to recognize that the query should be run over full time range\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(timeRange,now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| top 3 by Slope desc  \n// Extract the set of locations for each top user:\n| join kind=inner (SigninLogs\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\")\n| summarize locationList = makeset(locationString), threeDayWindowLocationCount=dcount(locationString) by AppDisplayName, UserPrincipalName, \ntimerange=bin(TimeGenerated, 3d)) on AppDisplayName, UserPrincipalName\n| order by UserPrincipalName, timerange asc\n| project timerange, AppDisplayName , UserPrincipalName, threeDayWindowLocationCount, locationList \n| order by AppDisplayName, UserPrincipalName, timerange asc\n| extend timestamp = timerange, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_58')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Anomalous Azure Active Directory apps based on authentication location",
                                             "query":  "//This query over Azure AD sign-in activity highlights Azure AD apps with \n//an unusually high ratio of distinct geolocations versus total number of authentications\n//\n\nlet timeRange=ago(14d);\nlet azureSignIns = \nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where SourceSystem == \"Azure AD\"\n| where OperationName == \"Sign-in activity\"\n| project TimeGenerated, OperationName, AppDisplayName , Identity, UserId, UserPrincipalName, Location, LocationDetails, \nClientAppUsed, DeviceDetail, ConditionalAccessPolicies;\nazureSignIns\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n| summarize rawSigninCount = count(), countByAccount = dcount(UserId), locationCount = dcount(locationString) by AppDisplayName\n// tail - pick a threshold to rule out the very-high volume Azure AD apps\n| where rawSigninCount \u003c 1000\n// more locations than accounts\n| where locationCount\u003ecountByAccount\n// almost as many / more locations than sign-ins!\n| where 1.0*rawSigninCount / locationCount \u003e 0.8 \n| order by rawSigninCount  desc\n| join kind = leftouter (\n   azureSignIns \n) on AppDisplayName \n| project AppDisplayName, TimeGenerated , Identity, rawSigninCount, countByAccount, locationCount,  \nlocationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \ntostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"])), UserPrincipalName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName \n| order by AppDisplayName, TimeGenerated desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_59')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Attempts to sign in to disabled accounts by account name",
                                             "query":  "//Failed attempts to sign in to disabled accounts summarized by account name\n//\n\nlet timeRange = 14d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by AppDisplayName, UserPrincipalName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n| order by count_ desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_60')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Attempts to sign in to disabled accounts by IP address",
                                             "query":  "//Failed attempts to sign in to disabled accounts summarized by the IP address from from the sign-in attempts originate\n//\n\nlet timeRange = 14d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), numberAccountsTargeted = dcount(UserPrincipalName), \nnumberApplicationsTargeted = dcount(AppDisplayName), accountSet = makeset(UserPrincipalName), applicationSet=makeset(AppDisplayName), \nnumberLoginAttempts = count() by IPAddress\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress\n| order by numberLoginAttempts desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_61')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Inactive or new account signins",
                                             "query":  "//Query for accounts seen signing in for the first time - these could be associated\n//with stale/inactive accounts that ought to have been deleted but werent - and have \n//subseuqently been compromised. \n//Results for user accounts created in the last 7 days are filtered out\n//\n\n//Inactive accounts that sign in - first-time logins for accounts created in last 7 days are filtered out\nlet starttime = 14d;\nlet midtime = 7d;\nlet endtime = 1d;\nSigninLogs\n| where TimeGenerated \u003e= ago(endtime)\n// successful sign-in\n| where ResultType == 0\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), loginCountToday=count() by UserPrincipalName, Identity\n| join kind=leftanti (\n   SigninLogs\n   // historical successful sign-in\n   | where TimeGenerated \u003c ago(endtime)\n   | where TimeGenerated \u003e= ago(starttime)\n   | where ResultType == 0\n   | summarize by UserPrincipalName, Identity\n) on UserPrincipalName \n| join kind= leftanti (\n   // filter out newly created user accounts\n   AuditLogs\n   | where TimeGenerated \u003e= ago(midtime)\n   | where OperationName == \"Add user\" \n   // Normalize to lower case in order to match against equivalent UPN in Signin logs\n   | extend NewUserPrincipalName = tolower(extractjson(\"$.userPrincipalName\", tostring(TargetResources[0]), typeof(string)))\n) on $left.UserPrincipalName == $right.NewUserPrincipalName \n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_62')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Login attempts using Legacy Auth",
                                             "query":  "//This query over Azure AD sign-in activity highlights use of legacy authentication protocol in the \n//environment. Because conditional access policies are not evaluated when legacy authentication is used, \n//legacy authentication can be used to circumvent all Azure Conditional Access policies.\n//\n\nlet endtime = 1d;\nlet starttime = 7d;\nlet legacyAuthentications =\nSigninLogs\n| where TimeGenerated \u003e= ago(starttime)\n// success logons only\n| where ResultType == 0\n| extend ClientAppUsed = iff(isempty(ClientAppUsed)==true,\"Unknown\" ,ClientAppUsed)\n| extend isLegacyAuth = case(\nClientAppUsed contains \"Browser\", \"No\", \nClientAppUsed contains \"Mobile Apps and Desktop clients\", \"No\", \nClientAppUsed contains \"Exchange ActiveSync\", \"No\", \nClientAppUsed contains \"Other clients\", \"Yes\", \n\"Unknown\")\n| where isLegacyAuth==\"Yes\";\nlegacyAuthentications \n| where TimeGenerated \u003e= ago(endtime)\n// Don't alert for accounts already seen using legacy auth in prior 7 days\n| join kind=leftanti (\n   legacyAuthentications \n   | where TimeGenerated between(ago(starttime) .. ago(endtime))\n) on UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend LocationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), AttemptCount = count() \nby UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress, isLegacyAuth, tostring(OS), tostring(Browser), LocationString\n| sort by AttemptCount desc nulls last \n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_63')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Login attempt by Blocked MFA user",
                                             "query":  "//An account could be blocked if there are too many failed authentication attempts in a row. This hunting query identifies if a MFA user account that is set to blocked tries to login to Azure AD.\n//\nlet timeRange = 1d;\nlet lookBack = 7d;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet MFABlocked = SigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType != \"0\" \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails), Status = strcat(ResultType, \": \", ResultDescription)\n| where StatusDetails =~ \"MFA denied; user is blocked\"\n| extend Unresolved = iff(Identity matches regex isGUID, true, false);\n// Lookup up resolved identities from last 7 days\nlet identityLookup = SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from MFABlocked signins\nlet unresolvedNames = MFABlocked | where Unresolved == true | join kind= inner (\n identityLookup \n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_MFABlocked = MFABlocked | where Unresolved == false | union unresolvedNames;\nu_MFABlocked \n| extend OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), \n  AttemptCount = count() by UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation , CorrelationId \n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status,  IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_64')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Azure Active Directory signins from new locations",
                                             "query":  "//New Azure Active Directory signin locations today versus historical Azure Active Directory signin data\n//In the case of password spraying or brute force attacks one might see authentication attempts for many \n//accounts from a new location\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet countThreshold = 1;\nSigninLogs\n| where TimeGenerated \u003e= ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), perIdentityAuthCount = count() \nby Identity, locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \ntostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), distinctAccountCount = count(), identityList=makeset(Identity) by locationString\n| extend identityList = iff(distinctAccountCount\u003c10, identityList, \"multiple (\u003e10)\")\n| join kind= anti (\nSigninLogs\n  | where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n  | project locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \n  tostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n  | summarize priorCount = count() by locationString\n) \non locationString\n// select threshold above which #new accounts from a new location is deemed suspicious\n| where distinctAccountCount \u003e countThreshold\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_65')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Azure Active Directory sign-in burst from multiple locations",
                                             "query":  "//This query over Azure Active Directory sign-in activity highlights accounts associated\n//with multiple authentications from different geographical locations in a short space of time.\n//\n\nlet timeRange = ago(10d);\nlet signIns = SigninLogs\n| where TimeGenerated \u003e= timeRange\n| extend locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\",\n tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| where locationString != \"//\" \n// filter out signins associated with top 100 signin locations \n| join kind=anti (\nSigninLogs\n  | extend locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \n  tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n  | where locationString != \"//\"\n  | summarize count() by locationString\n  | order by count_ desc\n  | take 100) on locationString ; // TODO - make this threshold percentage-based\n// We will perform a time window join to identify signins from multiple locations within a 10-minute period\nlet lookupWindow = 10m;\nlet lookupBin = lookupWindow / 2.0; // lookup bin = equal to 1/2 of the lookup window\nsignIns \n| project-rename Start=TimeGenerated \n| extend TimeKey = bin(Start, lookupBin)\n| join kind = inner (\nsignIns \n| project-rename End=TimeGenerated, EndLocationString=locationString \n  // TimeKey on the right side of the join - emulates this authentication appearing several times\n  | extend TimeKey = range(bin(End - lookupWindow, lookupBin),\n  bin(End, lookupBin), lookupBin)\n  | mvexpand TimeKey to typeof(datetime) // translate TimeKey arrange range to a column\n) on Identity, TimeKey\n| where End \u003e Start\n| project timeSpan = End - Start, Identity, locationString, EndLocationString,tostring(Start), tostring(End), UserPrincipalName\n| where locationString != EndLocationString\n| summarize by timeSpan, Identity, locationString, EndLocationString, Start, End, UserPrincipalName\n| extend timestamp = Start, AccountCustomEntity = UserPrincipalName \n| order by Identity\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_66')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Signin Logs with expanded Conditional Access Policies",
                                             "query":  "//Example query for SigninLogs showing how to break out packed fields.  In this case extending conditional access Policies \n//\n\nlet timeframe = 1d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeframe)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName), ConditionalAccessPol0Result = tostring(ConditionalAccessPolicies[0].result)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName), ConditionalAccessPol1Result = tostring(ConditionalAccessPolicies[1].result)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName), ConditionalAccessPol2Result = tostring(ConditionalAccessPolicies[2].result)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| extend Date = startofday(TimeGenerated), Hour = datetime_part(\"Hour\", TimeGenerated)\n| summarize count() by Date, Identity, UserDisplayName, UserPrincipalName, IPAddress, ResultType, ResultDescription, StatusCode, StatusDetails, \nConditionalAccessPol0Name, ConditionalAccessPol0Result, ConditionalAccessPol1Name, ConditionalAccessPol1Result, ConditionalAccessPol2Name, ConditionalAccessPol2Result, \nLocation, State, City\n| extend timestamp = Date, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n| sort by Date \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_67')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Sign-ins from IPs that attempt sign-ins to disabled accounts",
                                             "query":  "//Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator. This analytic will additionally identify the successful signed in accounts as the mapped account entities for investigation in Sentinel.\n//\nlet lookBack = 1d;\nlet threshold = 100;\nSigninLogs \n| where TimeGenerated \u003e= ago(lookBack)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), disabledAccountLoginAttempts = count(), \ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), \napplicationSet = makeset(AppDisplayName) by IPAddress\n| order by disabledAccountLoginAttempts desc\n| join kind= leftouter (\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\n    SigninLogs\n    | where TimeGenerated \u003e= ago(lookBack)\n    | where ResultType == 0\n    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount \u003c threshold\n) on IPAddress  \n// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\n| where successfulAccountSigninCount != 0\n// Successful Account Signins occur within the same lookback period as the failed \n| extend SuccessBeforeFailure = iff(TimeGenerated \u003c StartTime, true, false) \n| project StartTime, EndTime, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet\n| order by disabledAccountLoginAttempts\n// Break up the string of Succesfully signed into accounts into individual events\n| mvexpand successfulAccountSigninSet\n| extend AccountCustomEntity = tostring(successfulAccountSigninSet), timestamp = StartTime, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_68')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Same User - Successful logon for a given App and failure on another App within 1m and low distribution",
                                             "query":  "//This identifies when a user account successfully logs onto a given App and within 1 minute fails to logon to a different App.\n//This may indicate a malicious attempt at accessing disallowed Apps for discovery or potential lateral movement\n//\n\nlet timeFrame = ago(1d);\nlet logonDiff = 1m;\nlet Success = SigninLogs \n| where TimeGenerated \u003e= timeFrame \n| where ResultType == \"0\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\", \"Office 365 SharePoint Online\")\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, IPAddress , SuccessAppDisplayName = AppDisplayName;\nlet Fail = SigninLogs \n| where TimeGenerated \u003e= timeFrame \n| where ResultType !in (\"0\", \"50140\") \n| where ResultDescription !~ \"Other\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\", \"Office 365 SharePoint Online\")\n| project FailedLogonTime = TimeGenerated, UserPrincipalName, IPAddress , FailedAppDisplayName = AppDisplayName, ResultType, ResultDescription;\nlet InitialDataSet = \nSuccess | join kind= inner (\nFail\n) on UserPrincipalName, IPAddress \n| where isnotempty(FailedAppDisplayName)\n| where SuccessLogonTime \u003c FailedLogonTime and FailedLogonTime - SuccessLogonTime \u003c= logonDiff and SuccessAppDisplayName != FailedAppDisplayName;\nlet InitialHits = \nInitialDataSet\n| summarize FailedLogonTime = min(FailedLogonTime), SuccessLogonTime = min(SuccessLogonTime) \nby UserPrincipalName, SuccessAppDisplayName, FailedAppDisplayName, IPAddress, ResultType, ResultDescription;\n// Only take hits where there is 5 or less distinct AppDisplayNames on the success side as this limits highly active applications where failures occur more regularly\nlet Distribution =\nInitialDataSet\n| summarize count(SuccessAppDisplayName) by SuccessAppDisplayName, ResultType\n| where count_SuccessAppDisplayName \u003c= 5;\nInitialHits | join (\n   Distribution \n) on SuccessAppDisplayName, ResultType\n| project UserPrincipalName, SuccessLogonTime, IPAddress, SuccessAppDisplayName, FailedLogonTime, FailedAppDisplayName, ResultType, ResultDescription \n| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_69')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-SigninLogs",
                                             "displayName":  "Failed attempt to access Azure Portal",
                                             "query":  "//Access attempts to Azure Portal from an unauthorized user.  Either invalid password or the user account does not exist.\n//\n\nlet timeRange=ago(7d);\nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where AppDisplayName contains \"Azure Portal\"\n// 50126 - Invalid username or password, or invalid on-premises username or password.\n// 50020? - The user doesn't exist in the tenant.\n| where ResultType in ( \"50126\" , \"50020\")\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddresses = makeset(IPAddress), DistinctIPCount = dcount(IPAddress), \nmakeset(OS), makeset(Browser), makeset(City), AttemptCount = count() \nby UserDisplayName, UserPrincipalName, AppDisplayName, ResultType, ResultDescription, StatusCode, StatusDetails, Location, State\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n| sort by AttemptCount\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_70')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Crypto currency miners EXECVE",
                                             "query":  "//This query hunts through EXECVE syslog data generated by AUOMS to find instances of crypto currency miners being\n//downloaded.  It returns a table of suspicious command lines.\n//Find more details on collecting EXECVE data into Azure Sentinel - https://techcommunity.microsoft.com/t5/azure-sentinel/hunting-threats-on-linux-with-azure-sentinel/ba-p/1344431\n//\n// Extract EventType and EventData from AUOMS Syslog message\nSyslog\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| project TimeGenerated, EventType, Computer, EventData \n// Extract AUOMS_EXECVE details from EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\\\"\" cmdline \"\\\" containerid=\" containerid\n// Find wget and curl commands\n| where comm in (\"wget\", \"curl\")\n// Find command lines featuring known crypto currency miner names\n| where cmdline contains \"nicehashminer\" or cmdline contains \"ethminer\" or cmdline contains \"equihash\" or cmdline contains \"NsCpuCNMiner64\" or cmdline contains \"minergate\" or cmdline contains \"minerd\" or cmdline contains \"cpuminer\" or cmdline contains \"xmr-stak-cpu\" or cmdline contains \"xmrig\" or cmdline contains \"stratum+tcp\" or cmdline contains \"cryptonight\" or cmdline contains \"monero\" or cmdline contains \"oceanhole\" or cmdline contains \"dockerminer\" or cmdline contains \"xmrdemo\"\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend AccountCustomEntity = user, HostCustomEntity = Computer, timestamp = TimeGenerated\n| sort by TimeGenerated desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_71')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Disabled accounts using Squid proxy",
                                             "query":  "//Look for accounts that have a been recorded as disabled by AD in the previous week but are still using the proxy during \n//the current week. This query presumes the default squid log format is being used. http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet starttime = 14d;\nlet endtime = 7d;\nlet disabledAccounts = (){\nSigninLogs \n| where TimeGenerated between(ago(starttime) .. ago(endtime))\n| where ResultType == 50057\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\" \n};\nlet proxyEvents = (){\nSyslog\n| where TimeGenerated \u003e ago(endtime)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n};\nproxyEvents \n| where Status !contains 'DENIED'\n| join kind=inner disabledAccounts on $left.User == $right.UserPrincipalName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_72')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Rare process running on a Linux host",
                                             "query":  "//Looks for rare processes that are running on Linux hosts. Looks for process seen less than 14 times in last 7 days, \n// or observed rate is less than 1% of of the average for the environment and fewer than 100.\n//\nlet starttime = 7d;\nlet endtime = 1m;\nlet lookback = 30d\nlet count_threshold = 100;\nlet perc_threshold = 0.01;\nlet host_threshold = 14;\nlet basic=materialize(\n  Syslog\n    | where TimeGenerated \u003e= ago(lookback)\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (ago(starttime) .. ago(endtime)))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, ProcessName\n    | where Count \u003e 0 and Count \u003c count_threshold);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  ProcessName;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on ProcessName | project-away ProcessName1\n  | where Count \u003c host_threshold or (Count \u003c= Avg*perc_threshold and Count \u003c count_threshold) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_73')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Linux scheduled task Aggregation",
                                             "query":  "//This query aggregates information about all of the scheduled tasks (Cron jobs) and presents the data in a chart.\n//The aggregation is done based on unique user-commandline pairs. It returns how many times a command line has\n//been run from a particular user, how many computers that pair has run on, and what percentage that is of the\n//total number of computers in the tenant.\n//\n\n// Change startdate below if you want a different timespan\nlet startdate = 7d;\n// Pull messages from Syslog-cron where the process name is \"CRON\" or \"CROND\", the severity level is info, and the SyslogMessage contains \"CMD\".\n// It also parses out the user and commandline from the message.\nlet RawCommands = Syslog \n| where TimeGenerated \u003e= ago(startdate)\n| where Facility =~ \"cron\" \n| where SeverityLevel =~ \"info\" \n| where ProcessName =~ \"CRON\" or ProcessName =~ \"CROND\"  \n| where SyslogMessage contains \"CMD \" \n| project TenantId, TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| extend TrimmedSyslogMsg = trim_end(@\"\\)\", SyslogMessage)\n| parse TrimmedSyslogMsg with * \"(\" user  \") CMD (\" cmdline \n| project TenantId, TimeGenerated, Computer, user, cmdline; \n// Count how many times a particular commandline has been seen based on unique Computer, User, and cmdline sets\nlet CommandCount = RawCommands\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(cmdline) by Computer, user, cmdline\n| project StartTimeUtc, EndTimeUtc, Computer, user, cmdline, CmdlineCount = count_cmdline ; \n// Count how many computers have run a particular user and cmdline pair\nlet DistComputerCount = RawCommands\n| summarize dcount(Computer) by TenantId, user, cmdline\n| project TenantId, user, cmdline, ComputerCount = dcount_Computer ; \n// Join above counts based on user and commandline pair\nlet CommandSummary = CommandCount | join (DistComputerCount) on user, cmdline\n| project StartTimeUtc, EndTimeUtc, TenantId, user, CmdlineCount, ComputerCount, cmdline ;\n// Count the total number of computers reporting cron messages in the tenant\nlet TotalComputers = Syslog\n| where Facility =~ \"cron\"\n| summarize dcount(Computer) by TenantId ;\n// Join the previous counts with the total computers count. Calculate the percentage of total computers value.\nlet FinalSummary = CommandSummary | join kind= leftouter (TotalComputers) on TenantId\n| project StartTimeUtc, EndTimeUtc, user, TimesCmdlineSeen = CmdlineCount, CompsThatHaveRunCmdline = ComputerCount, \nAsPercentOfTotalComps = round(100 * (toreal(ComputerCount)/toreal(dcount_Computer)),2), cmdline\n| order by user asc, TimesCmdlineSeen desc;\nFinalSummary \n| extend timestamp = StartTimeUtc, AccountCustomEntity = user\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_74')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Editing Linux scheduled tasks through Crontab",
                                             "query":  "//This query shows when users have edited or replaced the scheduled tasks using crontab. The events are bucketed into 10 minute intervals \n//and all the actions that a particular used took are collected into the List of Actions. Default query is for seven days.\n//\n\n// Change startdate below if you want a different timespan\nlet startdate = 14d;\n// Pull messages from Syslog-cron logs where the process is crontab and the severity level is \"info\". Extract the User and Action information from the SyslogMessage\nSyslog \n| where TimeGenerated  \u003e= ago(startdate)\n| where Facility =~ \"cron\" \n| where ProcessName =~ \"crontab\" \n| where SeverityLevel =~ \"info\" \n| project TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| parse SyslogMessage with * \"(\" user  \") \" Action \" (\" *\n// Only look for messages that contain edit or replace\n| where Action contains \"EDIT\" or Action contains \"REPLACE\"\n//| summarize all the actions into a single set based on 10 minute time intervals\n| summarize makeset(Action) by bin(TimeGenerated, 10m), Computer, user  \n| project EventTime10MinInterval = TimeGenerated, Computer, user, ListOfActions = set_Action \n| order by Computer asc nulls last, EventTime10MinInterval asc\n| extend timestamp = EventTime10MinInterval, AccountCustomEntity = user, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_75')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Squid commonly abused TLDs",
                                             "query":  "//Some top level domains (TLDs) are more commonly associated with malware for a range of reasons - including how easy domains on these TLDs are to obtain. \n//Many of these may be undesirable from an enterprise policy perspective. The clientCount column provides an initial insight into how widespread the domain \n//usage is across the estate. This query presumes the default squid log format is being used. http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet suspicious_tlds = dynamic([ \".click\", \".club\", \".download\",  \".xxx\", \".xyz\"]);\nlet timeframe = 14d;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe) \n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where TLD in (suspicious_tlds)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), clientCount = dcount(SourceIP) by TLD, User, URL\n| order by TLD asc, clientCount desc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_76')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Squid malformed requests",
                                             "query":  "//Malformed web requests are sometimes used for reconnaissance to detect the presence of network security devices.\n//Hunting for a large number of requests from a single source may assist in locating compromised hosts. Note: internal sites may\n//be detected by this query and may need excluding on a individual basis. This query presumes the default squid log format is\n//being used.\n//\n\nlet timeframe = 14d;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe) \n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where Domain !contains '.' and isnotempty(Domain)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), badRequestCount = count() by Domain, SourceIP, User, URL\n| order by badRequestCount desc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = SourceIP, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_77')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-Syslog",
                                             "displayName":  "Squid data volume timeseries anomalies",
                                             "query":  "//Malware infections or data exfiltration activity often leads to anomalies in network data volume\n//this hunting query looks for anomalies in the volume of bytes traversing a squid proxy. Anomalies require further \n//investigation to determine cause. This query presumes the default squid log format is being used.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TimeSeriesData = \nSyslog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where isnotempty(Bytes)\n| make-series TotalBytesSent=sum(Bytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by ProcessName;\nTimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent,3, -1, 'linefit')\n| extend timestamp = TimeGenerated\n| render timechart with (title=\"Squid Time Series anomalies\")\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_78')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "Same IP address with multiple csUserAgent",
                                             "query":  "//This alerts when the same client IP (cIP) is connecting with more than 1 but less than 15 different useragent string (csUserAgent) in less than 1 hour.\n//We limit to 50 or less connections to avoid high traffic sites. This may indicate malicious activity as this is a method of probing an environment\n//References: Status code mappings for your convenience\n//IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\n//Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n//\n\nlet timeFrame = ago(1h);\nW3CIISLog\n| where TimeGenerated \u003e= timeFrame\n| where scStatus !startswith \"20\" and scStatus !startswith \"30\" and cIP !startswith \"192.168.\" and cIP != sIP and cIP != \"::1\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makeset(csUserAgent), ConnectionCount = count() \nby Computer, sSiteName, sIP, sPort, cIP, csMethod\n| extend csUserAgentPerIPCount = arraylength(set_csUserAgent)\n| where  csUserAgentPerIPCount between ( 2 .. 15 ) and ConnectionCount \u003c=50\n| extend timestamp = StartTimeUtc, IPCustomEntity = cIP, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_79')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "Web shell Detection",
                                             "query":  "//Web shells are script that when uploaded to a web server can be used for remote administration. \n//Attackers often use web shells to obtain unauthorized access, escalate //privilege as well as further compromise the environment. \n//The query detects web shells that use GET requests by keyword searches in URL strings. \n//This is based out of sigma rules described //here (https://github.com/Neo23x0/sigma/blob/master/rules/web/web_webshell_keyword.yml). \n//There could be some web sites like wikis with articles on os commands and pages that include the os //commands in the URLs that might cause FP.\n//\n\nlet timeFrame = ago(1d);\nlet command = \"(?i)net(1)?(.exe)?(%20){1,}user|cmd(.exe)?(%20){1,}/c(%20){1,}\";\nW3CIISLog\n| where TimeGenerated \u003e= timeFrame\n| where csMethod == \"GET\" \n| where ( csUriQuery has \"whoami\" or csUriQuery matches regex command ) or \n        ( csUriStem has \"whoami\" or csUriStem matches regex command ) or\n        ( csReferer has \"whoami\" or csReferer matches regex command )\n| summarize StartTimeUtc = max(TimeGenerated), EndTimeUtc = min(TimeGenerated), ConnectionCount = count() \nby Computer, sSiteName, sIP, cIP, csUserName, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status\n| extend timestamp = StartTimeUtc, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_80')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "Potential IIS brute force",
                                             "query":  "//This query shows when 1200 (20 per minute) or more failed attempts by cIP per hour occur on a given server and then a successful logon by cIP. \n//This only includes when more than 1 user agent strings is used or more than 1 port is used.\n//This could be indicative of successful probing and password brute force success on your IIS servers. \n//Feel free to adjust the threshold as needed - ConnectionCount \u003e= 1200 \n//References: Status code mappings for your convenience, also inline if the mapping is not available\n//IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\n//Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx\n//\n\nlet timeFrame = ago(1h);\nW3CIISLog\n| where TimeGenerated \u003e= timeFrame\n| where scStatus in (\"401\",\"403\")\n| where cIP !startswith \"192.168.\" and cIP != sIP and cIP != \"::1\" //and csUserName != \"-\" \n// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI\n| extend csUriQuery = iff(csUriQuery startswith \"MailboxId=\", tostring(split(csUriQuery, \"\u0026\")[0]) , csUriQuery )\n| extend csUriQuery = iff(csUriQuery startswith \"X-ARR-CACHE-HIT=\", strcat(tostring(split(csUriQuery, \"\u0026\")[0]),tostring(split(csUriQuery, \"\u0026\")[1])) , csUriQuery )\n| summarize FailStartTimeUtc = min(TimeGenerated), FailEndTimeUtc = max(TimeGenerated), makeset(sPort), makeset(csUserAgent), makeset(csUserName), csUserNameCount = dcount(csUserName), ConnectionCount = count() by Computer, sSiteName, sIP, cIP, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status\n| extend csUserAgentPerIPCount = arraylength(set_csUserAgent)\n| extend sPortCount = arraylength(set_sPort)\n| extend scStatusFull = strcat(scStatus, \".\",scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == \"401.0\", \"Access denied.\",\nscStatusFull == \"401.1\", \"Logon failed.\",\nscStatusFull == \"401.2\", \"Logon failed due to server configuration.\",\nscStatusFull == \"401.3\", \"Unauthorized due to ACL on resource.\",\nscStatusFull == \"401.4\", \"Authorization failed by filter.\",\nscStatusFull == \"401.5\", \"Authorization failed by ISAPI/CGI application.\",\nscStatusFull == \"403.0\", \"Forbidden.\",\nscStatusFull == \"403.4\", \"SSL required.\",\n\"See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0\")\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ \"52e\", \"Logon failure: Unknown user name or bad password.\", \nscWin32Status_Hex =~ \"533\", \"Logon failure: Account currently disabled.\", \nscWin32Status_Hex =~ \"2ee2\", \"The request has timed out.\", \nscWin32Status_Hex =~ \"0\", \"The operation completed successfully.\", \nscWin32Status_Hex =~ \"1\", \"Incorrect function.\", \nscWin32Status_Hex =~ \"2\", \"The system cannot find the file specified.\", \nscWin32Status_Hex =~ \"3\", \"The system cannot find the path specified.\", \nscWin32Status_Hex =~ \"4\", \"The system cannot open the file.\", \nscWin32Status_Hex =~ \"5\", \"Access is denied.\", \nscWin32Status_Hex =~ \"8009030e\", \"SEC_E_NO_CREDENTIALS\", \nscWin32Status_Hex =~ \"8009030C\", \"SEC_E_LOGON_DENIED\", \n\"See - https://msdn.microsoft.com/library/cc231199.aspx\")\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n| where (ConnectionCount \u003e= 1200 and csUserAgentPerIPCount \u003e 1) or (ConnectionCount \u003e= 1200 and sPortCount \u003e 1)\n// now join back to see if there is a successful logon after so many failures\n| join (\nW3CIISLog\n| where TimeGenerated \u003e= timeFrame\n| where scStatus startswith \"20\"\n| where cIP !startswith \"192.168.\" and cIP != sIP and cIP != \"::1\"\n| extend LogonSuccessTimeUtc = TimeGenerated, Success_scStatus = scStatus\n| distinct LogonSuccessTimeUtc, Computer, sSiteName, sIP, cIP, Success_scStatus\n) on Computer, sSiteName, sIP, cIP\n| where FailEndTimeUtc \u003c LogonSuccessTimeUtc and not(LogonSuccessTimeUtc between (FailStartTimeUtc .. FailEndTimeUtc))\n| summarize makeset(LogonSuccessTimeUtc) by FailStartTimeUtc, FailEndTimeUtc, Computer, sSiteName, sIP, cIP, tostring(set_csUserName), csUserNameCount, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status, tostring(set_sPort), tostring(set_csUserAgent), ConnectionCount, csUserAgentPerIPCount, sPortCount, scStatusFull, scStatusFull_Friendly, scWin32Status_Hex, scWin32Status_Friendly\n| project FailStartTimeUtc, FailEndTimeUtc, set_LogonSuccessTimeUtc, Computer, sSiteName, sIP, cIP, set_csUserName, csUserNameCount, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status, set_sPort, set_csUserAgent, ConnectionCount, csUserAgentPerIPCount, sPortCount, scStatusFull, scStatusFull_Friendly, scWin32Status_Hex, scWin32Status_Friendly\n| extend timestamp = FailStartTimeUtc, IPCustomEntity = cIP, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_81')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "Potential IIS code injection attempt",
                                             "query":  "//Potential code injection into web server roles via scan of IIS logs. This represents an attempt to gain initial access to a system using a \n//drive-by compromise technique.  This sort of attack happens routinely as part of security scans, of both authorized and malicious types. \n//The initial goal of this detection is to flag these events when they occur and give an opportunity to review the data and filter out authorized activity.\n//\n\nlet lookback = 7d;\n// set cIP and csMethod count limit to indicate potentially noisy events, this will be listed at the top of the results \n// for any returns that are gt or equal to the default of 50\nlet cIP_MethodCountLimit = 50;\n// Exclude private ip ranges from cIP list\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\n// Exclude common csMethods, add/modify this list as needed for your environment\nlet csMethodExclude = dynamic(['GET', 'DEBUG', 'DELETE', 'LOCK', 'MKCOL', 'MOVE', 'PATCH', 'POST', 'PROPPATCH', \n'PUT', 'SEARCH', 'TRACE', 'TRACK', 'UNLOCK', 'OPTIONS', 'HEAD', 'RPC_IN_DATA', 'RPC_OUT_DATA', 'PROPFIND','BITS_POST','CCM_POST']);\n// Include in the list expected IPs where remote methods such as vuln scanning may be expected for your environment\nlet expectedIPs = dynamic(['X.X.X.X', 'Y.Y.Y.Y']);\nlet codeInjectionAttempts = W3CIISLog\n| where TimeGenerated \u003e= ago(lookback)\n| extend cIPType = iff(cIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where cIPType ==\"public\"\n| where cIP !in (expectedIPs)\n| project TimeGenerated, cIP, csUserName, csMethod, csCookie, csHost, sIP, scStatus, csUriStem, csUriQuery, csUserAgent, csReferer \n// Throwing entire record into a single string column for attributable string matching\n| extend pak = tostring(pack_all())\n// Adding \"arr\" column containing indicators of matched suspicious strings\n| extend arr = dynamic([])\n| extend arr = iff(pak contains '\u003cscript' , array_concat(arr, pack_array('STRING MATCH : script')), arr)\n| extend arr = iff(pak contains '%3Cscript' , array_concat(arr, pack_array('STRING MATCH : script')), arr)\n| extend arr = iff(pak contains '%73%63%72%69%70%74' , array_concat(arr, pack_array('STRING MATCH : encoded script')), arr)\n| extend arr = iff(pak contains '\u003cimg' , array_concat(arr, pack_array('STRING MATCH : img')), arr)\n| extend arr = iff(pak contains '%3Cimg' , array_concat(arr, pack_array('STRING MATCH : img')), arr)\n| extend arr = iff(pak contains 'passwd' , array_concat(arr, pack_array('STRING MATCH : passwd')), arr)\n| extend arr = iff(csUserAgent contains 'nmap' , array_concat(arr, pack_array('STRING MATCH : nmap')), arr)\n| extend arr = iff(csUserAgent contains 'nessus' , array_concat(arr, pack_array('STRING MATCH : nessus')), arr)\n| extend arr = iff(csUserAgent contains 'qualys' , array_concat(arr, pack_array('STRING MATCH : qualys')), arr)\n| extend arr = iff(csMethod !in (csMethodExclude), array_concat(arr, pack_array('INVALID HTTP METHOD')), arr)\n| extend arr = iff(csUriStem == '/current_config/passwd' , array_concat(arr, pack_array('STRING MATCH : dahua scan url' )), arr)\n| extend arr = iff(csUriQuery contains '..' and csUriQuery !endswith '...', array_concat(arr, pack_array('BACKTRACK ATTEMPT IN QUERY')), arr)\n| extend arr = iff(csUriQuery contains 'http://www.webscantest.com' , array_concat(arr, pack_array('STRING MATCH : webscantest')), arr)\n| extend arr = iff(csUriQuery contains 'http://appspidered.rapid7.com' , array_concat(arr, pack_array('STRING MATCH : appspider')), arr)\n| where array_length(arr) \u003e 0\n| project-away pak;\nlet cIP_MethodHighCount = codeInjectionAttempts \n| summarize StartTimeUtc = max(TimeGenerated), EndTimeUtc = min(TimeGenerated), cIP_MethodCount = count() \nby cIP, tostring(arr), cIP_MethodCountType = \"High Count of cIP and csMethod, this may be noise\" \n| where cIP_MethodCount \u003e=  cIP_MethodCountLimit;\nlet codeInjectAtt = \ncodeInjectionAttempts \n| summarize StartTimeUtc = max(TimeGenerated), EndTimeUtc = min(TimeGenerated), cIP_MethodCount = count() \nby cIP, cIP_MethodCountType = \"Count of repeated entries, this is to reduce rowsets returned\", csMethod, \ntostring(arr), csHost, scStatus, sIP, csUriStem, csUriQuery, csUserName, csUserAgent, csCookie, csReferer;\n// union the events and sort by cIP_MethodCount to identify potentially noisy entries.  Additionally, cIP_MethodCountType \n// indicates whether it is a high count or simply a count of repeated entries\n(union isfuzzy=true\ncIP_MethodHighCount, codeInjectAtt\n| sort by cIP_MethodCount desc, cIP desc, StartTimeUtc desc)\n| extend timestamp = StartTimeUtc, IPCustomEntity = cIP, HostCustomEntity = csHost, AccountCustomEntity = csUserName, URLCustomEntity = csUriQuery\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_82')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "URI requests from single client",
                                             "query":  "//This will look for connections to files on the server that are requested by only a single client. This analytic will be effective where an actor is utilising relatively static operational IP addresses. The threshold can be modified. The larger the execution window for this query the more reliable the results returned.\n//\n\nlet timeRange = 7d;\nlet clientThreshold = 1;\nlet data = W3CIISLog\n//Get script files asmx, aspx\n| where csUriStem contains \".as\"\n//Exclude local addresses, needs editing to matc your network configuration\n| where cIP !startswith \"10.\" and cIP !startswith \"fe80\" and cIP !startswith \"::\" and cIP !startswith \"127.\"\n| summarize makelist(cIP), count(TimeGenerated) by csUriStem, sSiteName, csUserAgent;\ndata\n| mvexpand list_cIP\n| distinct tostring(list_cIP), csUriStem, sSiteName, csUserAgent\n| summarize dcount(list_cIP), makelist(list_cIP), makelist(sSiteName) by csUriStem, csUserAgent\n| where dcount_list_cIP == clientThreshold \n//Uncomment to check to see if useragent is likely a browser\n| where csUserAgent startswith \"Mozilla\"\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_83')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Insight-Hunting-W3CIISLog",
                                             "displayName":  "Rare User Agent strings",
                                             "query":  "//This will check for Rare User Agent strings over the last 3 days.  This can indicate potential probing of your IIS servers.\n//\n\nlet timeframe = 3d;\nW3CIISLog | where TimeGenerated \u003e= ago(timeframe)\n// The below line can be used to exclude local IPs if these create noise\n//| where cIP !startswith \"192.168.\" and cIP != \"::1\"\n| where isnotempty(csUserAgent) and csUserAgent !in~ (\"-\", \"MSRPC\")\n| extend csUserAgent_size = string_size(csUserAgent)\n| project TimeGenerated, sSiteName, sPort, csUserAgent, csUserAgent_size, csUserName , csMethod, csUriStem, sIP, cIP, scStatus, \nscSubStatus, scWin32Status, csHost \n| join (\n    W3CIISLog | where TimeGenerated \u003e= ago(timeframe) \n\t  // The below line can be used to exclude local IPs if these create noise\n    //| where cIP !startswith \"192.168.\" and cIP != \"::1\"\n    | where isnotempty(csUserAgent) and csUserAgent !in~ (\"-\", \"MSRPC\") \n    | extend csUserAgent_size = string_size(csUserAgent)\n    | summarize csUserAgent_count = count() by bin(csUserAgent_size, 1)\n    | top 20 by csUserAgent_count asc nulls last \n) on csUserAgent_size\n| project TimeGenerated, sSiteName, sPort, sIP, cIP, csUserAgent, csUserAgent_size, csUserAgent_count, csUserName , csMethod, csUriStem, \nscStatus, scSubStatus, scWin32Status, csHost\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = csHost, AccountCustomEntity = csUserName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'hunting_query_84')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      }
                  ]
}
