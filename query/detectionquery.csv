name,source,description,severity,requiredDataConnectors,query,supported
Suspicious application consent similar to O365 Attack Toolkit,AuditLogs,"'This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit).
The default permissions/scope for the MDSec O365 Attack toolkit are contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, and files.readwrite.all.
Consent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!
For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.'
",High,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""AuditLogs""
                  ]
}","let detectionTime = 1d;
let joinLookback = 14d;
AuditLogs
| where TimeGenerated > ago(detectionTime)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Consent to application""
| where TargetResources has ""mailboxsettings""
| extend AppDisplayName = TargetResources.[0].displayName
| extend AppClientId = tolower(TargetResources.[0].id)
| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@""https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv""] with (format=""csv"")))
| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue
| parse ConsentFull with * ""ConsentType: "" GrantConsentType "", Scope: "" GrantScope1 ""]"" *
| where ConsentFull contains ""contacts.read"" and ConsentFull contains ""user.read"" and ConsentFull contains ""mail.read"" and ConsentFull contains ""notes.read.all"" and ConsentFull contains ""mailboxsettings.readwrite"" and ConsentFull contains ""Files.ReadWrite.All""
| where GrantConsentType != ""AllPrincipals"" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally
| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)
| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)
| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ ""User-Agent"", AdditionalDetails[0].value, """")
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId
| join kind = leftouter (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add service principal""
| extend AppClientId = tolower(TargetResources[0].id)
| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has ""AddressType"", TargetResources[0].modifiedProperties[1].newValue, """")
| distinct AppClientId, tostring(AppReplyURLs)
)
on AppClientId
| join kind = innerunique (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add OAuth2PermissionGrant"" or OperationName =~ ""Add delegated permission grant""
| extend GrantAuthentication = tostring(TargetResources[0].displayName)
| extend GrantOperation = OperationName
| project GrantAuthentication, GrantOperation, CorrelationId
) on CorrelationId
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull
",no
Suspicious application consent similar to PwnAuth,AuditLogs,"'This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the FireEye PwnAuth toolkit (https://github.com/fireeye/PwnAuth).
The default permissions/scope for the PwnAuth toolkit are user.read, offline_access, mail.readwrite, mail.send, and files.read.all.
Consent to applications with these permissions should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!
For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""AuditLogs""
                  ]
}","let detectionTime = 1d;
let joinLookback = 14d;
AuditLogs
| where TimeGenerated > ago(detectionTime)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Consent to application""
| where TargetResources has ""offline""
| extend AppDisplayName = TargetResources.[0].displayName
| extend AppClientId = tolower(TargetResources.[0].id)
//| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@""https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv""] with (format=""csv"")))
| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue
| parse ConsentFull with * ""ConsentType: "" GrantConsentType "", Scope: "" GrantScope1 ""]"" *
| where ConsentFull contains ""user.read"" and ConsentFull contains ""offline_access"" and ConsentFull contains ""mail.readwrite"" and ConsentFull contains ""mail.send"" and ConsentFull contains ""files.read.all""
| where GrantConsentType != ""AllPrincipals"" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally
| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)
| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)
| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ ""User-Agent"", AdditionalDetails[0].value, """")
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId
| join kind = leftouter (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add service principal""
| extend AppClientId = tolower(TargetResources[0].id)
| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has ""AddressType"", TargetResources[0].modifiedProperties[1].newValue, """")
| distinct AppClientId, tostring(AppReplyURLs)
)
on AppClientId
| join kind = innerunique (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add OAuth2PermissionGrant"" or OperationName =~ ""Add delegated permission grant""
| extend GrantAuthentication = tostring(TargetResources[0].displayName)
| extend GrantOperation = OperationName
| project GrantAuthentication, GrantOperation, CorrelationId
) on CorrelationId
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull
",yes
Rare application consent,AuditLogs,"'This will alert when the ""Consent to application"" operation occurs by a user that has not done this operation before or rarely does this.
This could indicate that permissions to access the listed Azure App were provided to a malicious actor. 
Consent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events. 
This may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth
For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""AuditLogs""
                  ]
}","
let current = 1d;
let auditLookback = 7d;
// Setting threshold to 3 as a default, change as needed.  
// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded
let threshold = 3;
// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results
let AuditTrail = AuditLogs | where TimeGenerated >= ago(auditLookback) and TimeGenerated < ago(current)
// 2 other operations that can be part of malicious activity in this situation are 
// ""Add OAuth2PermissionGrant"" and ""Add service principal"", extend the filter below to capture these too
| where OperationName == ""Consent to application""
| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), 
tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))
| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))
| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName
// only including operations by initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days
| where OperationCount > threshold
;
// Gather current period of audit data
let RecentConsent = AuditLogs | where TimeGenerated >= ago(current)
| where OperationName == ""Consent to application""
| extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), 
tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))
| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), 
tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))
| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))
| parse TargetResources.[0].modifiedProperties with * ""ConsentType: "" ConsentType ""]"" *
| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType , CorrelationId, Type;
// Exclude previously seen audit activity for ""Consent to application"" that was seen in the lookback period
// First for rare InitiatedBy
let RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy 
| extend Reason = ""Previously unseen user consenting"";
// Second for rare TargetResourceName
let RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName
| extend Reason = ""Previously unseen app granted consent"";
RareConsentBy | union RareConsentApp
| summarize Reason = makeset(Reason) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, CorrelationId, Type
| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress
",yes
Suspicious application consent for offline access,AuditLogs,"'This will alert when a user consents to provide a previously-unknown Azure application with offline access via OAuth.
Offline access will provide the Azure App with access to the listed resources without requiring two-factor authentication.
Consent to applications with offline access and read capabilities should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!
For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.'
",Low,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""AuditLogs""
                  ]
}","let detectionTime = 1d;
let joinLookback = 14d;
AuditLogs
| where TimeGenerated > ago(detectionTime)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Consent to application""
| where TargetResources has ""offline""
| extend AppDisplayName = TargetResources.[0].displayName
| extend AppClientId = tolower(TargetResources.[0].id)
//| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@""https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv""] with (format=""csv"")))
| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue
| parse ConsentFull with * ""ConsentType: "" GrantConsentType "", Scope: "" GrantScope1 ""]"" *
| where ConsentFull contains ""offline_access"" and ConsentFull contains ""Files.Read"" or ConsentFull contains ""Mail.Read"" or ConsentFull contains ""Notes.Read"" or ConsentFull contains ""ChannelMessage.Read"" or ConsentFull contains ""Chat.Read"" or ConsentFull contains ""TeamsActivity.Read"" or ConsentFull contains ""Group.Read"" or ConsentFull contains ""EWS.AccessAsUser.All"" or ConsentFull contains ""EAS.AccessAsUser.All""
| where GrantConsentType != ""AllPrincipals"" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally
| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)
| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)
| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ ""User-Agent"", AdditionalDetails[0].value, """")
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId
| join kind = leftouter (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add service principal""
| extend AppClientId = tolower(TargetResources[0].id)
| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has ""AddressType"", TargetResources[0].modifiedProperties[1].newValue, """")
| distinct AppClientId, tostring(AppReplyURLs)
)
on AppClientId
| join kind = innerunique (AuditLogs
| where TimeGenerated > ago(joinLookback)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""ApplicationManagement""
| where OperationName =~ ""Add OAuth2PermissionGrant"" or OperationName =~ ""Add delegated permission grant""
| extend GrantAuthentication = tostring(TargetResources[0].displayName)
| extend GrantOperation = OperationName
| project GrantAuthentication, GrantOperation, CorrelationId
) on CorrelationId
| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull
",yes
User added to Azure Active Directory Privileged Groups,AuditLogs,"'This will alert when a user is added to any of the Privileged Groups.
For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.
For Administrator role permissions in Azure Active Directory please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""AuditLogs""
                  ]
}","let timeframe = 1h;
let OperationList = dynamic([""Add member to role"",""Add member to role in PIM requested (permanent)""]);
let PrivilegedGroups = dynamic([""UserAccountAdmins"",""PrivilegedRoleAdmins"",""TenantAdmins""]);
AuditLogs
| where TimeGenerated >= ago(timeframe)
| where LoggedByService =~ ""Core Directory""
| where Category =~ ""RoleManagement""
| where OperationName in~ (OperationList)
| mv-expand TargetResources
| extend modifiedProperties = parse_json(TargetResources).modifiedProperties
| mv-expand modifiedProperties
| extend DisplayName = tostring(parse_json(modifiedProperties).displayName), GroupName =  trim(@'""',tostring(parse_json(modifiedProperties).newValue))
| extend AppId = tostring(parse_json(parse_json(InitiatedBy).app).appId), InitiatedByDisplayName = tostring(parse_json(parse_json(InitiatedBy).app).displayName), ServicePrincipalId = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalId), ServicePrincipalName = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalName)
| where DisplayName =~ ""Role.WellKnownObjectName""
| where GroupName in~ (PrivilegedGroups)
// If you want to still alert for operations from PIM, remove below filtering for MS-PIM.
| where InitiatedByDisplayName != ""MS-PIM""
| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, AppId, InitiatedByDisplayName, ServicePrincipalId, ServicePrincipalName, DisplayName, GroupName
| extend timestamp = TimeGenerated, AccountCustomEntity = ServicePrincipalName
",yes
Changes to internet facing AWS RDS Database instances,AWSCloudTrail,"'Amazon Relational Database Service (RDS) is scalable relational database in the cloud. 
If your organization have one or more AWS RDS Databases running, monitoring changes to especially internet facing AWS RDS (Relational Database Service) 
Once alerts triggered, validate if changes observed are authorized and adhere to change control policy. 
More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255
and RDS API Reference Docs: https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html'
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
let EventNameList = dynamic([""AuthorizeDBSecurityGroupIngress"",""CreateDBSecurityGroup"",""DeleteDBSecurityGroup"",""RevokeDBSecurityGroupIngress""]);
AWSCloudTrail
| where TimeGenerated > ago(timeframe)
| where EventName in~ (EventNameList)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress
",no
Changes to Amazon VPC settings,AWSCloudTrail,"'Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the AWS Cloud where you can launch AWS resources
in a virtual network that you define.
This identifies changes to Amazon VPC (Virtual Private Cloud) settings such as new ACL entries,routes, routetable or Gateways.
More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 
and AWS VPC API Docs: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/OperationList-query-vpc.html'
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
let EventNameList = dynamic([""CreateNetworkAclEntry"",""CreateRoute"",""CreateRouteTable"",""CreateInternetGateway"",""CreateNatGateway""]);
AWSCloudTrail
| where TimeGenerated > ago(timeframe)
| where EventName in~ (EventNameList)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, 
UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource, AdditionalEventData, ResponseElements
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress
",no
Changes made to AWS CloudTrail logs,AWSCloudTrail,"'Attackers often try to hide their steps by deleting or stopping the collection of logs that could show their activity. 
This alert identifies any manipulation of AWS CloudTrail, Cloudwatch/EventBridge or VPC Flow logs.
More Information: AWS CloudTrail API: https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_Operations.html
AWS Cloudwatch/Eventbridge API: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_Operations.html
AWS DelteteFlowLogs API : https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteFlowLogs.html '
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
let EventNameList = dynamic([""UpdateTrail"",""DeleteTrail"",""StopLogging"",""DeleteFlowLogs"",""DeleteEventBus""]);
AWSCloudTrail
| where TimeGenerated > ago(timeframe)
| where EventName in~ (EventNameList)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserAgent, 
UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion, EventSource
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress
",no
Login to AWS Management Console without MFA,AWSCloudTrail,"'Multi-Factor Authentication (MFA) helps you to prevent credential compromise. This alert identifies logins to the AWS Management Console without MFA.
You can limit this detection to trigger for adminsitrative accounts if you do not have MFA enabled on all accounts.
This is done by looking at the eventName ConsoleLogin and if the AdditionalEventData field indicates MFA was NOT used 
and the ResponseElements field indicates NOT a Failure. Thereby indicating that a non-MFA login was successful.'
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
AWSCloudTrail
| where TimeGenerated > ago(timeframe)
| where EventName =~ ""ConsoleLogin"" 
| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed), LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin)
| where MFAUsed !~ ""Yes"" and LoginResult !~ ""Failure""
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventName, EventTypeName, LoginResult, MFAUsed, UserIdentityAccountId,  UserIdentityPrincipalid, UserAgent, 
UserIdentityUserName, SessionMfaAuthenticated, SourceIpAddress, AWSRegion
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress
",no
Monitor AWS Credential abuse or hijacking,AWSCloudTrail,"'Looking for GetCallerIdentity Events where the UserID Type is AssumedRole 
An attacker who has assumed the role of a legitimate account can call the GetCallerIdentity function to determine what account they are using.
A legitimate user using legitimate credentials would not need to call GetCallerIdentity since they should already know what account they are using.
More Information: https://duo.com/decipher/trailblazer-hunts-compromised-credentials-in-aws
AWS STS GetCallerIdentity API: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html '
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
AWSCloudTrail
| where TimeGenerated > ago(timeframe)
| where EventName =~ ""GetCallerIdentity"" and UserIdentityType =~ ""AssumedRole"" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIpAddress, EventName, EventTypeName, UserIdentityType, UserIdentityAccountId, UserIdentityPrincipalid, 
UserAgent, UserIdentityUserName, SessionMfaAuthenticated,AWSRegion, EventSource, AdditionalEventData, ResponseElements
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserIdentityUserName, IPCustomEntity = SourceIpAddress
| sort by EndTimeUtc desc nulls last 
",no
"Full Admin policy created and then attached to Roles, Users or Groups",AWSCloudTrail,"'Identity and Access Management (IAM) securely manages access to AWS services and resources. 
Identifies when a policy is created with Full Administrators Access (Allow-Action:*,Resource:*). 
This policy can be attached to role,user or group and may be used by an adversary to escalate a normal user privileges to an adminsitrative level.
AWS IAM Policy Grammar: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html
and AWS IAM API at https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html'
",Medium,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","let EventNameList = dynamic([""AttachUserPolicy"",""AttachRolePolicy"",""AttachGroupPolicy""]);
let createPolicy = ""CreatePolicy"";
let timeframe = 1d;
let lookback = 14d;
// Creating Master table with all the events to use with materialize for better performance
let EventInfo = AWSCloudTrail
| where TimeGenerated >= ago(lookback)
| where EventName in (EventNameList) or EventName == createPolicy;
//Checking for Policy creation event with Full Admin Privileges since lookback period.
let FullAdminPolicyEvents =  materialize(  EventInfo
| where TimeGenerated >= ago(lookback)
| where EventName == createPolicy
| extend PolicyName = tostring(parse_json(RequestParameters).policyName)
| extend Statement = parse_json(tostring((parse_json(RequestParameters).policyDocument))).Statement
| mvexpand Statement
| extend Action = parse_json(Statement).Action , Effect = tostring(parse_json(Statement).Effect), Resource = tostring(parse_json(Statement).Resource)
| mvexpand Action
| extend Action = tostring(Action)
| where Effect =~ ""Allow"" and Action == ""*"" and Resource == ""*""
| distinct TimeGenerated, EventName, PolicyName, SourceIpAddress, UserIdentityArn, UserIdentityUserName
| extend UserIdentityUserName = iff(isnotempty(UserIdentityUserName), UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1]))
| project-rename StartTime = TimeGenerated  );
let PolicyAttach = materialize(  EventInfo
| where TimeGenerated >= ago(timeframe)
| where EventName in (EventNameList)
| extend PolicyName = tostring(split(tostring(parse_json(RequestParameters).policyArn),""/"")[1])
| summarize AttachEventCount=count(), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventSource, EventName,   UserIdentityType , UserIdentityArn, SourceIpAddress, UserIdentityUserName = iff(isnotempty(UserIdentityUserName),   UserIdentityUserName, tostring(split(UserIdentityArn,'/')[-1])), PolicyName
| extend AttachEvent = pack(""StartTime"", StartTime, ""EndTime"", EndTime, ""EventName"", EventName, ""UserIdentityType"",   UserIdentityType, ""UserIdentityArn"", UserIdentityArn, ""SourceIpAddress"", SourceIpAddress, ""UserIdentityUserName"", UserIdentityUserName)
| project EventSource, PolicyName, AttachEvent, AttachEventCount
);
// Joining the list of PolicyNames and checking if it has been attached to any Roles/Users/Groups.
// These Roles/Users/Groups will be Privileged and can be used by adversaries as pivot point for privilege escalation via multiple ways.
FullAdminPolicyEvents
| join kind=leftouter
(
    PolicyAttach
)
on PolicyName
| project-away PolicyName1
| extend timestamp = StartTime, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName
",no
Changes to AWS Security Group ingress and egress settings,AWSCloudTrail,"'A Security Group acts as a virtual firewall of an instance to control inbound and outbound traffic. 
 Hence, ingress and egress settings changes to AWS Security Group should be monitored as these can expose the enviornment to new attack vectors.
More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255.'
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
let EventNameList = dynamic([ ""AuthorizeSecurityGroupEgress"", ""AuthorizeSecurityGroupIngress"", ""RevokeSecurityGroupEgress"", ""RevokeSecurityGroupIngress""]);
AWSCloudTrail
| where TimeGenerated >= ago(timeframe)
| where EventName in~ (EventNameList)
| extend User = iif(isnotempty(UserIdentityUserName), UserIdentityUserName, SessionIssuerUserName)
| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) 
by EventSource, EventName, UserIdentityType, User, SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion, 
AdditionalEventData, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements
| extend timestamp = StartTimeUtc, AccountCustomEntity = User , IPCustomEntity = SourceIpAddress
",no
Changes to AWS Elastic Load Balancer security groups,AWSCloudTrail,"'Elastic Load Balancer distributes incoming traffic across multiple instances in multiple availability Zones. This increases the fault tolerance of your applications. 
 Unwanted changes to Elastic Load Balancer specific security groups could open your environment to attack and  hence needs monitoring.
 More information: https://medium.com/@GorillaStack/the-most-important-aws-cloudtrail-security-events-to-track-a5b9873f8255 
 and https://aws.amazon.com/elasticloadbalancing/.'
",Low,"{
    ""connectorId"":  ""AWS"",
    ""dataTypes"":  [
                      ""AWSCloudTrail""
                  ]
}","
let timeframe = 1d;
let EventNameList = dynamic([""ApplySecurityGroupsToLoadBalancer"", ""SetSecurityGroups""]);
AWSCloudTrail
| where TimeGenerated >= ago(timeframe)
| where EventName in~ (EventNameList)
| extend User = iif(isnotempty(UserIdentityUserName), UserIdentityUserName, SessionIssuerUserName)
| summarize EventCount=count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) 
by EventSource, EventName, UserIdentityType, User, SourceIpAddress, UserAgent, SessionMfaAuthenticated, AWSRegion,
AdditionalEventData, UserIdentityAccountId, UserIdentityPrincipalid, ResponseElements
| extend timestamp = StartTimeUtc, AccountCustomEntity = User , IPCustomEntity = SourceIpAddress
",no
Suspicious number of resource creation or deployment activities,AzureActivity,"'Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log.
The anomaly detection identifies activities that have occured both since the start of the day 1 day ago and the start of the day 7 days ago.
The start of the day is considered 12am UTC time.'
",Medium,"{
    ""connectorId"":  ""AzureActivity"",
    ""dataTypes"":  [
                      ""AzureActivity""
                  ]
}","let szOperationNames = dynamic([""Microsoft.Compute/virtualMachines/write"", ""Microsoft.Resources/deployments/write""]);
let starttime = 7d;
let endtime = 1d;
AzureActivity
| where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))
| where OperationName in~ (szOperationNames)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), 
OperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) 
by ResourceId, Caller, OperationName, Resource, ResourceGroup
| mvexpand CallerIpAddress
| where isnotempty(CallerIpAddress)
| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(7d)), now(), 1d) 
by Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup
| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)
| where Slope > 0.2
| join kind=leftsemi (
// Last day's activity is anomalous
AzureActivity
| where TimeGenerated >= startofday(ago(endtime))
| where OperationName in~ (szOperationNames)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), 
OperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) 
by ResourceId, Caller, OperationName, Resource, ResourceGroup
| mvexpand CallerIpAddress
| where isnotempty(CallerIpAddress)
| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(1d)), now(), 1d) 
by Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup
| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)
| where Slope > 0.2    
) on Caller, CallerIpAddress        
| mvexpand todynamic(ActivityTimeStamp), todynamic(ActivityStatus), todynamic(OperationIds), todynamic(CorrelationId)
| extend timestamp = ActivityTimeStamp, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress
",yes
Creation of expensive computes in Azure,AzureActivity,"'Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure.
Adversary may create new or update existing virtual machines sizes to evade defenses 
or use it for cryptomining purposes.
For Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes 
Azure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions'
",Low,"{
    ""connectorId"":  ""AzureActivity"",
    ""dataTypes"":  [
                      ""AzureActivity""
                  ]
}","let tokens = dynamic([""416"",""208"",""128"",""120"",""96"",""80"",""72"",""64"",""48"",""44"",""40"",""g5"",""gs5"",""g4"",""gs4"",""nc12"",""nc24"",""nv12"",""2s""]);
let operationList = dynamic([""Create or Update Virtual Machine"", ""Create Deployment"", ""Microsoft.Compute/virtualMachines/write""]);
let vmSeriesfilter = 12;
AzureActivity
| where TimeGenerated >= ago(30d)
| where OperationName in (operationList)
| where ActivityStatus == ""Accepted"" 
| where isnotempty(Properties)
| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))
| where isnotempty(vmSize)
| extend vmSeries = split(replace(""[a-z|A-Z]"","""",vmSize),'_',1)[0]
| where vmSize has_any (tokens) or vmSeries > vmSeriesfilter
| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)
| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)
| project TimeGenerated, OperationName, ActivityStatus, Caller, CallerIpAddress, ComputerName, vmSize
| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress",yes
Suspicious granting of permissions to an account,AzureActivity,"'Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.'
",Medium,"{
    ""connectorId"":  ""AzureActivity"",
    ""dataTypes"":  [
                      ""AzureActivity""
                  ]
}","let starttime = 14d;
let endtime = 1d;
let roleassingmentactions = dynamic([""Microsoft.Authorization/classicadministrators/write"",""Microsoft.Authorization/roleAssignments/write""]);
// The number of operations below which an IP address is considered an unusual source of role assignment operations
let alertOperationThreshold = 5;
let createRoleAssignmentActivity = AzureActivity
| where OperationName in~ (roleassingmentactions);
createRoleAssignmentActivity 
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| summarize count() by CallerIpAddress, Caller
| where count_ >= alertOperationThreshold
| join kind = rightanti ( 
createRoleAssignmentActivity
| where TimeGenerated > ago(endtime)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), 
OperationIds = makelist(OperationId), CorrelationId = makelist(CorrelationId), ActivityCountByCallerIPAddress = count()  
by ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup
) on CallerIpAddress, Caller
| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress",yes
Suspicious Resource deployment,AzureActivity,"'Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen Caller.'
",Low,"{
    ""connectorId"":  ""AzureActivity"",
    ""dataTypes"":  [
                      ""AzureActivity""
                  ]
}","let szOperationNames = dynamic([""Microsoft.Compute/virtualMachines/write"", ""Microsoft.Resources/deployments/write""]);
let starttime = 14d;
let endtime = 1d;
let RareCaller = AzureActivity
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| where OperationName in~ (szOperationNames)
| project ResourceGroup, Caller, OperationName, CallerIpAddress
| join kind=rightantisemi (
AzureActivity
| where TimeGenerated > ago(endtime)
| where OperationName in~ (szOperationNames)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatus = makeset(ActivityStatus), OperationIds = makeset(OperationId), CallerIpAddress = makeset(CallerIpAddress) 
by ResourceId, Caller, OperationName, Resource, ResourceGroup
) on Caller, ResourceGroup 
| mvexpand CallerIpAddress
| where isnotempty(CallerIpAddress);
let Counts = RareCaller | summarize ActivityCountByCaller = count() by Caller;
RareCaller | join kind= inner (Counts) on Caller | project-away Caller1
| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = tostring(CallerIpAddress)
| sort by ActivityCountByCaller desc nulls last",yes
Rare subscription-level operations in Azure,AzureActivity,"'This query looks for a few sensitive subscription-level events based on Azure Activity Logs. 
 For example this monitors for the operation name 'Create or Update Snapshot' which is used for creating backups but could be misused by attackers 
 to dump hashes or extract sensitive information from the disk.'
",Low,"{
    ""connectorId"":  ""AzureActivity"",
    ""dataTypes"":  [
                      ""AzureActivity""
                  ]
}","let starttime = 14d;
let endtime = 1d;
// The number of operations below which an IP address is considered an unusual source of role assignment operations
let alertOperationThreshold = 5;
let SensitiveOperationList = dynamic(
[""Microsoft.Storage/storageAccounts/listKeys"", ""Register Subscription"", ""Microsoft.Compute/snapshots/write"", ""Create or Update Network Security Group"",""Microsoft.Network/networkSecurityGroups""]);
let SensitiveActivity = AzureActivity
| where OperationName has_any (SensitiveOperationList)
| where ActivityStatus =~ ""Succeeded"";
SensitiveActivity
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| summarize count() by CallerIpAddress, Caller
| where count_ >= alertOperationThreshold
| join kind = rightanti ( 
SensitiveActivity
| where TimeGenerated >= ago(endtime)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), 
OperationIds = makelist(OperationId), CorrelationIds = makelist(CorrelationId), Resources = makelist(Resource), ResourceGroups = makelist(ResourceGroup), ResourceIds = makelist(ResourceId), ActivityCountByCallerIPAddress = count()  
by CallerIpAddress, Caller, OperationName
) on CallerIpAddress, Caller
| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress",yes
Azure DevOps Administrator Group Monitoring,AzureDevOpsAuditing,"'This detection monitors for additions to project or project collection administration groups in an Azure DevOps Organization.'
",Medium,"{
    ""connectorid"":  ""AzureDevOpsAuditing"",
    ""datatypes"":  [
                      ""AzureDevOpsAuditing""
                  ]
}","
let timeframe = 4h;
// Change to true to monitor for Project Administrator adds to *any* project
let MonitorAllProjects = false;
// If MonitorAllProjects is false, trigger only on Project Administrator add for the following projects
let ProjectsToMonitor = dynamic(['<project_X>','<project_Y>']);
AzureDevOpsAuditing
| where TimeGenerated >= ago(timeframe)
| where Area == ""Group"" and OperationName == ""Group.UpdateGroupMembership.Add""
| where Details has 'Administrators'
| where Details has ""was added as a member of group"" and (Details endswith '\\Project Administrators' or Details endswith '\\Project Collection Administrators')
| parse Details with AddedIdentity ' was added as a member of group [' EntityName ']\\' GroupName
| extend Level = iif(GroupName == 'Project Collection Administrators', 'Organization', 'Project'), AddedIdentityId = Data.MemberId
| extend Severity = iif(Level == 'Organization', 'High', 'Medium'), AlertDetails = strcat('At ', TimeGenerated, ' UTC ', ActorUPN, '/', ActorDisplayName, ' added ', AddedIdentity, ' to the ', EntityName, ' ', Level)
| where MonitorAllProjects == true or EntityName in (ProjectsToMonitor) or Level == 'Organization'
| project TimeGenerated, Severity, Adder = ActorUPN, AddedIdentity, AddedIdentityId, AlertDetails, Level, EntityName, GroupName, ActorAuthType = AuthenticationMechanism, 
  ActorIpAddress = IpAddress, ActorUserAgent = UserAgent, RawDetails = Details
| extend timestamp = TimeGenerated, AccountCustomEntity = Adder, IPCustomEntity = ActorIpAddress
",no
Azure DevOps Pull Request Policy Bypassing - Historic Allowlist,AzureDevOpsAuditing,"'This detection builds a Allowlist of historic PR policy bypasses and compares to recent history, flagging a non manually allowlisted, non historic pull request bypass.'
",Medium,"{
    ""connectorid"":  ""AzureDevOpsAuditing"",
    ""datatypes"":  [
                      ""AzureDevOpsAuditing""
                  ]
}","
let starttime = 14d;
let endtime = 3h;
// Add full UPN (user@domain.com) to Authorized Bypassers to ignore policy bypasses by certain authorized users
let AuthorizedBypassers = dynamic(['foo@baz.com', 'test@foo.com']);
let historicBypassers = AzureDevOpsAuditing
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| where OperationName == 'Git.RefUpdatePoliciesBypassed'
| distinct ActorUPN;
AzureDevOpsAuditing
| where TimeGenerated >= ago(endtime)
| where OperationName == 'Git.RefUpdatePoliciesBypassed'
| where ActorUPN !in (historicBypassers) and ActorUPN !in (AuthorizedBypassers)
| parse ScopeDisplayName with OrganizationName '(Organization)'
| project TimeGenerated, ActorUPN, IpAddress, UserAgent, OrganizationName, ProjectName, RepoName = Data.RepoName, AlertDetails = Details, Branch = Data.Name, 
  BypassReason = Data.BypassReason, PRLink = strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_git/', Data.RepoName, '/pullrequest/', Data.PullRequestId)
| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress
",no
Azure DevOps Service Conection Addition/Abuse - Historic Allowlist,AzureDevOpsAuditing,"'This detection builds a allowlist of historic service connection use by Builds and Releases and compares to recent history, flagging growth of service connection use in non manually allowlisted, non historically allowlisted Build/Release runs.
This is to determine if someone is hijacking a build/release and adding many service connections in order to abuse or dump credentials from service connections.'
",Medium,"{
    ""connectorid"":  ""AzureDevOpsAuditing"",
    ""datatypes"":  [
                      ""AzureDevOpsAuditing""
                  ]
}","
let starttime = 14d;
let endtime = 6h;
// Ignore Build/Releases with less/equal this number
let ServiceConnectionThreshold = 3;
// New Connections need to exhibit execution of more ""new"" connections than this number.
let NewConnectionThreshold = 1;
// List of Builds/Releases to ignore in your space
let BypassDefIds = datatable(DefId:string, Type:string, ProjectName:string)
[
//""103"", ""Release"", ""ProjectA"",
//""42"", ""Release"", ""ProjectB"",
//""122"", ""Build"", ""ProjectB""
];
let HistoricDefs = AzureDevOpsAuditing
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| where OperationName == ""Library.ServiceConnectionExecuted"" 
| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)
| summarize HistoricCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)) 
  by DefId = tostring(DefId), Type = tostring(Type), ProjectId, ProjectName, ActorUPN;
AzureDevOpsAuditing
| where TimeGenerated >= ago(endtime)
| where OperationName == ""Library.ServiceConnectionExecuted"" 
| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)
| parse ScopeDisplayName with OrganizationName ' (Organization)'
| summarize CurrentCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) 
  by OrganizationName, DefId = tostring(DefId), Type = tostring(Type), ProjectId, ProjectName, ActorUPN
| where CurrentCount > ServiceConnectionThreshold
| join (HistoricDefs) on ProjectId, DefId, Type, ActorUPN
| join kind=anti BypassDefIds on $left.DefId==$right.DefId and $left.Type == $right.Type and $left.ProjectName == $right.ProjectName
| extend link = iff(
Type == ""Build"", strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_build?definitionId=', DefId),
strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_release?_a=releases&view=mine&definitionId=', DefId))
| where CurrentCount >= HistoricCount + NewConnectionThreshold
| project StartTime, OrganizationName, ProjectName, DefId, link, RecentDistinctServiceConnections = CurrentCount, HistoricDistinctServiceConnections = HistoricCount, 
  RecentConnections = ConnectionNames, HistoricConnections = ConnectionNames1, ActorUPN
| extend timestamp = StartTime, AccountCustomEntity = ActorUPN
",no
Azure DevOps Personal Access Token (PAT) misuse,AzureDevOpsAuditing,"'This Alert detects whenever a PAT is used in ways that PATs are not normally used.  May require Allowlisting and baselining.
Reference - https://docs.microsoft.com/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page
Use this query for baselining:
AzureDevOpsAuditing
| distinct OperationName'
",High,"{
    ""connectorid"":  ""AzureDevOpsAuditing"",
    ""datatypes"":  [
                      ""AzureDevOpsAuditing""
                  ]
}","
let timeframe = 3d;
// Allowlisted UPNs should likely stay empty
let AllowlistedUpns = datatable(UPN:string)['foo@bar.com', 'test@foo.com'];
// Operation Name parts that will alert
let HasAnyBlocklist = datatable(OperationNamePart:string)['Security.','Project.','AuditLog.','Extension.'];
// Distinct Operation Names that will flag
let HasExactBlocklist = datatable(OperationName:string)['Group.UpdateGroupMembership.Add','Library.ServiceConnectionExecuted','Pipelines.PipelineModified',
'Release.ReleasePipelineModified', 'Git.RefUpdatePoliciesBypassed'];
AzureDevOpsAuditing
| where TimeGenerated >= ago(timeframe)
| where AuthenticationMechanism startswith ""PAT"" and (OperationName has_any (HasAnyBlocklist) or OperationName in (HasExactBlocklist))
  and ActorUPN !in (AllowlistedUpns)
| project TimeGenerated, AuthenticationMechanism, ProjectName, ActorUPN, ActorDisplayName, IpAddress, UserAgent, OperationName, Details, Data
| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUPN, IPCustomEntity = IpAddress
",no
Azure DevOps Service Conection Abuse,AzureDevOpsAuditing,"'Flags builds/releases that use a large number of service connections if they aren't manually allowlisted.
This is to determine if someone is hijacking a build/release and adding many service connections in order to abuse 
or dump credentials from service connections.'
",Medium,"{
    ""connectorid"":  ""AzureDevOpsAuditing"",
    ""datatypes"":  [
                      ""AzureDevOpsAuditing""
                  ]
}","
let timeframe = 14d;
// How many greater than Service Connections you want to view per build/release
let ServiceConnectionThreshold = 4;
let BypassDefIds = datatable(DefId:string, Type:string, ProjectName:string)
[
//""103"", ""Release"", ""ProjectA"",
//""42"", ""Release"", ""ProjectB"",
//""122"", ""Build"", ""ProjectB""
];
AzureDevOpsAuditing
| where TimeGenerated >= ago(timeframe)
| where OperationName == ""Library.ServiceConnectionExecuted"" 
| extend DefId = tostring(Data.DefinitionId), Type = tostring(Data.PlanType), ConnectionId = tostring(Data.ConnectionId)
| parse ScopeDisplayName with OrganizationName ' (Organization)'
| summarize CurrentCount = dcount(tostring(ConnectionId)), ConnectionNames = make_set(tostring(Data.ConnectionName)), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) 
  by OrganizationName, tostring(DefId), tostring(Type), ProjectId, ProjectName
| where CurrentCount > ServiceConnectionThreshold
| join kind=anti BypassDefIds on $left.DefId==$right.DefId and $left.Type == $right.Type and $left.ProjectName == $right.ProjectName
| extend link = iif(
  Type == ""Build"", strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_build?definitionId=', DefId),
  strcat('https://dev.azure.com/', OrganizationName, '/', ProjectName, '/_release?_a=releases&view=mine&definitionId=', DefId))
| extend timestamp = StartTime
",no
Mass secret retrieval from Azure Key Vault,AzureDiagnostics,"'Identifies mass secret retrieval from Azure Key Vault observed by a single user. 
Mass secret retrival crossing a certain threshold is an indication of credential dump operations or mis-configured applications. 
You can tweak the EventCountThreshold based on average count seen in your environment 
and also filter any known sources (IP/Account) and useragent combinations based on historical analysis to further reduce noise'
",Low,"{
    ""connectorId"":  ""AzureMonitor(Keyvault)"",
    ""dataTypes"":  [
                      ""AzureDiagnostics""
                  ]
}","
let timeframe =1d;
let EventCountThreshold = 25;
let OperationList = dynamic(
[""SecretGet"", ""KeyGet"", ""VaultGet""]);
AzureDiagnostics
| where TimeGenerated > ago(timeframe)
| extend ResultType = columnifexists(""ResultType"", ""None""), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(""identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g"", ""None"")
| where ResultType !~ ""None"" and isnotempty(ResultType)
| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ ""None"" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)
| where ResourceType =~ ""VAULTS"" and ResultType =~ ""Success""
| where OperationName in (OperationList) 
| summarize count() by identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, OperationName
| where count_ > EventCountThreshold  
| join (
AzureDiagnostics
| where TimeGenerated > ago(timeframe)
| extend ResultType = columnifexists(""ResultType"", ""NoResultType"")
| extend requestUri_s = columnifexists(""requestUri_s"", ""None""), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(""identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g"", ""None"")
| extend id_s = columnifexists(""id_s"", ""None""), CallerIPAddress = columnifexists(""CallerIPAddress"", ""None""), clientInfo_s = columnifexists(""clientInfo_s"", ""None"")
| where ResultType !~ ""None"" and isnotempty(ResultType)
| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ ""None"" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)
| where id_s !~ ""None"" and isnotempty(id_s)
| where CallerIPAddress !~ ""None"" and isnotempty(CallerIPAddress)
| where clientInfo_s !~ ""None"" and isnotempty(clientInfo_s)
| where requestUri_s !~ ""None"" and isnotempty(requestUri_s)
| where OperationName in~ (OperationList)   
) on identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g 
| summarize EventCount=sum(count_), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s
| extend timestamp = EndTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g
",yes
Sensitive Azure Key Vault operations,AzureDiagnostics,"'Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, KeyDecrypt, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup. 
Any Backup operations should match with expected scheduled backup activity.'
",Low,"{
    ""connectorId"":  ""AzureMonitor(Keyvault)"",
    ""dataTypes"":  [
                      ""AzureDiagnostics""
                  ]
}","
let timeframe = 1d;
let SensitiveOperationList = dynamic(
[""VaultDelete"", ""KeyDelete"", ""SecretDelete"", ""SecretPurge"", ""KeyPurge"", ""SecretBackup"", ""KeyBackup""]);
AzureDiagnostics
| where TimeGenerated > ago(timeframe)
| extend ResultType = columnifexists(""ResultType"", ""NoResultType"")
| extend requestUri_s = columnifexists(""requestUri_s"", ""None""), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(""identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g"", ""None"")
| extend id_s = columnifexists(""id_s"", ""None""), CallerIPAddress = columnifexists(""CallerIPAddress"", ""None""), clientInfo_s = columnifexists(""clientInfo_s"", ""None"")
| where ResultType !~ ""None"" and isnotempty(ResultType)
| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ ""None"" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)
| where id_s !~ ""None"" and isnotempty(id_s)
| where CallerIPAddress !~ ""None"" and isnotempty(CallerIPAddress)
| where clientInfo_s !~ ""None"" and isnotempty(clientInfo_s)
| where requestUri_s !~ ""None"" and isnotempty(requestUri_s)
| where ResourceType =~ ""VAULTS"" and ResultType =~ ""Success"" 
| where OperationName in~ (SensitiveOperationList)  
| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s
| extend timestamp = StartTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g
",yes
Azure Key Vault access TimeSeries anomaly,AzureDiagnostics,"'Indentifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm 
to find large deviations from baseline Azure Key Vault access patterns. Any sudden increase in the count of Azure Key Vault accesses can be an 
indication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations.
TimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052'
",Low,"{
    ""connectorId"":  ""AzureMonitor(Keyvault)"",
    ""dataTypes"":  [
                      ""AzureDiagnostics""
                  ]
}","
let starttime = 14d;
let timeframe = 1d;
let scorethreshold = 3;
let baselinethreshold = 5;
let OperationList = dynamic(
[""SecretGet"", ""KeyGet"", ""VaultGet""]);
let TimeSeriesData = AzureDiagnostics
| where TimeGenerated between (startofday(ago(starttime))..startofday(now()))
| extend ResultType = columnifexists(""ResultType"", ""None""), CallerIPAddress = columnifexists(""CallerIPAddress"", ""None"")
| where ResultType !~ ""None"" and isnotempty(ResultType)
| where CallerIPAddress !~ ""None"" and isnotempty(CallerIPAddress)
| where ResourceType =~ ""VAULTS"" and ResultType =~ ""Success""
| where OperationName in (OperationList) 
| project TimeGenerated, OperationName, Resource, CallerIPAddress 
| make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Resource;
//Filter anomolies against TimeSeriesData
let TimeSeriesAlerts = TimeSeriesData
| extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')
| mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)
| where anomalies > 0 | extend AnomalyHour = TimeGenerated
| where baseline > baselinethreshold // Filtering low count events per baselinethreshold
| project Resource, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;
// Filter the alerts since specified timeframe
TimeSeriesAlerts
| where TimeGenerated > ago(timeframe)
// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly
| join (
AzureDiagnostics
| where TimeGenerated > ago(timeframe)
| extend ResultType = columnifexists(""ResultType"", ""NoResultType"")
| extend requestUri_s = columnifexists(""requestUri_s"", ""None""), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists(""identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g"", ""None"")
| extend id_s = columnifexists(""id_s"", ""None""), CallerIPAddress = columnifexists(""CallerIPAddress"", ""None""), clientInfo_s = columnifexists(""clientInfo_s"", ""None"")
| where ResultType !~ ""None"" and isnotempty(ResultType)
| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ ""None"" and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)
| where id_s !~ ""None"" and isnotempty(id_s)
| where CallerIPAddress !~ ""None"" and isnotempty(CallerIPAddress)
| where clientInfo_s !~ ""None"" and isnotempty(clientInfo_s)
| where requestUri_s !~ ""None"" and isnotempty(requestUri_s)
| where ResourceType =~ ""VAULTS"" and ResultType =~ ""Success""
| where OperationName in (OperationList)  
| summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated,*) by bin(TimeGenerated,1h), Resource, OperationName, id_s, CallerIPAddress, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, requestUri_s, clientInfo_s     
) on Resource, TimeGenerated 
| summarize EventCount=count(), OperationNameList = make_set(OperationName), RequestURLList = make_set(requestUri_s), AccountList = make_set(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g), AccountMax = arg_max(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g,*) by Resource, id_s, clientInfo_s, LatestAnomalyTime
| extend timestamp = LatestAnomalyTime, IPCustomEntity = CallerIPAddress, AccountCustomEntity = AccountMax
",yes
Cisco ASA - average attack detection rate increase,CommonSecurityLog,"'This will help you determine if Cisco ASA devices are under heavier attack than normal over the last hour versus the previous 6 hours based on DeviceEventClassID 733100
References: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html
Details on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html'
",Low,"{
    ""connectorId"":  ""CiscoASA"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let timeframe = 1h;
let last1h = CommonSecurityLog 
| where TimeGenerated >= ago(timeframe)
| where isempty(CommunicationDirection) 
| where DeviceEventClassID == ""733100""
| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, ""]"")[0]),""[ "")[1])
| extend splitMessage = split(Message, ""."")
| extend DropRate = tostring(split(tostring(splitMessage[0]),""] "")[1])
| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),""  "")[0]),""is "")
| extend CurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),"" "")[0])
| extend MaxConfiguredBurstRate = toint(CurrentBurstRate[2])
| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),""  "")[1]),""is "")
| extend CurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),"" "")[0])
| extend MaxConfiguredAvgRate = toint(CurrentAvgRate[2])
| extend CumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),""  "")[2]),""is "")[1])
| summarize last1hCumTotal = sum(CumulativeTotal), last1hAvgRatePerSec = avg(CurrentAvgRatePerSec), last1hAvgBurstRatePerSec = avg(CurrentBurstRatePerSec) by DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;
let prev6h = CommonSecurityLog 
| where TimeGenerated between (ago(6h) .. ago(1h))
| where isempty(CommunicationDirection) 
| where DeviceEventClassID == ""733100""
| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, ""]"")[0]),""[ "")[1])
| extend splitMessage = split(Message, ""."")
| extend DropRate = tostring(split(tostring(splitMessage[0]),""] "")[1])
| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),""  "")[0]),""is "")
| extend prevCurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),"" "")[0])
| extend prevMaxConfiguredBurstRate = toint(CurrentBurstRate[2])
| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),""  "")[1]),""is "")
| extend prevCurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),"" "")[0])
| extend prevMaxConfiguredAvgRate = toint(CurrentAvgRate[2])
| extend prevCumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),""  "")[2]),""is "")[1])
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), prev6hCumTotal = sum(prevCumulativeTotal), prev6hAvgRatePerSec = avg(prevCurrentAvgRatePerSec), prev6hAvgBurstRatePerSec = avg(prevCurrentBurstRatePerSec) 
by DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;
last1h | join (
  prev6h 
) on DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate
| project StartTimeUtc, EndTimeUtc, DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate, last1hCumTotal, prev6hCumTotal, prev6hAvgCumTotal = prev6hCumTotal/6, last1hAvgRatePerSec, prev6hAvgRatePerSec, last1hAvgBurstRatePerSec, prev6hAvgBurstRatePerSec
// Select only events that indicate a doubling of the expected rate in the last hour over the previous 6 hours
| where last1hCumTotal > 2*prev6hAvgCumTotal or last1hAvgRatePerSec > 2*prev6hAvgRatePerSec or last1hAvgBurstRatePerSec > 2*prev6hAvgBurstRatePerSec
| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName
",yes
Cisco ASA - threat detection message fired,CommonSecurityLog,"'Identifies when the Cisco ASA Threat Detection engine fired an alert based on malicious activity occurring on the network inicated by DeviceEventClassID 733101-733105
Resources: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html
Details on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html'
",Medium,"{
    ""connectorId"":  ""CiscoASA"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let timeframe = 1h;
CommonSecurityLog 
| where TimeGenerated >= ago(timeframe)
| where isempty(CommunicationDirection) 
| where DeviceEventClassID in (""733101"",""733102"",""733103"",""733104"",""733105"")
| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName
",yes
Fortinet - Beacon pattern detected,CommonSecurityLog,"'Identifies patterns in the time deltas of contacts between internal and external IPs in Fortinet network data that are consistent with beaconing.
 Accounts for randomness (jitter) and seasonality such as working hours that may have been introduced into the beacon pattern.
 The lookback is set to 1d, the minimum granularity in time deltas is set to 60 seconds and the minimum number of beacons required to emit a
 detection is set to 4.
 Increase the lookback period to capture beacons with larger periodicities.
 The jitter tolerance is set to 0.2 - This means we account for an overall 20% deviation from the infered beacon periodicity. Seasonality is dealt with
 automatically using series_outliers.
 Note: In large environments it may be necessary to reduce the lookback period to get fast query times.'
",Low,"{
    ""connectorId"":  ""Fortinet"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let starttime = 1d;
let TimeDeltaThresholdInSeconds = 60; // we ignore beacons diffs that fall below this threshold 
let TotalBeaconsThreshold = 4; // minimum number of beacons required in a session to surface a row
let JitterTolerance = 0.2; // tolerance to jitter, e.g. - 0.2 = 20% jitter is tolerated either side of the periodicity
let PrivateIPregex = @""^127\.|^10\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-1]\.|^192\.168\.""; // exclude destinations that fall into this category
CommonSecurityLog
| where DeviceVendor == ""Fortinet""
| where TimeGenerated > ago(starttime)
// eliminate bad data
| where isnotempty(SourceIP) and isnotempty(DestinationIP) and SourceIP != ""0.0.0.0""
// filter out deny, close, rst and SNMP to reduce data volume
| where DeviceAction !in (""close"", ""client-rst"", ""server-rst"", ""deny"") and DestinationPort != 161
// map input fields
| project TimeGenerated , SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction 
// where destination IPs are public
| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,""private"" ,""public"" )
| where DestinationIPType == ""public""
// sort into source->destination 'sessions'
| sort by SourceIP asc, DestinationIP asc, DestinationPort asc, TimeGenerated asc
| serialize
// time diff the contact times between source and destination to get a list of deltas
| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1), nextDestIP = next(DestinationIP, 1), nextDestPort = next(DestinationPort, 1)
| extend TimeDeltainSeconds = datetime_diff(""second"",nextTimeGenerated,TimeGenerated)
| where SourceIP == nextSourceIP and DestinationIP == nextDestIP and DestinationPort == nextDestPort
// remove small time deltas below the set threshold
| where TimeDeltainSeconds > TimeDeltaThresholdInSeconds
| project TimeGenerated, TimeDeltainSeconds, SourceIP, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction 
// summarize the deltas by source->destination
| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), sum(ReceivedBytes), sum(SentBytes), makelist(TimeDeltainSeconds), makeset(DeviceAction) by SourceIP, DestinationIP, DestinationPort
// get some statistical properties of the delta distribution and smooth any outliers (e.g. laptop shut overnight, working hours)
| extend series_stats(list_TimeDeltainSeconds), outliers=series_outliers(list_TimeDeltainSeconds)
// expand the deltas and the outliers
| mvexpand list_TimeDeltainSeconds to typeof(double), outliers to typeof(double)
// replace outliers with the average of the distribution
| extend list_TimeDeltainSeconds_normalized=iff(outliers > 1.5 or outliers < -1.5, series_stats_list_TimeDeltainSeconds_avg , list_TimeDeltainSeconds)
// summarize with the smoothed distribution
| summarize BeaconCount=count(), makelist(list_TimeDeltainSeconds), list_TimeDeltainSeconds_normalized=makelist(list_TimeDeltainSeconds_normalized), makeset(set_DeviceAction) by StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, sum_ReceivedBytes, sum_SentBytes
// get stats on the smoothed distribution
| extend series_stats(list_TimeDeltainSeconds_normalized)
// match jitter tolerance on smoothed distrib
| extend MaxJitter = (series_stats_list_TimeDeltainSeconds_normalized_avg*JitterTolerance)
| where series_stats_list_TimeDeltainSeconds_normalized_stdev < MaxJitter
// where the minimum beacon threshold is satisfied and there was some data transfer
| where BeaconCount > TotalBeaconsThreshold and (sum_SentBytes > 0 or sum_ReceivedBytes > 0)
// final projection
| project StartTime, EndTime, SourceIP, DestinationIP, DestinationPort, BeaconCount, TimeDeltasInSeconds=list_list_TimeDeltainSeconds, Periodicity=series_stats_list_TimeDeltainSeconds_normalized_avg, ReceivedBytes=sum_ReceivedBytes, SentBytes=sum_SentBytes, Actions=set_set_DeviceAction
// where periodicity is order of magnitude larger than time delta threshold (eliminates FPs whose periodicity is close to the values we ignored)
| where Periodicity >= (10*TimeDeltaThresholdInSeconds)
| extend timestamp = StartTime, IPCustomEntity = DestinationIP
",partial
Possible contact with a domain generated by a DGA,CommonSecurityLog,"'Identifies contacts with domains names in CommonSecurityLog that might have been generated by a Domain Generation Algorithm (DGA). DGAs can be used
by malware to generate rendezvous points that are difficult to predict in advance. This detection uses the Alexa Top 1 million domain names to build a model
of what normal domains look like. It uses this to identify domains that may have been randomly generated by an algorithm.
The triThreshold is set to 500 - increase this to report on domains that are less likely to have been randomly generated, decrease it for more likely.
The start time and end time look back over 6 hours of data and the dgaLengthThreshold is set to 8 - meaning domains whose length is 8 or more are reported.'
",Medium,"[
    {
        ""connectorId"":  ""Zscaler"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""Barracuda"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CEF"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CheckPoint"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""F5"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""Fortinet"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    }
]","
let triThreshold = 500;
let startTime = 6h;
let dgaLengthThreshold = 8;
// fetch the alexa top 1M domains
let top1M =  (externaldata (Position:int, Domain:string)   [@""http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip""]  with (format=""csv"", zipPattern=""*.csv""));
// extract tri grams that are above our threshold - i.e. are common
let triBaseline =   top1M
| extend Domain = tolower(extract(""([^.]*).{0,7}$"", 1, Domain))
| extend AllTriGrams = array_concat(extract_all(""(...)"", Domain), extract_all(""(...)"", substring(Domain, 1)), extract_all(""(...)"", substring(Domain, 2)))
| mvexpand Trigram=AllTriGrams
| summarize triCount=count() by tostring(Trigram)
| sort by triCount desc
| where triCount > triThreshold
| distinct Trigram;
// collect domain information from common security log, filter and extract the DGA candidate and its trigrams
let allDataSummarized =   CommonSecurityLog
| where TimeGenerated > ago(startTime)
| where isnotempty(DestinationHostName)
| extend Name = tolower(DestinationHostName)
| distinct Name
| where Name has "".""
| where Name !endswith "".home"" and Name !endswith "".lan""
// extract DGA candidate
| extend DGADomain = extract(""([^.]*).{0,7}$"", 1, Name)
| where strlen(DGADomain) > dgaLengthThreshold
// throw out domains with number in them
| where DGADomain matches regex ""^[A-Za-z]{0,}$""
// extract the tri grams from summarized data
| extend AllTriGrams = array_concat(extract_all(""(...)"", DGADomain), extract_all(""(...)"", substring(DGADomain, 1)), extract_all(""(...)"", substring(DGADomain, 2)));
// throw out domains that have repeating tri's and/or >=3 repeating letters
let nonRepeatingTris =  allDataSummarized
| join kind=leftanti
(
    allDataSummarized
    | mvexpand AllTriGrams
    | summarize count() by tostring(AllTriGrams), DGADomain
    | where count_ > 1
    | distinct DGADomain
)
on DGADomain;
// find domains that do not have a common tri in the baseline
let dataWithRareTris =  nonRepeatingTris
| join kind=leftanti
(
    nonRepeatingTris
    | mvexpand AllTriGrams
    | extend Trigram = tostring(AllTriGrams)
    | distinct Trigram, DGADomain
    | join kind=inner
    (
        triBaseline
    )
    on Trigram
    | distinct DGADomain
)
on DGADomain;
dataWithRareTris
// join DGAs back on connection data
| join kind=inner
(
    CommonSecurityLog
    | where TimeGenerated > ago(startTime)
    | where isnotempty(DestinationHostName)
    | extend DestinationHostName = tolower(DestinationHostName)
    | project-rename Name=DestinationHostName, DataSource=DeviceVendor
    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SourceIP, DestinationIP, DataSource
)
on Name
| project StartTime, EndTime, Name, DGADomain, SourceIP, DestinationIP, DataSource
| extend timestamp=StartTime, IPCustomEntity=SourceIP
",partial
Palo Alto - potential beaconing detected,CommonSecurityLog,"'Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns. 
The query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing. 
This outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.
Reference Blog:
http://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/'
",Low,"{
    ""connectorId"":  ""PaloAltoNetworks"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let starttime = 2d;
let endtime = 1d;
let TimeDeltaThreshold = 10;
let TotalEventsThreshold = 15;
let PercentBeaconThreshold = 80;
let PrivateIPregex = @'^127\.|^10\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-1]\.|^192\.168\.';
CommonSecurityLog
| where DeviceVendor == ""Palo Alto Networks"" and Activity == ""TRAFFIC""
| where TimeGenerated between (ago(starttime)..ago(endtime))
| extend DestinationIPType = iff(DestinationIP matches regex PrivateIPregex,""private"" ,""public"" )
| where DestinationIPType == ""public""
| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes
| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc
| serialize
| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)
| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)
| where SourceIP == nextSourceIP
//Whitelisting criteria/ threshold criteria
| where TimeDeltainSeconds > TimeDeltaThreshold 
| project TimeGenerated, TimeDeltainSeconds, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes
| summarize count(), sum(ReceivedBytes), sum(SentBytes), make_list(TimeDeltainSeconds) 
by TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort
| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes) 
by bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort
| where TotalEvents > TotalEventsThreshold 
| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100
| where BeaconPercent > PercentBeaconThreshold
| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName 
",partial
Palo Alto - possible internal to external port scanning,CommonSecurityLog,"'Identifies a list of internal Source IPs (10.x.x.x Hosts) that have triggered 10 or more non-graceful tcp server resets from one or more Destination IPs which 
results in an ""ApplicationProtocol = incomplete"" designation. The server resets coupled with an ""Incomplete"" ApplicationProtocol designation can be an indication 
of internal to external port scanning or probing attack. 
References: https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK and
https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClTaCAK'
",Low,"{
    ""connectorId"":  ""PaloAltoNetworks"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let timeframe = 1h;
CommonSecurityLog 
| where TimeGenerated > ago(timeframe) 
| where isnotempty(DestinationPort) and DeviceAction !in (""reset-both"", ""deny"") 
// filter out common usage ports. Add ports that are legitimate for your environment
| where DestinationPort !in (""443"", ""53"", ""389"", ""80"", ""0"", ""880"", ""8888"", ""8080"")
| where ApplicationProtocol == ""incomplete"" 
// filter out IANA ephemeral or negotiated ports as per https://en.wikipedia.org/wiki/Ephemeral_port
| where DestinationPort !between (toint(49512) .. toint(65535)) 
| where Computer != """" 
| where DestinationIP !startswith ""10.""
// Filter out any graceful reset reasons of AGED OUT which occurs when a TCP session closes with a FIN due to aging out. 
| where AdditionalExtensions !has ""reason=aged-out"" 
// Filter out any TCP FIN which occurs when a TCP FIN is used to gracefully close half or both sides of a connection.
| where AdditionalExtensions !has ""reason=tcp-fin"" 
// Uncomment one of the following where clauses to trigger on specific TCP reset reasons
// See Palo Alto article for details - https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000ClUvCAK
// TCP RST-server - Occurs when the server sends a TCP reset to the client
// | where AdditionalExtensions has ""reason=tcp-rst-from-server""  
// TCP RST-client - Occurs when the client sends a TCP reset to the server
// | where AdditionalExtensions has ""reason=tcp-rst-from-client""  
| extend reason = tostring(split(AdditionalExtensions, "";"")[3])
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction, DestinationIP
| where count_ >= 10
| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), makeset(DestinationIP), totalcount = sum(count_) by DeviceName, SourceUserID, SourceIP, ApplicationProtocol, reason, DestinationPort, Protocol, DeviceVendor, DeviceProduct, DeviceAction
| extend timestamp = StartTimeUtc, IPCustomEntity = SourceIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName 
",partial
Time series anomaly detection for total volume of traffic,CommonSecurityLog,"'Identifies anamalous spikes in network traffic logs as compared to baseline or normal historical patterns. 
The query leverages a KQL built-in anomaly detection algorithm to find large deviations from baseline patterns. 
Sudden increases in network traffic volume may be an indication of data exfiltration attempts and should be investigated.
The higher the score, the further it is from the baseline value.
The output is aggregated to provide summary view of unique source IP to destination IP address and port traffic observed in the flagged anomaly hour. 
The source IP addresses which were sending less than percentotalthreshold of the total traffic have been exluded whose value can be adjusted as needed .
You may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious'
",Medium,"[
    {
        ""connectorId"":  ""Barracuda"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CEF"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CheckPoint"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""F5"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""Fortinet"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    }
]","
let starttime = 14d;
let endtime = 1d;
let timeframe = 1h;
let scorethreshold = 5;
let percentotalthreshold = 25;
let TimeSeriesData = CommonSecurityLog 
| where isnotempty(DestinationIP) and isnotempty(SourceIP)
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))
| project TimeGenerated,SourceIP, DestinationIP, DeviceVendor
| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor;
//Filtering specific records associated with spikes as outliers
let TimeSeriesAlerts=TimeSeriesData
| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')
| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)
| where anomalies > 0 | extend score = round(score,2), AnomalyHour = TimeGenerated
| project DeviceVendor,AnomalyHour, TimeGenerated, Total, baseline, anomalies, score;
//Join anomalies with Base Data to popalate associated records for investigation - Results sorted by score in descending order 
TimeSeriesAlerts 
| join (
    CommonSecurityLog 
| where isnotempty(DestinationIP) and isnotempty(SourceIP)
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))
| summarize HourlyCount = count(), TimeGeneratedMax = arg_max(TimeGenerated, *), DestinationIPlist = make_set(DestinationIP), DestinationPortlist = make_set(DestinationPort) by DeviceVendor, SourceIP, TimeGeneratedHour= bin(TimeGenerated, 1h)
| extend AnomalyHour = TimeGeneratedHour
) on AnomalyHour, DeviceVendor 
| extend PercentTotal = round((HourlyCount / Total) * 100, 3)
| where PercentTotal > percentotalthreshold
| project DeviceVendor , AnomalyHour, TimeGeneratedMax, SourceIP, DestinationIPlist, DestinationPortlist, HourlyCount, PercentTotal, Total, baseline, score, anomalies
| summarize HourlyCount=sum(HourlyCount), StartTimeUtc=min(TimeGeneratedMax), EndTimeUtc=max(TimeGeneratedMax), SourceIPlist = make_set(SourceIP), SourceIPMax= arg_max(SourceIP, *), DestinationIPlist = make_set(DestinationIPlist), DestinationPortlist = make_set(DestinationPortlist) by DeviceVendor , AnomalyHour, Total, baseline, score, anomalies
| project DeviceVendor , AnomalyHour, EndTimeUtc, SourceIPMax ,SourceIPlist, DestinationIPlist, DestinationPortlist, HourlyCount, Total, baseline, score, anomalies
| extend timestamp= EndTimeUtc , IPCustomEntity = SourceIPMax
",partial
Wazuh - Large Number of Web errors from an IP,CommonSecurityLog,"'Identifies instances where Wazuh logged over 400 '403' Web Errors from one IP Address. To onboard Wazuh data into Sentinel please view: https://github.com/wazuh/wazuh-documentation/blob/master/source/azure/monitoring%20activity.rst'
",Low,"{
    ""connectorid"":  ""CommonSecurityLog"",
    ""datatypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let incidentTime = ago(1d);
CommonSecurityLog
| where TimeGenerated > incidentTime
| where DeviceProduct =~ ""Wazuh""
| where Activity has ""Web server 400 error code.""
| where Message has ""403""
| extend HostName=substring(split(DeviceCustomString1,"")"")[0],1)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumberOfErrors = count(SourceIP) by HostName, SourceIP
| where NumberOfErrors > 400
| sort by NumberOfErrors desc
| extend timestamp = StartTime, HostCustomEntity = HostName, IPCustomEntity = SourceIP
",partial
Request for single resource on domain,CommonSecurityLog,"'This will look for connections to a domain where only a single file is requested, this is unusual as most modern web applications require additional recources. This type of activity is often assocaited with malware beaconing or tracking URL's delivered in emails. Developed for Zscaler but applicable to any outbound web logging.'
",Low,"{
    ""connectorId"":  ""Zscaler"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let timeRange = 1d;
//The number of URI's seen to be suspicious, higher = less likely to be suspicious
let uriThreshold = 1;
let suspiciousURLs =
CommonSecurityLog
| where TimeGenerated >= ago(timeRange)
// Only look at connections that were allowed through the web proxy. Comment line out for all events including those which were blocked
| where DeviceVendor =~ ""Zscaler"" and DeviceAction =~ ""Allowed""
// Only look where some data was exchanged. Comment out to see 0 byte connections
| where SentBytes > 0 and ReceivedBytes > 0
// Extract the Domain
| extend Domain = iff(countof(DestinationHostName,'.') >= 2, strcat(split(DestinationHostName,'.')[-2], '.',split(DestinationHostName,'.')[-1]), DestinationHostName)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makelist(RequestURL), makelist(DestinationIP), makelist(SourceIP), numOfConnections = count() by Domain
// Determine the number of URIs that have been visited for the domain
| extend destinationURI = arraylength(list_RequestURL)
| where destinationURI <= uriThreshold
| where tostring(list_RequestURL) has_any ("".php"","".aspx"")
;
suspiciousURLs
| mvexpand list_RequestURL, list_DestinationIP
| extend RequestURL = tostring(list_RequestURL), DestinationIP = tostring(list_DestinationIP), ClientIP = tostring(list_SourceIP)
| extend timestamp = StartTimeUtc, IPCustomEntity = DestinationIP
| project-away list_RequestURL, list_DestinationIP, list_SourceIP, destinationURI, Domain, StartTimeUtc, EndTimeUtc, numOfConnections 
",partial
Potential DGA detected,DnsEvents,"'Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains
where most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with 
NXDomain records in prior 10-day baseline period).'
",Medium,"{
    ""connectorId"":  ""DNS"",
    ""dataTypes"":  [
                      ""DnsEvents""
                  ]
}","
let starttime = 10d;
let endtime = 1d;
let threshold = 100;
let nxDomainDnsEvents = DnsEvents 
| where ResultCode == 3 
| where QueryType in (""A"", ""AAAA"")
| where ipv4_is_match(""127.0.0.1"", ClientIP) == False
| where Name !contains ""/""
| where Name contains ""."";
nxDomainDnsEvents
| where TimeGenerated > ago(endtime)
| extend sld = tostring(split(Name, ""."")[-2])
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(sld) by ClientIP
| where dcount_sld > threshold
// Filter out previously seen IPs
| join kind=leftanti (nxDomainDnsEvents
    | where TimeGenerated between(ago(starttime)..ago(endtime))
    | extend sld = tostring(split(Name, ""."")[-2])
    | summarize dcount(sld) by ClientIP
    | where dcount_sld > threshold ) on ClientIP
// Pull out sample NXDomain responses for those remaining potentially infected IPs
| join kind = inner (nxDomainDnsEvents | summarize by Name, ClientIP) on ClientIP
| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), sampleNXDomainList=make_list(Name, 100)  by ClientIP, dcount_sld
| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP
",no
Rare client observed with high reverse DNS lookup count,DnsEvents,"'Identifies clients with a high reverse DNS counts which could be carrying out reconnaissance or discovery activity.
Alert is generated if the IP performing such reverse DNS lookups was not seen doing so in the preceding 7-day period.'
",Medium,"{
    ""connectorId"":  ""DNS"",
    ""dataTypes"":  [
                      ""DnsEvents""
                  ]
}","
let starttime = 8d;
let endtime = 1d;
let threshold = 10;
DnsEvents 
| where TimeGenerated > ago(endtime)
| where Name contains ""in-addr.arpa"" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(Name) by ClientIP
| where dcount_Name > threshold
| project StartTimeUtc, EndTimeUtc, ClientIP , dcount_Name 
| join kind=leftanti (DnsEvents 
    | where TimeGenerated between(ago(starttime)..ago(endtime))
    | where Name contains ""in-addr.arpa"" 
    | summarize dcount(Name) by ClientIP, bin(TimeGenerated, 1d)
    | where dcount_Name > threshold
    | project ClientIP , dcount_Name 
) on ClientIP
| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP
",no
DNS events related to mining pools,DnsEvents,"'Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.'
",Low,"{
    ""connectorId"":  ""DNS"",
    ""dataTypes"":  [
                      ""DnsEvents""
                  ]
}","
let timeframe = 1d;
DnsEvents
| where TimeGenerated > ago(timeframe)
| where Name contains "".""
| where Name has_any (""monerohash.com"", ""do-dear.com"", ""xmrminerpro.com"", ""secumine.net"", ""xmrpool.com"", ""minexmr.org"", ""hashanywhere.com"", 
""xmrget.com"", ""mininglottery.eu"", ""minergate.com"", ""moriaxmr.com"", ""multipooler.com"", ""moneropools.com"", ""xmrpool.eu"", ""coolmining.club"", 
""supportxmr.com"", ""minexmr.com"", ""hashvault.pro"", ""xmrpool.net"", ""crypto-pool.fr"", ""xmr.pt"", ""miner.rocks"", ""walpool.com"", ""herominers.com"", 
""gntl.co.uk"", ""semipool.com"", ""coinfoundry.org"", ""cryptoknight.cc"", ""fairhash.org"", ""baikalmine.com"", ""tubepool.xyz"", ""fairpool.xyz"", ""asiapool.io"", 
""coinpoolit.webhop.me"", ""nanopool.org"", ""moneropool.com"", ""miner.center"", ""prohash.net"", ""poolto.be"", ""cryptoescrow.eu"", ""monerominers.net"", ""cryptonotepool.org"", 
""extrmepool.org"", ""webcoin.me"", ""kippo.eu"", ""hashinvest.ws"", ""monero.farm"", ""supportxmr.com"", ""xmrpool.eu"", ""linux-repository-updates.com"", ""1gh.com"", 
""dwarfpool.com"", ""hash-to-coins.com"", ""hashvault.pro"", ""pool-proxy.com"", ""hashfor.cash"", ""fairpool.cloud"", ""litecoinpool.org"", ""mineshaft.ml"", ""abcxyz.stream"", 
""moneropool.ru"", ""cryptonotepool.org.uk"", ""extremepool.org"", ""extremehash.com"", ""hashinvest.net"", ""unipool.pro"", ""crypto-pools.org"", ""monero.net"", 
""backup-pool.com"", ""mooo.com"", ""freeyy.me"", ""cryptonight.net"", ""shscrypto.net"")
| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer
",no
DNS events related to ToR proxies,DnsEvents,"'Identifies IP addresses performing DNS lookups associated with common ToR proxies.'
",Low,"{
    ""connectorId"":  ""DNS"",
    ""dataTypes"":  [
                      ""DnsEvents""
                  ]
}","
let timeframe = 1d;
DnsEvents
| where TimeGenerated > ago(timeframe)
| where Name contains "".""
| where Name has_any (""tor2web.org"", ""tor2web.com"", ""torlink.co"", ""onion.to"", ""onion.ink"", ""onion.cab"", ""onion.nu"", ""onion.link"", 
""onion.it"", ""onion.city"", ""onion.direct"", ""onion.top"", ""onion.casa"", ""onion.plus"", ""onion.rip"", ""onion.dog"", ""tor2web.fi"", 
""tor2web.blutmagie.de"", ""onion.sh"", ""onion.lu"", ""onion.pet"", ""t2w.pw"", ""tor2web.ae.org"", ""tor2web.io"", ""tor2web.xyz"", ""onion.lt"", 
""s1.tor-gateways.de"", ""s2.tor-gateways.de"", ""s3.tor-gateways.de"", ""s4.tor-gateways.de"", ""s5.tor-gateways.de"", ""hiddenservice.net"")
| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer
",no
Web sites blocked by Eset,EsetSMC,"'Create alert on web sites blocked by Eset.'
",Low,"{
    ""connectorId"":  ""EsetSMC"",
    ""dataTypes"":  [
                      ""eset_CL""
                  ]
}","eset_CL
| where event_type_s == 'FilteredWebsites_Event'
| extend AccountCustomEntity = username_s, URLCustomEntity = object_uri_s, HostCustomEntity = hostname_s, IPCustomEntity = ipv4_s
",no
Threats detected by Eset,EsetSMC,"'Escalates threats detected by Eset.'
",Low,"{
    ""connectorId"":  ""EsetSMC"",
    ""dataTypes"":  [
                      ""eset_CL""
                  ]
}","eset_CL
| where event_type_s == ""Threat_Event""
| extend HostCustomEntity = hostname_s, AccountCustomEntity = username_s, IPCustomEntity = ipv4_s
",no
GitHub Activites from a New Country,GitHub,"'Detect activities from a location that was not recently or was never visited by the user or by any user in your organization.'
",Medium,"{
    ""connectorid"":  ""GitHub"",
    ""datatypes"":  [
                      ""GitHub""
                  ]
}","
let LearningPeriod = 7d;
let RunTime = 1h;
let StartTime = 1h;
let EndRunTime = StartTime - RunTime;
let EndLearningTime = StartTime + LearningPeriod;
let GitHubCountryCodeLogs = (GitHubAudit
| where Country != """");
  GitHubCountryCodeLogs
| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime))
| summarize makeset(Country) by Actor
| join kind=innerunique (
  GitHubCountryCodeLogs
  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime))
  | distinct Country, Actor 
) on Actor 
| where set_Country !contains Country
//| extend AccountCustomEntity = Actor, IPCustomEntity = IPaddress
",no
GitHub Security Vulnerability in Repository,GitHub,"'This alerts when there is a new security vulnerability in a GitHub repository.'
",Informational,"{
    ""connectorid"":  ""GitHub"",
    ""datatypes"":  [
                      ""GitHub""
                  ]
}","
let timeframe = 14d;
GitHubRepo
| where TimeGenerated > ago(timeframe)
| where Action == ""vulnerabilityAlert""
| project TimeGenerated, DismmisedAt, Reason, vulnerableManifestFilename, Description, Link, PublishedAt, Severity, Summary
",no
TI map IP entity to GitHub_CL,GitHub,"'Identifies a match in GitHub_CL table from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(24h)
| where Action == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
  GitHubAudit
  | where TimeGenerated >= ago(24h)
  | extend GitHubAudit_TimeGenerated = TimeGenerated
)
on on $left.TI_ipEntity == $right.IPaddress
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, GitHubAudit_TimeGenerated, TI_ipEntity, IPaddress, Actor, Action, Country, OperationType, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = GitHubAudit_TimeGenerated, IPCustomEntity = IPaddress, AccountCustomEntity = Actor
",no
GitHub Two Factor Auth Disable,GitHub,"'Two-factor authentication is a process where a user is prompted during the sign-in process for an additional form of identification, such as to enter a code on their cellphone or to provide a fingerprint scan. Two factor authentication reduces the risk of account takeover. Attacker will want to disable such security tools in order to go undetected. '
",Medium,"{
    ""connectorid"":  ""GitHub"",
    ""datatypes"":  [
                      ""GitHub""
                  ]
}","
let timeframe = 14d;
GitHubAudit
| where TimeGenerated > ago(timeframe)
| where Action == ""org.disable_two_factor_requirement""
| project TimeGenerated, Action, Actor, Country, IPaddress, Repository
| extend AccountCustomEntity = Actor, IPCustomEntity = IPaddress
",no
Excessive NXDOMAIN DNS Queries,InfobloxNIOS,"'This creates an incident in the event a client generates excessive amounts of DNS queries for non-existent domains.'
",Medium,"{
    ""connectorId"":  ""InfobloxNIOS"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = 1h;
let threshold = 200;
InfobloxNIOS
| where TimeGenerated >= ago(timeframe)
| where ProcessName =~ ""named"" and Log_Type =~ ""client""
| where isnotempty(ResponseCode)
| where ResponseCode =~ ""NXDOMAIN""
| summarize count() by Client_IP, bin(TimeGenerated,15m)
| where count_ > threshold
| join kind=inner (InfobloxNIOS
    | where TimeGenerated >= ago(timeframe)
    | where ProcessName =~ ""named"" and Log_Type =~ ""client""
    | where isnotempty(ResponseCode)
    | where ResponseCode =~ ""NXDOMAIN""
    ) on Client_IP
| extend timestamp = TimeGenerated, IPCustomEntity = Client_IP
",no
Potential DHCP Starvation Attack,InfobloxNIOS,"'This creates an incident in the event that an excessive amount of DHCPREQUEST have been recieved by a DHCP Server and could potentially be an indication of a DHCP Starvation Attack.'
",Medium,"{
    ""connectorId"":  ""InfobloxNIOS"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = 1h;
let threshold = 1000;
InfobloxNIOS
| where TimeGenerated >= ago(timeframe)
| where ProcessName =~ ""dhcpd"" and Log_Type =~ ""DHCPREQUEST""
| summarize count() by ServerIP, bin(TimeGenerated,5m)
| where count_ > threshold
| join kind=inner (InfobloxNIOS
    | where ProcessName =~ ""dhcpd"" and Log_Type =~ ""DHCPREQUEST""
    | where TimeGenerated >= ago(timeframe)
    ) on ServerIP
| extend timestamp = TimeGenerated, IPCustomEntity = ServerIP
",no
Failed AzureAD logons but success logon to AWS Console,MultipleDataSources,"'Identifies a list of IP addresses with a minimum number(defualt of 5) of failed logon attempts to Azure Active Directory.
Uses that list to identify any successful AWS Console logons from these IPs within the same timeframe.'
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    }
]","
//Adjust this threshold to fit your environment
let signin_threshold = 5; 
//Make a list of IPs with AAD signin failures above our threshold
let Suspicious_signins = 
SigninLogs
| where TimeGenerated >= ago(1d)
| where ResultType !in (""0"", ""50125"", ""50140"")
| where IPAddress != ""127.0.0.1""
| summarize count() by IPAddress
| where count_ >  signin_threshold
| summarize make_list(IPAddress);
//See if any of those IPs have sucessfully logged into the AWS console
AWSCloudTrail
| where TimeGenerated > ago(1d)
| where EventName =~ ""ConsoleLogin""
| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin) 
| where LoginResult =~ ""Success""
| where SourceIpAddress in (Suspicious_signins)
| extend Reason = ""Multiple failed AAD logins from IP address""
| extend MFAUsed = tostring(parse_json(AdditionalEventData).MFAUsed)
| extend User = iif(isempty(UserIdentityUserName), UserIdentityType, UserIdentityUserName) 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by Reason, LoginResult, EventTypeName, UserIdentityType, User, AWSRegion, SourceIpAddress, UserAgent, MFAUsed
| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = SourceIpAddress
",no
Failed AzureAD logons but success logon to host,MultipleDataSources,"'Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.
Uses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.'
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    },
    {
        ""connectorId"":  ""Syslog"",
        ""dataTypes"":  [
                          ""Syslog""
                      ]
    }
]","
let timeframe = 1d;
//Adjust this threshold to fit the environment
let signin_threshold = 5;
//Make a list of all IPs with failed signins to AAD above our threshold
let suspicious_signins =
SigninLogs
| where TimeGenerated >= ago(timeframe)
| where ResultType !in (""0"", ""50125"", ""50140"")
| where IPAddress != ""127.0.0.1""
| summarize count() by IPAddress
| where count_ > signin_threshold
| summarize make_list(IPAddress);
//See if any of these IPs have sucessfully logged into *nix hosts
let linux_logons =
Syslog
| where TimeGenerated >= ago(timeframe)
| where Facility contains ""auth"" and ProcessName != ""sudo""
| where SyslogMessage has ""Accepted""
| extend SourceIP = extract(""(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))"",1,SyslogMessage)
| where SourceIP in (suspicious_signins)
| extend Reason = ""Multiple failed AAD logins from IP address""
| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;
//See if any of these IPs have sucessfully logged into Windows hosts
let win_logons =
SecurityEvent
| where TimeGenerated >= ago(timeframe)
| where EventID == 4624
| where LogonType in (10, 7, 3)
| where IpAddress != ""-""
| where IpAddress in (suspicious_signins)
| extend Reason = ""Multiple failed AAD logins from IP address""
| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, Reason;
union isfuzzy=true linux_logons,win_logons
| extend timestamp = TimeGenerated, AccountCustomEntity = Account, IPCustomEntity = IpAddress, HostCustomEntity = Computer
",yes
IP with multiple failed Azure AD logins successfully logs in to Palo Alto VPN,MultipleDataSources,"This query creates a list of IP addresses with a number failed login attempts to AAD 
above a set threshold.  It then looks for any successful Palo Alto VPN logins from any
of these IPs within the same timeframe.
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    }
]","let timeframe = 1d;
//Set a threshold of failed AAD signins from an IP address within 1 day above which we want to deem those logins suspicious.
let signin_threshold = 5; 
//Make a list of IPs with AAD signin failures above our threshold.
let suspicious_signins = 
    SigninLogs
    | where TimeGenerated >= ago(timeframe)
    //Looking for logon failure results
    | where ResultType !in (""0"", ""50125"", ""50140"")
    //Exclude localhost addresses to reduce the chance of FPs
    | where IPAddress != ""127.0.0.1""
    | summarize count() by IPAddress
    | where count_ >  signin_threshold
    | summarize make_list(IPAddress);
//See if any of those IPs have sucessfully logged into PA VPNs during the same timeperiod
CommonSecurityLog
    | where TimeGenerated > ago(timeframe)
    //Select only PA VPN sucessful logons
    | where DeviceVendor == ""Palo Alto Networks"" and DeviceEventClassID == ""globalprotect""
    | where Message has ""GlobalProtect gateway user authentication succeeded""
    //Parse out the logon source IP from the Message field to match on
    | extend SourceIP = extract(""Login from: ([^,]+)"", 1, Message) 
    | where SourceIP in (suspicious_signins)
    | extend Reason = ""Multiple failed AAD logins from SourceIP""
    //Parse out other useful information from Message field
    | extend User = extract(""User name: ([^,]+)"", 1, Message) 
    | extend ClientOS = extract(""Client OS version: ([^,\""]+)"", 1, Message)
    | extend Location = extract(""Source region: ([^,]{2})"",1, Message)
    | project TimeGenerated, Reason, SourceIP, User, ClientOS, Location, Message, DeviceName, ReceiptTime, DeviceVendor, DeviceEventClassID, Computer, FileName
    | extend AccountCustomEntity = User, IPCustomEntity = SourceIP, timestamp = TimeGenerated, HostCustomEntity = DeviceName 
",partial
Anomalous login followed by Teams action,MultipleDataSources,"'Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed.
Query calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP.
To further reduce results the query performs a prevalence check on the lowest used IP's country, only keeping IP's where the country is unusual for the tenant (dynamic ranges)
Finally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active.'
",Low,"[
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    },
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    }
]","
//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.
let timeRange = 30d;
//The minimum number of countries that the account has been accessed from [default: 2]
let minimumCountries = 2;
//The delta (%) between the largest in-use IP and the smallest [default: 90]
let deltaThreshold = 95;
//The maximum (%) threshold that the country appears in login data [default: 10]
let countryPrevalenceThreshold = 10;
//The time to project forward after the last login activity [default: 60min]
let projectedEndTime = 60min; 
//Get Teams successful signins globally
let signinData =
  SigninLogs
  | where TimeGenerated >= ago(timeRange)
  | where AppDisplayName has ""Teams""
  | where ConditionalAccessStatus =~ ""success""
  | extend country = tostring(LocationDetails['countryOrRegion'])
  | where isnotempty(country) and isnotempty(IPAddress);
// Collect successful signins to teams
let loginEvents = 
  signinData
  | summarize count(), country=any(country), make_list(TimeGenerated) by IPAddress, UserPrincipalName;
//Calcualte delta between logins
let loginDelta =
  loginEvents
  | summarize max(count_), min(count_) by UserPrincipalName
  | extend delta = toreal(max_count_ - min_count_) / max_count_ * 100
  | where delta >= deltaThreshold;
//Count number of countries used to sign in
let countryCount =
  loginEvents
  | summarize Countries = dcount(country) by UserPrincipalName;
//Join delta and sign in counts to successful logins
loginDelta
| join kind=rightouter  (
  loginEvents
) on UserPrincipalName
| join kind=rightouter (
  countryCount
) on UserPrincipalName
//Check where the record meets the minimum required countries
| where Countries >= minimumCountries
| join kind=leftouter (
      signinData
      | summarize count() by country
      | join (
          //Now get the total number of logins from any country and join it to the previous count in a single table
          signinData
          | summarize count() by country
          | summarize sum(count_), make_list(country)
          | mv-expand list_country
          | extend country = tostring(list_country)
      ) on country
      | summarize by country, count_, sum_count_
      //Now calculate each countries prevalence within login events
      | extend prevalence = toreal(count_) / toreal(sum_count_) * 100
      | project-away sum_count_
      | order by prevalence
) on country
//The % that suspicious country is prevalent in data, this can be configured, less than 10% is uncommon
| where prevalence < countryPrevalenceThreshold
| where min_count_ == count_
//Login start and end times from the JSON object, this is the activity window the suspicious IP was active within
| extend EventTimes = list_TimeGenerated
| extend SuspiciousIP = IPAddress
| project UserPrincipalName, SuspiciousIP, UserIPDelta = delta, SuspiciousLoginCountry = country, SuspiciousCountryPrevalence = prevalence, EventTimes
//Teams join to collect operations the user account has performed within the given time range
| join kind=inner( 
  TeamsData 
  | where TimeGenerated >= ago(timeRange)
  | where Operation in~ (""TeamsAdminAction"", ""MemberAdded"", ""MemberRemoved"", ""MemberRoleChanged"", ""AppInstalled"", ""BotAddedToTeam"")
  | project Operation, UserId=tolower(UserId), OperationTime=TimeGenerated
) on $left.UserPrincipalName == $right.UserId
| mv-expand StartTime = EventTimes
| extend StartTime = make_datetime(StartTime)
//The end time is projected 60 minutes forward, in case actions took place within the last hour of the final login for the suspicious IP
| extend ProjectedEndTime = make_datetime(StartTime + projectedEndTime)
//Limit to operations carried out by the user account in the timeframe the IP was active
| where OperationTime between (StartTime .. ProjectedEndTime)
| project UserPrincipalName, SuspiciousIP, StartTime, ProjectedEndTime, OperationTime, Operation, SuspiciousLoginCountry, SuspiciousCountryPrevalence
//Filter on suspicious actions
| extend activitySummary = pack(tostring(StartTime), pack(""Operation"",tostring(Operation), ""OperationTime"", OperationTime))
| summarize make_bag(activitySummary) by UserPrincipalName, SuspiciousIP, SuspiciousLoginCountry, SuspiciousCountryPrevalence
| extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName
",no
Failed AWS Console logons but success logon to AzureAD,MultipleDataSources,"'Identifies a list of IP addresses with a minimum numbe(default of 5) of failed logon attempts to AWS Console.
Uses that list to identify any successful Azure Active Directory logons from these IPs within the same timeframe.'
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    }
]","
//Adjust this threshold to fit environment
let  signin_threshold = 5; 
//Make a list of IPs with failed AWS console logins
let aws_fails = AWSCloudTrail
| where TimeGenerated >= ago(1d)
| where EventName == ""ConsoleLogin""
| extend LoginResult = tostring(parse_json(ResponseElements).ConsoleLogin) 
| where LoginResult == ""Success""
| where SourceIpAddress != ""127.0.0.1""
| summarize count() by SourceIpAddress
| where count_ >  signin_threshold
| summarize make_list(SourceIpAddress);
//See if any of those IPs have sucessfully logged into Azure AD.
SigninLogs
| where TimeGenerated >= ago(1d)
| where ResultType !in (""0"", ""50125"", ""50140"")
| where IPAddress in (aws_fails) 
| extend Reason = ""Multiple failed AWS Console logins from IP address""
| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",no
Known GALLIUM domains and hashes,MultipleDataSources,"'GALLIUM command and control domains and hash values for tools and malware used by GALLIUM. 
 Matches domain name IOCs related to the GALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.
 References: https://www.microsoft.com/security/blog/2019/12/12/gallium-targeting-global-telecom/ '
",High,"[
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    }
]","let timeframe = 1d;
let DomainNames = dynamic([""asyspy256.ddns.net"",""hotkillmail9sddcc.ddns.net"",""rosaf112.ddns.net"",""cvdfhjh1231.myftp.biz"",""sz2016rose.ddns.net"",""dffwescwer4325.myftp.biz"",""cvdfhjh1231.ddns.net""]);
let SHA1Hash = dynamic ([""53a44c2396d15c3a03723fa5e5db54cafd527635"", ""9c5e496921e3bc882dc40694f1dcc3746a75db19"", ""aeb573accfd95758550cf30bf04f389a92922844"", ""79ef78a797403a4ed1a616c68e07fff868a8650a"", ""4f6f38b4cec35e895d91c052b1f5a83d665c2196"", ""1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d"", ""e841a63e47361a572db9a7334af459ddca11347a"", ""c28f606df28a9bc8df75a4d5e5837fc5522dd34d"", ""2e94b305d6812a9f96e6781c888e48c7fb157b6b"", ""dd44133716b8a241957b912fa6a02efde3ce3025"", ""8793bf166cb89eb55f0593404e4e933ab605e803"", ""a39b57032dbb2335499a51e13470a7cd5d86b138"", ""41cc2b15c662bc001c0eb92f6cc222934f0beeea"", ""d209430d6af54792371174e70e27dd11d3def7a7"", ""1c6452026c56efd2c94cea7e0f671eb55515edb0"", ""c6b41d3afdcdcaf9f442bbe772f5da871801fd5a"", ""4923d460e22fbbf165bbbaba168e5a46b8157d9f"", ""f201504bd96e81d0d350c3a8332593ee1c9e09de"", ""ddd2db1127632a2a52943a2fe516a2e7d05d70d2""]);
let SHA256Hash = dynamic ([""9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd"", ""7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b"", ""657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5"", ""2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29"", ""52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77"", ""a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3"", ""5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022"", ""6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883"", ""3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e"", ""1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7"", ""fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1"", ""7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c"", ""178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945"", ""51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9"", ""889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79"", ""332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf"", ""44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08"", ""63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef"", ""056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070""]);
let SigNames = dynamic([""TrojanDropper:Win32/BlackMould.A!dha"", ""Trojan:Win32/BlackMould.B!dha"", ""Trojan:Win32/QuarkBandit.A!dha"", ""Trojan:Win32/Sidelod.A!dha""]);
(union isfuzzy=true
(CommonSecurityLog 
| where TimeGenerated >= ago(timeframe) 
| parse Message with * '(' DNSName ')' * 
| where isnotempty(FileHash)
| where FileHash in (SHA256Hash) or DNSName in~ (DomainNames)
| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP
),
(DnsEvents 
| where TimeGenerated >= ago(timeframe) 
| extend DNSName = Name
| where isnotempty(DNSName)
| where DNSName  in~ (DomainNames)
| extend IPAddress = ClientIP
),
(VMConnection 
| where TimeGenerated >= ago(timeframe) 
| parse RemoteDnsCanonicalNames with * '[""' DNSName '""]' *
| where isnotempty(DNSName)
| where DNSName  in~ (DomainNames)
| extend IPAddress = RemoteIp
),
(Event
//This query uses sysmon data depending on table name used this may need updataing
| where TimeGenerated >= ago(3d)
| where Source == ""Microsoft-Windows-Sysmon""
| extend EvData = parse_xml(EventData)
| extend EventDetail = EvData.DataItem.EventData.Data
| extend Hashes = EventDetail.[16].[""#text""]
| parse Hashes with * 'SHA1=' SHA1 ',' * 
| where isnotempty(Hashes)
| where Hashes in (SHA1Hash) 
| extend Account = UserName
),
(SecurityAlert
| where TimeGenerated >= ago(timeframe)
| where Entities has_any (SigNames)
| extend Computer = tostring(parse_json(Entities)[0].HostName) 
)
)
| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress
",no
Failed host logons but success logon to AzureAD,MultipleDataSources,"'Identifies a list of IP addresses with a minimum number(default of 5) of failed logon attempts to remote hosts.
Uses that list to identify any successful logons to Azure Active Directory from these IPs within the same timeframe.'
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    },
    {
        ""connectorId"":  ""Syslog"",
        ""dataTypes"":  [
                          ""Syslog""
                      ]
    }
]","
let timeframe = 1d;
//Adjust this threshold to fit environment
let signin_threshold = 5; 
//Make a list of IPs with failed Windows host logins above threshold
let win_fails = 
SecurityEvent
| where TimeGenerated >= ago(timeframe)
| where EventID == 4625
| where LogonType in (10, 7, 3)
| where IpAddress != ""-""
| summarize count() by IpAddress
| where count_ > signin_threshold
| summarize make_list(IpAddress);
//Make a list of IPs with failed *nix host logins above threshold
let nix_fails = 
Syslog
| where TimeGenerated > ago(timeframe)
| where Facility contains 'auth' and ProcessName != 'sudo'
| extend SourceIP = extract(""(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))"",1,SyslogMessage)
| where SourceIP != """" and SourceIP != ""127.0.0.1""
| summarize count() by SourceIP
| where count_ > signin_threshold
| summarize make_list(SourceIP);
//See if any of the IPs with failed host logins hve had a sucessful Azure AD login
SigninLogs
| where TimeGenerated > ago(timeframe)
| where ResultType !in (""0"", ""50125"", ""50140"")
| where IPAddress in (win_fails) or IPAddress in (nix_fails)
| extend Reason=  ""Multiple failed host logins from IP address with successful Azure AD login""
| extend timstamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",yes
Known IRIDIUM IP,MultipleDataSources,"'IRIDIUM command and control IP. Identifies a match across various data feeds for IP IOCs related to the IRIDIUM activity group.'
",High,"[
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    },
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    },
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(WireData)"",
        ""dataTypes"":  [
                          ""WireData""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(IIS)"",
        ""dataTypes"":  [
                          ""W3CIISLog""
                      ]
    },
    {
        ""connectorId"":  ""AzureActivity"",
        ""dataTypes"":  [
                          ""AzureActivity""
                      ]
    },
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    }
]","
let timeframe = 1d;
let IPList = dynamic([""154.223.45.38"",""185.141.207.140"",""185.234.73.19"",""216.245.210.106"",""51.91.48.210"",""46.255.230.229""]);
(union isfuzzy=true
(CommonSecurityLog
| where TimeGenerated >= ago(timeframe) 
| where isnotempty(SourceIP) or isnotempty(DestinationIP)
| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)
| extend IPMatch = case(SourceIP in (IPList), ""SourceIP"", DestinationIP in (IPList), ""DestinationIP"", ""Message"") 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch
| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIP, IPMatch == ""DestinationIP"", DestinationIP, ""IP in Message Field"") 
),
(OfficeActivity
| where TimeGenerated >= ago(timeframe) 
|extend SourceIPAddress = ClientIP, Account = UserId
| where  SourceIPAddress in (IPList)
| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account
),
(DnsEvents 
| where TimeGenerated >= ago(timeframe) 
| extend DestinationIPAddress = IPAddresses,  Host = Computer
| where  DestinationIPAddress has_any (IPList) 
| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host
),
(VMConnection 
| where TimeGenerated >= ago(timeframe) 
| where isnotempty(SourceIp) or isnotempty(DestinationIp) 
| where SourceIp in (IPList) or DestinationIp in (IPList) 
| extend IPMatch = case( SourceIp in (IPList), ""SourceIP"", DestinationIp in (IPList), ""DestinationIP"", ""None"") 
| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIp, IPMatch == ""DestinationIP"", DestinationIp, ""None""), Host = Computer
),
(Event
| where TimeGenerated >= ago(timeframe)
| where Source == ""Microsoft-Windows-Sysmon""
| where EventID == 3
| extend EvData = parse_xml(EventData)
| extend EventDetail = EvData.DataItem.EventData.Data
| extend SourceIP = EventDetail.[9].[""#text""], DestinationIP = EventDetail.[14].[""#text""]
| where SourceIP in (IPList) or DestinationIP in (IPList) 
| extend IPMatch = case( SourceIP in (IPList), ""SourceIP"", DestinationIP in (IPList), ""DestinationIP"", ""None"") 
| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIP, IPMatch == ""DestinationIP"", DestinationIP, ""None"")
), 
(WireData 
| where TimeGenerated >= ago(timeframe)
| where isnotempty(RemoteIP)
| where RemoteIP in (IPList)
| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer
),
(SigninLogs
| where TimeGenerated >= ago(timeframe)
| where isnotempty(IPAddress)
| where IPAddress in (IPList)
| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
),
(W3CIISLog 
| where TimeGenerated >= ago(timeframe)
| where isnotempty(cIP)
| where cIP in (IPList)
| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName
),
(AzureActivity 
| where TimeGenerated >= ago(timeframe)
| where isnotempty(CallerIpAddress)
| where CallerIpAddress in (IPList)
| extend timestamp = TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller
),
(
AWSCloudTrail
| where TimeGenerated >= ago(timeframe)
| where isnotempty(SourceIpAddress)
| where SourceIpAddress in (IPList)
| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName
)
)
",no
Malformed user agent,MultipleDataSources,"'Malware authors will sometimes hardcode user agent string values when writing the network communication component of their malware.
Malformed user agents can be an indication of such malware.'
",Medium,"[
    {
        ""connectorId"":  ""WAF"",
        ""dataTypes"":  [
                          ""AzureDiagnostics""
                      ]
    },
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    }
]","
let endtime = 1d;
(union isfuzzy=true
(OfficeActivity | where TimeGenerated >= ago(endtime) | where UserAgent != """"),
(OfficeActivity
| where TimeGenerated >= ago(endtime)
| where RecordType in (""AzureActiveDirectoryAccountLogon"", ""AzureActiveDirectoryStsLogon"")
| extend OperationName = Operation, UserAgent = extractjson(""$[0].Value"", ExtendedProperties, typeof(string))),
(AzureDiagnostics
| where TimeGenerated >= ago(endtime)
| where ResourceType =~ ""APPLICATIONGATEWAYS"" 
| where OperationName =~ ""ApplicationGatewayAccess"" 
| extend ClientIP = columnifexists(""clientIP_s"", ""None""), UserAgent = columnifexists(""userAgent_s"", ""None"")))
// Likely artefact of hardcoding
| where UserAgent startswith ""User"" or UserAgent startswith ""\""""
// Incorrect casing
or (UserAgent startswith ""Mozilla"" and not(UserAgent containscs ""Mozilla""))
// Incorrect casing
or UserAgent containscs  ""(Compatible;""
// Missing MSIE version
or UserAgent matches regex @""MSIE\s?;""
// Incorrect spacing around MSIE version
or UserAgent matches regex  @""MSIE(?:\d|.{1,5}?\d\s;)""
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationNames = makeset(OperationName), UserAgentCount = dcount(UserAgent), 
UserAgentList = makeset(UserAgent), RecordTypes = makeset(RecordType) by UserId, ClientIP
| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP, AccountCustomEntity = UserId
",no
Known Manganese IP and UserAgent activity,MultipleDataSources,"'Matches IP plus UserAgent IOCs in OfficeActivity data, along with IP plus Connection string information in the CommonSecurityLog data related to Manganese group activity.
References: 
https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/
https://fortiguard.com/psirt/FG-IR-18-384'
",High,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
let IPList = dynamic([""45.63.52.41"",""140.82.17.161"",""207.148.101.95"",""45.32.87.51"",""66.42.98.156"",""45.76.144.105"",""217.163.28.35"",""45.32.141.174"",""149.28.165.249"",""209.250.225.247"",""45.63.100.115"",""95.179.229.230"",""209.250.233.247"",""45.77.121.232"",""45.76.175.65"",""104.238.160.237"",""45.77.181.97"",""95.179.192.125"",""149.28.93.184"",""140.82.16.81"",""45.76.173.103"",""45.77.255.22"",""45.32.11.71"",""149.28.77.26"",""45.32.54.50"",""104.156.233.156"",""45.32.21.118"",""45.63.62.109"",""45.77.244.202"",""149.248.11.205"",""104.238.190.244""]);
let IOCTerms = ""\\?lang=[/..]*/dev/cmdb/sslvpn_websession|/dana-na/jam/[/..]*home/webserver/htdocs/dana/html5acc/guacamole[/..]*etc/passwd\\?"";
(union isfuzzy=true
(CommonSecurityLog
| where TimeGenerated >= ago(1d) 
| where isnotempty(SourceIP) or isnotempty(DestinationIP)
| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)
| extend IPMatch = case(
SourceIP in (IPList), ""SourceIP"", 
DestinationIP in (IPList), ""DestinationIP"",
""Message"") 
| where Message matches regex IOCTerms
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch
| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIP, IPMatch == ""DestinationIP"", DestinationIP, ""IP in Message Field"") 
),
(OfficeActivity
| where TimeGenerated >= ago(1d) 
| where isnotempty(UserAgent) and ClientIP in (IPList)
| where UserAgent contains ""ExchangeServicesClient/0.0.0.0""
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP = ClientIP, Account = UserId, Type, RecordType, OfficeWorkload, UserAgent, OfficeObjectId, IPMatch = ""ClientIP""
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = SourceIP
)
)
",no
MFA disabled for a user,MultipleDataSources,"'Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to diable MFA for a user '
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""AuditLogs""
                      ]
    },
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    }
]","
let timeframe = 1d;
(union isfuzzy=true
(AuditLogs 
| where TimeGenerated >= ago(timeframe) 
| where OperationName =~ ""Disable Strong Authentication""
| extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) 
| extend InitiatedByUser = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), 
 tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))
| extend Targetprop = todynamic(TargetResources)
| extend TargetUser = tostring(Targetprop[0].userPrincipalName) 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, InitiatedByUser , Operation = OperationName , CorrelationId, IPAddress, Category, Source = SourceSystem , AADTenantId, Type
),
(AWSCloudTrail
| where TimeGenerated >= ago(timeframe)
| where EventName in~ (""DeactivateMFADevice"", ""DeleteVirtualMFADevice"") 
| extend InstanceProfileName = tostring(parse_json(RequestParameters).InstanceProfileName)
| extend TargetUser = tostring(parse_json(RequestParameters).userName)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, Source = EventSource , Operation = EventName , TenantorInstance_Detail = InstanceProfileName, IPAddress = SourceIpAddress
)
)
| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = IPAddress
",no
Multiple Password Reset by user,MultipleDataSources,"'This query will determine multiple password resets by user across multiple data sources. 
Account manipulation including password reset may aid adversaries in maintaining access to credentials 
and certain permission levels within an environment.'
",Low,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""AuditLogs""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    },
    {
        ""connectorId"":  ""Syslog"",
        ""dataTypes"":  [
                          ""Syslog""
                      ]
    },
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    }
]","
let timeframe = 1d;
let PerUserThreshold = 5;
let TotalThreshold = 100;
let action = dynamic([""change"", ""changed"", ""reset""]);
let pWord = dynamic([""password"", ""credentials""]);
let PasswordResetMultiDataSource =
(union isfuzzy=true
(//Password reset events
//4723: An attempt was made to change an account's password
//4724: An attempt was made to reset an accounts password
SecurityEvent
| where TimeGenerated >= ago(timeframe)
| where EventID in (""4723"",""4724"")
| project TimeGenerated, Computer, AccountType, Account, Type),
(//Azure Active Directory Password reset events
AuditLogs
| where TimeGenerated >= ago(timeframe)
| where OperationName has_any (pWord) and OperationName has_any (action)
| extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName), 
TargetResourceName = tolower(tostring(TargetResources[0].displayName))
| project TimeGenerated, AccountType, Account, Computer = TargetResourceName, Type),
(//OfficeActive ActiveDirectory Password reset events
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where OfficeWorkload == ""AzureActiveDirectory"" 
| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))
| extend AccountType = UserType, Account = OfficeObjectId 
| project TimeGenerated, AccountType, Account, Type, Computer = """"),
(// Unix syslog password reset events
Syslog
| where TimeGenerated >= ago(timeframe)
| where Facility in (""auth"",""authpriv"")
| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)
| extend AccountType = iif(SyslogMessage contains ""root"", ""Root"", ""Non-Root"")
| parse SyslogMessage with * ""password changed for"" Account
| project TimeGenerated, AccountType, Account, Computer = HostName, Type),
(SigninLogs
| where TimeGenerated >= ago(timeframe)
| where OperationName =~ ""Sign-in activity"" and ResultType has_any (""50125"", ""50133"")
| project TimeGenerated, AccountType = AppDisplayName, Computer = IPAddress, Account = UserPrincipalName, Type
)
);
let pwrmd = PasswordResetMultiDataSource
| project TimeGenerated, Computer, AccountType, Account, Type;
(union isfuzzy=true  
(pwrmd
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), AccountType = makeset(AccountType), Total=count() by Account, Type
| where Total > PerUserThreshold
| extend ResetPivot = ""PerUserReset""),  
(pwrmd
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), Account = tostring(makeset(Account)), AccountType = makeset(AccountType), Total=count() by Type
| where Total > TotalThreshold
| extend ResetPivot = ""TotalUserReset"")
)
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = tostring(Computer)
",no
Network endpoint to host executable correlation,MultipleDataSources,"'Correlates blocked URLs hosting [malicious] executables with host endpoint data
to identify potential instances of executables of the same name having been recently run.'
",Medium,"[
    {
        ""connectorId"":  ""TrendMicro"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    }
]","
let timeframe = 1d;
let endpointData = 
(SecurityEvent
  | where TimeGenerated >= ago(timeframe) 
  | where EventID == 4688
  | extend shortFileName = tostring(split(NewProcessName, '\\')[-1])
  );
// Correlate suspect executables seen in TrendMicro rule updates with similar activity on endpoints
CommonSecurityLog
| where TimeGenerated >= ago(timeframe)
| where DeviceVendor =~ ""Trend Micro""
| where Activity =~ ""Deny List updated"" 
| where RequestURL endswith "".exe""
| project TimeGenerated, Activity , RequestURL , SourceIP, DestinationIP
| extend suspectExeName = tolower(tostring(split(RequestURL, '/')[-1]))
| join (endpointData) on $left.suspectExeName == $right.shortFileName 
| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, URLCustomEntity = RequestURL
",partial
New UserAgent observed in last 24 hours,MultipleDataSources,"'Identifies new UserAgents observed in the last 24 hours versus the previous 14 days. This detection 
extracts words from user agents to build the baseline and determine rareity rather than perform a 
direct comparison. This avoids FPs caused by version numbers and other high entropy user agent components.
These new UserAgents could be benign. However, in normally stable environments,
these new UserAgents could provide a starting point for investigating malicious activity.
Note: W3CIISLog can be noisy depending on the environment, however OfficeActivity and AWSCloudTrail are
usually stable with low numbers of detections.'
",Low,"[
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    },
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(IIS)"",
        ""dataTypes"":  [
                          ""W3CIISLog""
                      ]
    }
]","
let starttime = 14d;
let endtime = 1d;
let UserAgentAll = 
(union isfuzzy=true
(OfficeActivity
| where TimeGenerated >= ago(starttime)
| where isnotempty(UserAgent)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, RecordType, Operation
),
(
W3CIISLog
| where TimeGenerated >= ago(starttime)
| where isnotempty(csUserAgent)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem
),
(
AWSCloudTrail
| where TimeGenerated >= ago(starttime)
| where isnotempty(UserAgent)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventSource, EventName
))
// remove wordSize blocks of non-numeric hex characters prior to word extraction
| extend?UserAgentNoHexAlphas?=?replace(""([A-Fa-f]{4,})"",?""x"",?UserAgent)
// once blocks of hex chars are removed, extract wordSize blocks of a-z
| extend?Tokens?=?extract_all(""([A-Za-z]{4,})"", UserAgentNoHexAlphas)
// concatenate extracted words to create a summarized user agent for baseline and comparison
| extend?NormalizedUserAgent?=?strcat_array(Tokens,?""|"")
| project-away?UserAgentNoHexAlphas, Tokens;
UserAgentAll
| where StartTime >= ago(endtime)
| summarize StartTime = min(StartTime), EndTime = max(EndTime), count() by UserAgent, NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem
| join kind=leftanti
(
UserAgentAll
| where StartTime < ago(endtime)
| summarize by NormalizedUserAgent, SourceIP, Account, Type, RecordType, Operation, EventSource, EventName, sSiteName, csMethod, csUriStem
)
on NormalizedUserAgent
| extend timestamp = StartTime, IPCustomEntity = SourceIP, AccountCustomEntity = Account
",no
Known Phosphorus group domains/IP,MultipleDataSources,"'Matches domain name IOCs related to Phosphorus group activity with CommonSecurityLog, DnsEvents, OfficeActivity and VMConnection dataTypes.
References: https://blogs.microsoft.com/on-the-issues/2019/03/27/new-steps-to-protect-customers-from-hacking/.'
",High,"[
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    }
]","
let timeframe = 1d;
let DomainNames = dynamic([""yahoo-verification.org"",""support-servics.com"",""verification-live.com"",""com-mailbox.com"",""com-myaccuants.com"",""notification-accountservice.com"",
""accounts-web-mail.com"",""customer-certificate.com"",""session-users-activities.com"",""user-profile-credentials.com"",""verify-linke.com"",""support-servics.net"",""verify-linkedin.net"", 
""yahoo-verification.net"",""yahoo-verify.net"",""outlook-verify.net"",""com-users.net"",""verifiy-account.net"",""te1egram.net"",""account-verifiy.net"",""myaccount-services.net"",
""com-identifier-servicelog.name"",""microsoft-update.bid"",""outlook-livecom.bid"",""update-microsoft.bid"",""documentsfilesharing.cloud"",""com-microsoftonline.club"",
""confirm-session-identifier.info"",""session-management.info"",""confirmation-service.info"",""document-share.info"",""broadcast-news.info"",""customize-identity.info"",""webemail.info"",
""com-identifier-servicelog.info"",""documentsharing.info"",""notification-accountservice.info"",""identifier-activities.info"",""documentofficupdate.info"",""recoveryusercustomer.info"",
""serverbroadcast.info"",""account-profile-users.info"",""account-service-management.info"",""accounts-manager.info"",""activity-confirmation-service.info"",""com-accountidentifier.info"",
""com-privacy-help.info"",""com-sessionidentifier.info"",""com-useraccount.info"",""confirmation-users-service.info"",""confirm-identity.info"",""confirm-session-identification.info"",
""continue-session-identifier.info"",""customer-recovery.info"",""customers-activities.info"",""elitemaildelivery.info"",""email-delivery.info"",""identify-user-session.info"",
""message-serviceprovider.info"",""notificationapp.info"",""notification-manager.info"",""recognized-activity.info"",""recover-customers-service.info"",""recovery-session-change.info"",
""service-recovery-session.info"",""service-session-continue.info"",""session-mail-customers.info"",""session-managment.info"",""session-verify-user.info"",""shop-sellwear.info"",
""supportmailservice.info"",""terms-service-notification.info"",""user-activity-issues.info"",""useridentity-confirm.info"",""users-issue-services.info"",""verify-user-session.info"",
""login-gov.info"",""notification-signal-agnecy.info"",""notifications-center.info"",""identifier-services-sessions.info"",""customers-manager.info"",""session-manager.info"",
""customer-managers.info"",""confirmation-recovery-options.info"",""service-session-confirm.info"",""session-recovery-options.info"",""services-session-confirmation.info"",
""notification-managers.info"",""activities-services-notification.info"",""activities-recovery-options.info"",""activity-session-recovery.info"",""customers-services.info"",
""sessions-notification.info"",""download-teamspeak.info"",""services-issue-notification.info"",""microsoft-upgrade.mobi"",""broadcastnews.pro"",""mobile-messengerplus.network""]);
let IPList = dynamic([""51.91.200.147""]);
let IPRegex = '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}';
(union isfuzzy=true
(CommonSecurityLog 
| where TimeGenerated >= ago(timeframe)
| parse Message with * '(' DNSName ')' * 
| extend MessageIP = extract(IPRegex, 0, Message)
| extend RequestURLIP = extract(IPRegex, 0, Message)
| where (isnotempty(SourceIP) and SourceIP in (IPList)) or (isnotempty(DestinationIP) and DestinationIP in (IPList)) 
or (isnotempty(DNSName) and DNSName in~ (DomainNames)) or (isnotempty(DestinationHostName) and DestinationHostName in~ (DomainNames)) or (isnotempty(RequestURL) and (RequestURL has_any (DomainNames) or RequestURLIP in (IPList))) 
or (isnotempty(Message) and MessageIP in (IPList))
| extend IPMatch = case(SourceIP in (IPList), ""SourceIP"", DestinationIP in (IPList), ""DestinationIP"", MessageIP in (IPList), ""Message"", RequestURLIP in (IPList), ""RequestUrl"", ""NoMatch"") 
| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIP, IPMatch == ""DestinationIP"", DestinationIP,IPMatch == ""Message"", MessageIP,
IPMatch == ""RequestUrl"", RequestURLIP,""NoMatch""), Account = SourceUserID, Host = DeviceName
),
(DnsEvents 
| where TimeGenerated >= ago(timeframe) 
| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer
| where  DestinationIPAddress in (IPList) or DNSName in~ (DomainNames) 
| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host),
(VMConnection 
| where TimeGenerated >= ago(timeframe) 
| parse RemoteDnsCanonicalNames with * '[""' DNSName '""]' *
| where isnotempty(SourceIP) or isnotempty(DestinationIP) or isnotempty(DNSName)
| where SourceIP in (IPList) or DestinationIP in (IPList) or DNSName in~ (DomainNames)
| extend IPMatch = case( SourceIP in (IPList), ""SourceIP"", DestinationIP in (IPList), ""DestinationIP"", ""None"") 
| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == ""SourceIP"", SourceIP, IPMatch == ""DestinationIP"", DestinationIP, ""None""), Host = Computer),
(OfficeActivity
| where TimeGenerated >= ago(timeframe)
| extend SourceIPAddress = ClientIP, Account = UserId
| where  SourceIPAddress in (IPList)
| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account )
)
",no
Cisco - firewall block but success logon to Azure AD,MultipleDataSources,"'Correlate IPs blocked by a Cisco firewall appliance with successful Azure Active Directory signins. 
Because the IP was blocked by the firewall, that same IP logging on successfully to AAD is potentially suspect
and could indicate credential compromise for the user account.'
",Medium,"[
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    }
]","
let PrivateIPregex = @'^127\.|^10\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-1]\.|^192\.168\.';
let endtime = 1d;
CommonSecurityLog
| where TimeGenerated >= ago(endtime) 
| where DeviceVendor =~ ""Cisco""
| where DeviceAction =~ ""denied""
| extend SourceIPType = iff(SourceIP matches regex PrivateIPregex,""private"" ,""public"" )
| where SourceIPType == ""public""
| summarize count() by SourceIP
| join (
    // Successful signins from IPs blocked by the firewall solution are suspect
    // Include fully successful sign-ins, but also ones that failed only at MFA stage
    // as that supposes the password was sucessfully guessed.
  SigninLogs
  | where ResultType in (""0"", ""50074"", ""50076"") 
) on $left.SourceIP == $right.IPAddress
| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, AccountCustomEntity = UserPrincipalName
",yes
Known Strontium group domains,MultipleDataSources,"'Matches domain name IOCs related to Strontium group activity with CommonSecurityLog, DnsEvents and VMConnection dataTypes.
References: https://blogs.microsoft.com/on-the-issues/2019/07/17/new-cyberthreats-require-new-ways-to-protect-democracy/.'
",High,"[
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    }
]","
let timeframe = 1d;
let DomainNames = dynamic([""irf.services"",""microsoft-onthehub.com"",""msofficelab.com"",""com-mailbox.com"",""my-sharefile.com"",""my-sharepoints.com"",
""accounts-web-mail.com"",""customer-certificate.com"",""session-users-activities.com"",""user-profile-credentials.com"",""verify-linke.com"",""support-servics.net"",
""onedrive-sharedfile.com"",""onedrv-live.com"",""transparencyinternational-my-sharepoint.com"",""transparencyinternational-my-sharepoints.com"",""soros-my-sharepoint.com""]);
(union isfuzzy=true
(CommonSecurityLog 
| where TimeGenerated >= ago(timeframe) 
| parse Message with * '(' DNSName ')' * 
| extend Account = SourceUserID, Host = DeviceName, IPAddress = SourceIP),
(DnsEvents 
| where TimeGenerated >= ago(timeframe) 
| extend IPAddress = ClientIP, DNSName = Name, Host = Computer),
(VMConnection 
| where TimeGenerated >= ago(timeframe) 
| parse RemoteDnsCanonicalNames with * '[""' DNSName '""]' *
| extend IPAddress = RemoteIp, Host = Computer)
)
| where isnotempty(DNSName)
| where DNSName  in~ (DomainNames)
| extend timestamp = TimeGenerated, IPCustomEntity = IPAddress, AccountCustomEntity = Account, HostCustomEntity = Host
",no
THALLIUM domains included in DCU takedown,MultipleDataSources,"'THALLIUM spearphishing and command and control domains included in December 2019 DCU/MSTIC takedown. 
 Matches domain name IOCs related to the THALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.
 References: https://blogs.microsoft.com/on-the-issues/2019/12/30/microsoft-court-action-against-nation-state-cybercrime/ '
",High,"[
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    },
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    }
]","let timeframe = 1d;
let DomainNames = dynamic([""seoulhobi.biz"", ""reader.cash"", ""pieceview.club"", ""app-wallet.com"", ""bigwnet.com"", ""bitwoll.com"", ""cexrout.com"", ""change-pw.com"", ""checkprofie.com"", ""cloudwebappservice.com"", ""ctquast.com"", ""dataviewering.com"", ""day-post.com"", ""dialy-post.com"", ""documentviewingcom.com"", ""dovvn-mail.com"", ""down-error.com"", ""drivecheckingcom.com"", ""drog-service.com"", ""encodingmail.com"", ""filinvestment.com"", ""foldershareing.com"", ""golangapis.com"", ""hotrnall.com"", ""lh-logins.com"", ""login-use.com"", ""mail-down.com"", ""matmiho.com"", ""mihomat.com"", ""natwpersonal-online.com"", ""nidlogin.com"", ""nid-login.com"", ""nidlogon.com"", ""pw-change.com"", ""rnaii.com"", ""rnailm.com"", ""sec-live.com"", ""secrityprocessing.com"", ""securitedmode.com"", ""securytingmail.com"", ""set-login.com"", ""usrchecking.com"", ""com-serviceround.info"", ""mai1.info"", ""reviewer.mobi"", ""files-download.net"", ""fixcool.net"", ""hanrnaii.net"", ""office356-us.org"", ""smtper.org""]);
(union isfuzzy=true
(CommonSecurityLog 
| where TimeGenerated >= ago(timeframe) 
| parse Message with * '(' DNSName ')' * 
| where isnotempty(FileHash)
| where DNSName in~ (DomainNames)
| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP
),
(DnsEvents 
| where TimeGenerated >= ago(timeframe) 
| extend DNSName = Name
| where isnotempty(DNSName)
| where DNSName  in~ (DomainNames)
| extend IPAddress = ClientIP
),
(VMConnection 
| where TimeGenerated >= ago(timeframe) 
| parse RemoteDnsCanonicalNames with * '[""' DNSName '""]' *
| where isnotempty(DNSName)
| where DNSName  in~ (DomainNames)
| extend IPAddress = RemoteIp
)
)
| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress
",no
Time series anomaly for data size transferred to public internet,MultipleDataSources,"'Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern. 
A sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated. 
The higher the score, the further it is from the baseline value.
The output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour. 
The source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .
You may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious'
",Medium,"[
    {
        ""connectorId"":  ""CiscoASA"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    }
]","
let starttime = 14d;
let endtime = 1d;
let timeframe = 1h;
let scorethreshold = 5;
let bytessentperhourthreshold = 10;
let PrivateIPregex = @'^127\.|^10\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-1]\.|^192\.168\.';
let TimeSeriesData = (union isfuzzy=true
(
VMConnection
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))
| where isnotempty(DestinationIP) and isnotempty(SourceIP)
| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,""private"" ,""public"" )
| where DestinationIpType == ""public"" | extend DeviceVendor = ""VMConnection""
| project TimeGenerated, BytesSent, DeviceVendor
| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor
),
(
CommonSecurityLog 
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))
| where isnotempty(DestinationIP) and isnotempty(SourceIP)
| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,""private"" ,""public"" )
| where DestinationIpType == ""public""
| project TimeGenerated, SentBytes, DeviceVendor
| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor
)
);
//Filter anomolies against TimeSeriesData
let TimeSeriesAlerts = TimeSeriesData
| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')
| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)
| where anomalies > 0 | extend AnomalyHour = TimeGenerated 
| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)
| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score;
//Union of all BaseLogs aggregated per hour
let BaseLogs = (union isfuzzy=true
(
CommonSecurityLog 
| where isnotempty(DestinationIP) and isnotempty(SourceIP)
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime))) 
| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024) 
| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP), DestinationPortList = make_set(DestinationPort), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)
| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB
| where TotalSentBytesinMB > bytessentperhourthreshold
),
(
VMConnection 
| where isnotempty(DestinationIp) and isnotempty(SourceIp)
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime))) 
| extend DeviceVendor = ""VMConnection"", SourceIP = SourceIp, DestinationIP = DestinationIp
| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)
| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP), DestinationPortList = make_set(DestinationPort), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DestinationIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)
| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB 
| where TotalSentBytesinMB > bytessentperhourthreshold
)
);
// Join against base logs to retrive records associated with the hour of anomoly
TimeSeriesAlerts
| join (
    BaseLogs | extend AnomalyHour = TimeGeneratedHour
) on DeviceVendor, AnomalyHour | sort by score desc 
| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies 
| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP), DestinationIPList = make_set(DestinationIPList) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies
| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount  
| extend timestamp =EndTimeUtc, IPCustomEntity = SourceIPMax 
",no
Exchange AuditLog disabled,OfficeActivity,"'Identifies when the exchange audit logging has been disabled which may be an adversary attempt
to evade detection or avoid other defenses.'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where UserType in~ (""Admin"",""DcAdmin"") 
// Only admin or global-admin can disable audit logging
| where Operation =~ ""Set-AdminAuditLogConfig"" 
| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)
| where AdminAuditLogEnabledValue =~ ""False"" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP 
",no
Mail redirect via ExO transport rule,OfficeActivity,"'Identifies when Exchange Online transport rule configured to forward emails.
This could be an adversary mailbox configured to collect mail from multiple user accounts.'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where OfficeWorkload == ""Exchange""
| where Operation in~ (""New-TransportRule"", ""Set-TransportRule"")
| extend p = parse_json(Parameters)
| extend RuleName = case(
  Operation =~ ""Set-TransportRule"", tostring(OfficeObjectId),
  Operation =~ ""New-TransportRule"", tostring(p[1].Value),
  ""Unknown""
  ) 
| mvexpand p
| where (p.Name =~ ""BlindCopyTo"" or p.Name =~ ""RedirectMessageTo"") and isnotempty(p.Value)
| extend RedirectTo = p.Value
| extend ClientIPOnly = case( 
  ClientIP has ""."" and ClientIP has "":"", tostring(split(ClientIP,"":"")[0]), 
  ClientIP has ""."" and ClientIP has ""-"", tostring(split(ClientIP,""-"")[0]), 
  ClientIP has ""["", tostring(trim_start(@'[[]',tostring(split(ClientIP,""]"")[0]))),
  ClientIP
  )  
| extend Port = case(
  ClientIP has ""."" and ClientIP has "":"", (split(ClientIP,"":"")[1]),
  ClientIP has ""."" and ClientIP has ""-"", (split(ClientIP,""-"")[1]),
  ClientIP has ""["" and ClientIP has "":"", tostring(split(ClientIP,""]:"")[1]),
  ClientIP has ""["" and ClientIP has ""-"", tostring(split(ClientIP,""]-"")[1]),
  ClientIP
  )
| extend ClientIP = ClientIPOnly
| project TimeGenerated, RedirectTo, ClientIP, Port, UserId, Operation, RuleName
| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP 
",no
Malicious Inbox Rule,OfficeActivity,"'Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords. 
 This is done so as to limit ability to warn compromised users that they've been compromised. Below is a sample query that tries to detect this.
Reference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
let Keywords = dynamic([""helpdesk"", "" alert"", "" suspicious"", ""fake"", ""malicious"", ""phishing"", ""spam"", ""do not click"", ""do not open"", ""hijacked"", ""Fatal""]);
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where Operation =~ ""New-InboxRule""
| where Parameters has ""Deleted Items"" or Parameters has ""Junk Email"" 
| extend Events=todynamic(Parameters)
| parse Events  with * ""SubjectContainsWords"" SubjectContainsWords '}'*
| parse Events  with * ""BodyContainsWords"" BodyContainsWords '}'*
| parse Events  with * ""SubjectOrBodyContainsWords"" SubjectOrBodyContainsWords '}'*
| where SubjectContainsWords has_any (Keywords)
 or BodyContainsWords has_any (Keywords)
 or SubjectOrBodyContainsWords has_any (Keywords)
| extend ClientIPAddress = case( ClientIP has ""."", tostring(split(ClientIP,"":"")[0]), ClientIP has ""["", tostring(trim_start(@'[[]',tostring(split(ClientIP,""]"")[0]))), ClientIP )
| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))
| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\')[-1]))
| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail
| extend timestamp = StartTimeUtc,  IPCustomEntity = ClientIPAddress, AccountCustomEntity = UserId , HostCustomEntity =  OriginatingServer
",no
Multiple users email forwarded to same destination,OfficeActivity,"'Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. 
This could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 7d;
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where Operation =~ ""Set-Mailbox""
| where Parameters has ""ForwardingSmtpAddress""
| extend parsed = parse_json(Parameters)
| mv-expand parsed
| where parsed.Name == ""ForwardingSmtpAddress""
| extend parameterName = tostring(parsed.Name), fwdingDestination = tostring(parsed.Value)
| where isnotempty(fwdingDestination)
| extend ClientIPOnly = case( 
ClientIP has ""."" and ClientIP has ':', tostring(split(ClientIP,"":"")[0]), 
ClientIP has ""."" and ClientIP has '-', tostring(split(ClientIP,""-"")[0]), 
ClientIP has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP,""]"")[0]))),
ClientIP has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP,""]"")[0]))),
isempty(ClientIP) and ClientIP_ has ""."" and ClientIP_ has ':', tostring(split(ClientIP_,"":"")[0]), 
isempty(ClientIP) and ClientIP_ has ""."" and ClientIP_ has '-', tostring(split(ClientIP_,""-"")[0]), 
isempty(ClientIP) and ClientIP_ has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP_,""]"")[0]))),
isempty(ClientIP) and ClientIP_ has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP_,""]"")[0]))),
isnotempty(ClientIP), ClientIP,
isnotempty(ClientIP_), ClientIP_,
""IP Not Available""
)  
| extend Port = case(
ClientIP has ""."" and ClientIP has ':', tostring(split(ClientIP,"":"")[1]), 
ClientIP has ""."" and ClientIP has '-', tostring(split(ClientIP,""-"")[1]), 
ClientIP has ']-', tostring(split(ClientIP,""]-"")[1]), 
ClientIP has ']:', tostring(split(ClientIP,""]:"")[1]), 
isempty(ClientIP) and ClientIP_ has ""."" and ClientIP_ has ':', tostring(split(ClientIP_,"":"")[1]), 
isempty(ClientIP) and ClientIP_ has ""."" and ClientIP_ has '-', tostring(split(ClientIP_,""-"")[1]), 
isempty(ClientIP) and ClientIP_ has ']-', tostring(split(ClientIP_,""]-"")[1]),
isempty(ClientIP) and ClientIP_ has ']:', tostring(split(ClientIP_,""]:"")[1]),
isnotempty(ClientIP), ClientIP,
isnotempty(ClientIP_), ClientIP_,
""IP Not Available""
)
| extend UserId = iff(isempty(UserId), UserId_, UserId)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId), 
Ports = make_set(Port), EventCount = count() by fwdingDestination, ClientIP = ClientIPOnly 
| where DistinctUserCount > 1
| mv-expand UserId
| extend UserId = tostring(UserId), Ports = tostring(Ports)
| distinct StartTimeUtc, EndTimeUtc, UserId, DistinctUserCount, ClientIP, Ports, fwdingDestination, EventCount
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP
",no
Office policy tampering,OfficeActivity,"'Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. 
An adversary may use this technique to evade detection or avoid other policy based defenses.
References: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where RecordType =~ ""ExchangeAdmin""
| where UserType in~ (""Admin"",""DcAdmin"") 
// Only admin or global-admin can disable/remove policy
| where Operation startswith ""Remove-"" or Operation startswith ""Disable-""
| where Operation has_any (""AntiPhish"", ""SafeAttachment"", ""SafeLinks"", ""Dlp"", ""Audit"")
| extend ClientIPOnly = case( 
ClientIP has ""."", tostring(split(ClientIP,"":"")[0]), 
ClientIP has ""["", tostring(trim_start(@'[[]',tostring(split(ClientIP,""]"")[0]))),
ClientIP
)  
| extend Port = case(
ClientIP has ""."", (split(ClientIP,"":"")[1]),
ClientIP has ""["", tostring(split(ClientIP,""]:"")[1]),
ClientIP
)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP
",no
New executable via Office FileUploaded Operation,OfficeActivity,"'Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.
List currently includes 'exe', 'inf', 'gzip', 'cmd', 'bat' file extensions.
Additionally, identifies when a given user is uploading these files to another users workspace.
This may be indication of a staging location for malware or other malicious activity.'
",Low,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
// a threshold can be enabled, see commented line below for PrevSeenCount
let threshold = 2;
let uploadOp = 'FileUploaded';
// Extensions that are interesting. Add/Remove to this list as you see fit
let execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);
let starttime = 8d;
let endtime = 1d;
OfficeActivity | where TimeGenerated >= ago(endtime)
// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type
// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains ""upload"" or Operation contains ""download""
| where Operation =~ uploadOp
| where SourceFileExtension has_any (execExt)
| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName
| join kind= leftanti (
OfficeActivity | where TimeGenerated between (ago(starttime) .. ago(endtime))
| where Operation =~ uploadOp
| where SourceFileExtension has_any (execExt)
| summarize SourceRelativeUrl = make_set(SourceRelativeUrl), UserId = make_set(UserId) , PrevSeenCount = count() by SourceFileName
// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below
//| where PrevSeenCount > threshold
| mvexpand SourceRelativeUrl, UserId
| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)
) on SourceFileName, SourceRelativeUrl, UserId 
| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])
| extend UserIdUserFolderFormat = tolower(replace('@|\\.', '_',UserId))
// identify when UserId is not a match to the specific site url personal folder reference
| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) 
| summarize TimeGenerated = make_list(TimeGenerated), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), 
UserAgents = make_list(UserAgent), OfficeIds = make_list(OfficeId), SourceRelativeUrls = make_list(SourceRelativeUrl), FileNames = make_list(SourceFileName)
by OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder
",no
Rare and potentially high-risk Office operations,OfficeActivity,"'Identifies Office operations that are typically rare and can provide capabilities useful to attackers.'
",Low,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let timeframe = 1d;
OfficeActivity
| where TimeGenerated >= ago(timeframe)
| where Operation in~ ( ""Add-MailboxPermission"", ""Add-MailboxFolderPermission"", ""Set-Mailbox"", ""New-ManagementRoleAssignment"")
and not(UserId has_any ('NT AUTHORITY\\SYSTEM (Microsoft.Exchange.ServiceHost)','devilfish-applicationaccount') and Operation in~ ( ""Add-MailboxPermission"", ""Set-Mailbox""))
| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP
",no
SharePointFileOperation via previously unseen IPs,OfficeActivity,"'Identifies when the volume of documents uploaded to or downloaded from Sharepoint by new IP addresses
exceeds a threshold (default is 50).'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let threshold = 50;
let szSharePointFileOperation = ""SharePointFileOperation"";
let szOperations = dynamic([""FileDownloaded"", ""FileUploaded""]);
let starttime = 14d;
let endtime = 1d;
let historicalActivity =
OfficeActivity
| where TimeGenerated between(ago(starttime)..ago(endtime))
| where RecordType =~ szSharePointFileOperation
| where Operation in~ (szOperations)
| summarize historicalCount = count() by ClientIP, RecordType, Operation;
let recentActivity = OfficeActivity
| where TimeGenerated > ago(endtime)
| where RecordType =~ szSharePointFileOperation
| where Operation in~ (szOperations)
| summarize min(Start_Time), max(Start_Time), recentCount = count() by ClientIP, RecordType, Operation;
let RareIP = recentActivity | join kind= leftanti ( historicalActivity ) on ClientIP, RecordType, Operation
// More than 50 downloads/uploads from a new IP
| where recentCount > threshold;
OfficeActivity 
| where TimeGenerated >= ago(endtime) 
| where RecordType =~ szSharePointFileOperation
| where Operation in~ (szOperations)
| join kind= inner (RareIP) on ClientIP, RecordType, Operation
| where Start_Time between(min_Start_Time .. max_Start_Time)
| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgent, IPSeenCount = recentCount
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url
| order by IPSeenCount desc, ClientIP asc, Operation asc, UserId asc
",no
SharePointFileOperation via devices with previously unseen user agents,OfficeActivity,"'Identifies if the number of documents uploaded or downloaded from device(s) associated
with a previously unseen user agent exceeds a threshold (default is 5).'
",Medium,"{
    ""connectorId"":  ""Office365"",
    ""dataTypes"":  [
                      ""OfficeActivity""
                  ]
}","
let threshold = 5;
let szSharePointFileOperation = ""SharePointFileOperation"";
let szOperations = dynamic([""FileDownloaded"", ""FileUploaded""]);
let starttime = 14d;
let endtime = 1d;
let historicalActivity =
OfficeActivity
| where TimeGenerated between(ago(starttime)..ago(endtime))
| where RecordType =~ szSharePointFileOperation
| where Operation in~ (szOperations)
| where isnotempty(UserAgent)
| summarize historicalCount = count() by UserAgent, RecordType, Operation;
let recentActivity = OfficeActivity
| where RecordType =~ szSharePointFileOperation
| where Operation in~ (szOperations)
| where TimeGenerated > ago(endtime)
| where isnotempty(UserAgent)
| summarize min(Start_Time), max(Start_Time), recentCount = count() by UserAgent, RecordType, Operation;
let RareUserAgent = recentActivity | join kind = leftanti (historicalActivity) on UserAgent
| order by recentCount desc, UserAgent
// More than 3 downloads/uploads from a new user agent today
| where recentCount > threshold;
OfficeActivity 
| where TimeGenerated > ago(endtime) 
| where RecordType =~ szSharePointFileOperation 
| where Operation in~ (szOperations)
| where isnotempty(UserAgent)
| join kind= inner (RareUserAgent)
on UserAgent, RecordType, Operation    
| where Start_Time between(min_Start_Time .. max_Start_Time)
| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserAgent, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgentSeenCount = recentCount
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url
| order by UserAgentSeenCount desc, UserAgent asc, Operation asc, UserId asc
",no
Failed Logins from Unknown or Invalid User,OktaSSO,"'This creates an incident in the event that numerous login attempts to the management console with an unknown or invalid user name'
",Medium,"{
    ""connectorId"":  ""OktaSSO"",
    ""dataTypes"":  [
                      ""Okta_CL""
                  ]
}","
let timeframe = ago(1h);
let FailureThreshold = 15;
let FailedLogins = Okta_CL
| where TimeGenerated > timeframe
| where eventType_s =~ ""user.session.start"" and outcome_reason_s =~ ""UNKNOWN_USER""
| summarize count() by client_ipAddress_s, bin(TimeGenerated, 5m)
| where count_ > FailureThreshold
| project client_ipAddress_s;
Okta_CL
| where published_t > timeframe
| join kind=inner FailedLogins () on client_ipAddress_s
| where eventType_s =~ ""user.session.start"" and outcome_reason_s =~ ""UNKNOWN_USER""
| summarize count() by ClientIP = client_ipAddress_s, City = client_geographicalContext_city_s, Country = client_geographicalContext_country_s, bin(TimeGenerated, 5m)
| sort by TimeGenerated desc
| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP
",no
Login from User(s) from Different Countries within 3 hours,OktaSSO,"'This creates an incident in the event that a user logs into the Okta Console from different countries within 3 hours'
",Medium,"{
    ""connectorId"":  ""OktaSSO"",
    ""dataTypes"":  [
                      ""Okta_CL""
                  ]
}","
let timeframe = ago(3h);
let threshold = 2;
Okta_CL
| where published_t >= timeframe
| where eventType_s =~ ""user.session.start""
| where outcome_result_s =~ ""SUCCESS""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), NumOfCountries = dcount(client_geographicalContext_country_s) by actor_alternateId_s
| where NumOfCountries >= threshold
| extend timestamp = StartTime, AccountCustomEntity = actor_alternateId_s
",no
Potential Password Spray Attack,OktaSSO,"'This creates an incident when numerous lock out events from different accounts occurs'
",Medium,"{
    ""connectorId"":  ""OktaSSO"",
    ""dataTypes"":  [
                      ""Okta_CL""
                  ]
}","
let timeframe = ago(1h);
let FailureThreshold = 15;
let LockOutEvents = Okta_CL
| where TimeGenerated > timeframe
| where eventType_s =~ ""user.account.lock""
| summarize count() by client_ipAddress_s, bin(TimeGenerated, 5m)
| where count_ > FailureThreshold
| project TimeGenerated;
Okta_CL
| where TimeGenerated > timeframe
| where eventType_s =~ ""user.account.lock""
| extend TimeGenerated = bin(TimeGenerated, 5m)
| join kind=inner LockOutEvents () on TimeGenerated
| summarize User = make_set(actor_alternateId_s) by ClientIP = client_ipAddress_s, City = client_geographicalContext_city_s, Country = client_geographicalContext_country_s, bin(TimeGenerated, 5m)
| sort by TimeGenerated desc
| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP
",no
Malware attachment delivered,ProofpointTAP,"'This query identifies a message containing a malware attachment that was delivered.'
",Medium,"{
    ""connectorId"":  ""ProofpointTAP"",
    ""dataTypes"":  [
                      ""ProofPointTAPMessagesDelivered_CL""
                  ]
}","
let timeframe = ago(1h);
ProofPointTAPMessagesDelivered_CL
| where TimeGenerated >= timeframe
| mv-expand todynamic(threatsInfoMap_s)
| mv-expand todynamic(messageParts_s)
| extend threatType = tostring(threatsInfoMap_s.threatType), classification = tostring(threatsInfoMap_s.classification)
| extend filename = tostring(messageParts_s.filename)
| where threatType =~ ""attachment"" and classification =~ ""malware""
| summarize filenames = make_set(filename), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, threatType, classification,  Subject = subject_s
| extend timestamp = StartTime, extend AccountCustomEntity = Recipient, IPCustomEntity = SenderIPAddress
",no
Malware Link Clicked,ProofpointTAP,"'This query identifies a user clicking on an email link whose threat category is classified as a malware'
",Medium,"{
    ""connectorId"":  ""ProofpointTAP"",
    ""dataTypes"":  [
                      ""ProofPointTAPClicksPermitted_CL""
                  ]
}","
let timeframe = ago(1h);
ProofPointTAPClicksPermitted_CL
| where TimeGenerated >= timeframe
| where classification_s =~ ""malware""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by TimeGenerated, Sender = sender_s, SenderIPAddress = senderIP_s, Recipient = recipient_s, TimeClicked = clickTime_t, URLClicked = url_s
| extend timestamp = StartTime, AccountCustomEntity = Recipient, IPCustomEntity = SenderIPAddress, URLCustomEntity = URLClicked
",no
Large Number of Distinct Failed User Logins,PulseConnectSecure,"'This creates an incident in the event a Pulse Secure VPN server experiences failed login attempts from a large number of distinct users.'
",Medium,"{
    ""connectorId"":  ""PulseConnectSecure"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 100;
PulseConnectSecure
| where TimeGenerated >= timeframe
| where Messages startswith ""Login failed""
| summarize dcount(User) by Computer, bin(TimeGenerated, 15m)
| where dcount_User > threshold
| extend timestamp = TimeGenerated, HostCustomEntity = Computer
",no
Multiple Failed VPN User Logins,PulseConnectSecure,"'Creates an incident in the event of multiple unsuccessful attempts to log into the VPN server, which could indicate a potential brute force attack.'
",Low,"{
    ""connectorId"":  ""PulseConnectSecure"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 20;
PulseConnectSecure
| where TimeGenerated >= timeframe
| where Messages contains ""Login failed""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by User, Source_IP
| where count_ > threshold
| extend timestamp = StartTime, AccountCustomEntity = User, IPCustomEntity = Source_IP
",no
High Number of Urgent Vulnerabilities Detected,QualysVM,"'This Creates an incident when a host has a high number of Urgent, severity 5, vulnerabilities detected.'
",Medium,"{
    ""connectorId"":  ""QualysVulnerabilityManagement"",
    ""dataTypes"":  [
                      ""QualysHostDetection_CL""
                  ]
}","
let timeframe = ago(1h);
let threshold = 10;
QualysHostDetection_CL
| where TimeGenerated >= timeframe
| mv-expand todynamic(Detections_s)
| where Detections_s.Severity == ""5""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by NetBios_s, IPAddress
| where count_ >= threshold
| extend timestamp = StartTime, HostCustomEntity = NetBios_s, IPCustomEntity = IPAddress
",no
New High Severity Vulnerability Detected Across Multiple Hosts,QualysVM,"'This creates an incident when a new high severity vulnerability is detected across multilple hosts'
",Medium,"{
    ""connectorId"":  ""QualysVulnerabilityManagement"",
    ""dataTypes"":  [
                      ""QualysHostDetection_CL""
                  ]
}","
let timeframe = ago(1h);
let threshold = 10;
QualysHostDetection_CL
| where TimeGenerated >= timeframe
| mv-expand todynamic(Detections_s)
| extend Status = tostring(Detections_s.Status), Vulnerability = tostring(Detections_s.Results), Severity = tostring(Detections_s.Severity)
| where Status =~ ""New"" and Severity == ""5""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), dcount(NetBios_s) by tostring(Detections_s.QID)
| where dcount_NetBios_s >= threshold
| extend timestamp = StartTime
",no
Base64 encoded Windows process command-lines,SecurityEvent,"'Identifies instances of a base64 encoded PE file header seen in the process command line parameter.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let ProcessCreationEvents=() {
let processEvents=SecurityEvent
| where EventID==4688
| where isnotempty(CommandLine)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,
FileName = Process, CommandLine, ParentProcessName;
processEvents};
ProcessCreationEvents
| where CommandLine contains ""TVqQAAMAAAAEAAA""
| where StartTimeUtc >= ago(timeframe)
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Excessive Windows logon failures,SecurityEvent,"'User has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let starttime = 8d;
let endtime = 1d;
let threshold = 0.333;
let countlimit = 50;
SecurityEvent
| where TimeGenerated >= ago(endtime)
| where EventID == 4625 and AccountType =~ ""User""
| where IpAddress !in (""127.0.0.1"", ""::1"")
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress
| join kind=leftouter (
    SecurityEvent 
    | where TimeGenerated between (ago(starttime) .. ago(endtime))
    | where EventID == 4625 and AccountType =~ ""User""
    | where IpAddress !in (""127.0.0.1"", ""::1"")
    | summarize CountPrev7day = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress
) on EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress
| where CountToday >= coalesce(CountPrev7day,0)*threshold and CountToday >= countlimit
| extend Reason = case(
SubStatus == '0xc000005e', 'No logon servers available to service the logon request',
SubStatus == '0xc0000062', 'Account name is not properly formatted',
SubStatus == '0xc0000064', 'Account name does not exist',
SubStatus == '0xc000006a', 'Incorrect password',    
SubStatus == '0xc000006d', 'Bad user name or password',
SubStatus == '0xc000006f', 'User logon blocked by account restriction',
SubStatus == '0xc000006f', 'User logon outside of restricted logon hours',
SubStatus == '0xc0000070', 'User logon blocked by workstation restriction',
SubStatus == '0xc0000071', 'Password has expired',
SubStatus == '0xc0000072', 'Account is disabled',
SubStatus == '0xc0000133', 'Clocks between DC and other computer too far out of sync',
SubStatus == '0xc000015b', 'The user has not been granted the requested logon right at this machine',
SubStatus == '0xc0000193', 'Account has expirated',
SubStatus == '0xc0000224', 'User is required to change password at next logon',
SubStatus == '0xc0000234', 'Account is currently locked out',
strcat('Unknown reason substatus: ', SubStatus))
| extend WorkstationName = iff(WorkstationName == ""-"" or isempty(WorkstationName), Computer , WorkstationName) 
| project StartTimeUtc, EndTimeUtc, EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, Computer, WorkstationName, IpAddress, CountToday, CountPrev7day, Avg7Day = CountPrev7day/7
| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), Computer = make_set(Computer,128), IpAddressList = make_set(IpAddress,128), sum(CountToday), sum(CountPrev7day), avg(Avg7Day) 
by EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, WorkstationName
| order by sum_CountToday desc nulls last 
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = WorkstationName
",yes
Process executed from binary hidden in Base64 encoded file,SecurityEvent,"'Encoding malicious software is a technique used to obfuscate files from detection. 
The first CommandLine component is looking for Python decoding base64. 
The second CommandLine component is looking for Bash/sh command line base64 decoding.
The third one is looking for Ruby decoding base64.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let ProcessCreationEvents=() {
let processEvents=SecurityEvent
| where EventID==4688
| where isnotempty(CommandLine)
| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;
processEvents;
};
ProcessCreationEvents 
| where TimeGenerated > ago(timeframe) 
| where CommandLine contains "".decode('base64')""
        or CommandLine contains ""base64 --decode""
        or CommandLine contains "".decode64("" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by Computer, Account, AccountDomain, FileName, CommandLine, ParentProcessName 
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Group added to built in domain local or global group,SecurityEvent,"'Identifies when a recently created Group was added to a privileged built in domain local group or global group such as the 
Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition.
References: For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1h;
let WellKnownLocalSID = ""S-1-5-32-5[0-9][0-9]$"";
let WellKnownGroupSID = ""S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$"";
let GroupAddition = SecurityEvent 
| where TimeGenerated > ago(timeframe)
// 4728 - A member was added to a security-enabled global group
// 4732 - A member was added to a security-enabled local group
// 4756 - A member was added to a security-enabled universal group  
| where EventID in (""4728"", ""4732"", ""4756"") 
| where AccountType =~ ""User"" and MemberName == ""-""
// Exclude Remote Desktop Users group: S-1-5-32-555
| where TargetSid !in (""S-1-5-32-555"")
| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID
| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, 
GroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  
GroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid;
let GroupCreated = SecurityEvent
| where TimeGenerated > ago(timeframe)
// 4727 - A security-enabled global group was created
// 4731 - A security-enabled local group was created
// 4754 - A security-enabled universal group was created
| where EventID in (""4727"", ""4731"", ""4754"")
| where AccountType =~ ""User""
| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, 
GroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, 
GroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid;
GroupCreated
| join (
GroupAddition
) on GroupSid 
| extend timestamp = GroupCreateTime, AccountCustomEntity = GroupCreateSubjectUserName, HostCustomEntity = GroupCreateComputer
",yes
Failed logon attempts within 10 mins,SecurityEvent,"'Identifies when failed logon attempts are 20 or higher during a 10 minute period (2 failed logons per minute minimum).'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 10m;
let threshold = 20;
SecurityEvent 
| where TimeGenerated >= ago(timeframe)
| where EventID == 4625
| where AccountType =~ ""User""
| summarize min(TimeGenerated), max(TimeGenerated), FailedLogonCount = count() by EventID, Activity, Computer, Account, 
TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus
| where FailedLogonCount >= threshold
| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, FailedLogonCount, EventID, Activity, Computer, 
Account, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Malware in the recycle bin,SecurityEvent,"'Identifies malware that has been hidden in the recycle bin.
References: https://azure.microsoft.com/blog/how-azure-security-center-helps-reveal-a-cyberattack/.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let procList = dynamic([""cmd.exe"",""ftp.exe"",""schtasks.exe"",""powershell.exe"",""rundll32.exe"",""regsvr32.exe"",""msiexec.exe""]);
let ProcessCreationEvents=() {
let processEvents=SecurityEvent
| where EventID==4688
| where isnotempty(CommandLine)
| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,
FileName = Process, CommandLine,  ParentProcessName;
processEvents};
ProcessCreationEvents 
| where TimeGenerated >= ago(timeframe)
| where FileName in~ (procList)
| where CommandLine contains "":\\recycler""
| project StartTimeUtc = TimeGenerated, Computer, Account, NewProcessName, FileName, CommandLine, ParentProcessName
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
SecurityEvent - Multiple authentication failures followed by a success,SecurityEvent,"'Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication
within a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or
possible mis-configuration of a service account within an environment.
The lookback is set to 6h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum
of 5 failures followed by a success for an account within 1 hour to surface an alert.'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeRange = 6h;
let authenticationWindow = 1h;
let authenticationThreshold = 5;
SecurityEvent
| where TimeGenerated > ago(timeRange)
| where EventID == 4624 or EventID == 4625
| where IpAddress != ""-"" and isnotempty(Account)
| extend Outcome = iff(EventID == 4624, ""Success"", ""Failure"")
// bin outcomes into 5 minute windows to reduce the volume of data
| summarize OutcomeCount=count() by Account, IpAddress, Computer, Outcome, bin(TimeGenerated, 5m)
| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount
// sort ready for sessionizing - by account and time of the authentication outcome
| sort by Account asc, TimeGenerated asc
| serialize 
// sessionize into failure groupings until either the account changes or there is a success
| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == ""Success"")
// count the failures in each session
| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == ""Failure""), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(Outcome), makeset(Computer), makeset(IpAddress) by SessionStartedUtc, Account
// the session must not start with a success, and must end with one
| where array_index_of(list_Outcome, ""Success"") != 0
| where array_index_of(list_Outcome, ""Success"") == array_length(list_Outcome) - 1
| project-away SessionStartedUtc, list_Outcome 
// where the number of failures before the success is above the threshold 
| where FailureCountBeforeSuccess >= authenticationThreshold
// expand out ip and computer for customer entity assignment
| mvexpand set_IpAddress, set_Computer
| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)
| extend timestamp=StartTime, AccountCustomEntity=Account, HostCustomEntity=Computer, IPCustomEntity=IpAddress
",yes
AD account with don't expire password - disabled,SecurityEvent,"'Identifies whenever a user account has the setting ""Password Never Expires"" in the user account properties selected.
This is indicated in Security event 4738 in the EventData item labeled UserAccountControl with an included value of %%2089 
%%2089 resolves to ""Don't Expire Password - Disabled"".'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
SecurityEvent
| where TimeGenerated >= ago(timeframe) 
| where EventID == 4738
// 2089 value indicates the Don't Expire Password value has been set
| where UserAccountControl has ""%%2089"" 
| extend Value_2089 = iff(UserAccountControl has ""%%2089"",""'Don't Expire Password' - Disabled"", ""Not Changed"")
// 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event. 
| extend Value_2050 = iff(UserAccountControl has ""%%2050"",""'Password Not Required' - Disabled"", ""Not Changed"")
// If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.  
| extend Value_2082 = iff(UserAccountControl has ""%%2082"",""'Password Not Required' - Enabled"", ""Not Changed"")
| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082
| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer
",yes
AD user created password not set within 24-48 hours,SecurityEvent,"'Identifies whenever a new account is created with a default password and password is not changed within 24-48 hours.
Simple version, can be more precise with Windowing, but not necessary if run as an alert on a daily basis.
Effectively, there is an event 4722 indicating a user enabled and no event 4723 indicating a password was changed within in that day or the next day.'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let starttime = 2d;
let endtime = 1d;
SecurityEvent
// include yesterday and not today, so we can confirm a match occurs within the next day
| where TimeGenerated >= startofday(ago(starttime)) and TimeGenerated <= startofday(ago(endtime))  
// 4722: User Account Enabled
| where EventID == 4722 
// Removing Machine Accounts
| where TargetUserName !endswith ""$"" 
| join kind= leftanti (
  SecurityEvent
  //verify over the last 2 days
  | where TimeGenerated >= startofday(ago(starttime))
  // Attempt made to change password
  | where EventID == 4723
  // Removing Machine Accounts
  | where TargetUserName !endswith ""$""
) on TargetUserName, TargetDomainName
| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, SubjectUserName
| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer
",yes
Potential Kerberoasting,SecurityEvent,"'A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment. 
Each SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment. 
An attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains 
a hash of the Service account. This can then be used for offline cracking. This hunting query looks for accounts that are generating excessive 
requests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number 
of request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let starttime = 1d;
let endtime = 1h;
let prev23hThreshold = 4;
let prev1hThreshold = 15;
let Kerbevent =
SecurityEvent
| where TimeGenerated >= ago(starttime)
| where EventID == 4769
| parse EventData with * 'TicketEncryptionType"">' TicketEncryptionType ""<"" *
| where TicketEncryptionType == '0x17'
| parse EventData with * 'TicketOptions"">' TicketOptions ""<"" *
| where TicketOptions == '0x40810000'
| parse EventData with * 'Status"">' Status ""<"" *
| where Status == '0x0'
| parse EventData with * 'ServiceName"">' ServiceName ""<"" *
| where ServiceName !contains ""$"" and ServiceName !contains ""krbtgt"" 
| parse EventData with * 'TargetUserName"">' TargetUserName ""<"" *
| where TargetUserName !contains ""$@"" and TargetUserName !contains ServiceName
| parse EventData with * 'IpAddress"">::ffff:' ClientIPAddress ""<"" *;
let Kerbevent23h = Kerbevent
| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)
| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName) 
by Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status
| where ServiceNameCountPrev23h < prev23hThreshold;
let Kerbevent1h = 
Kerbevent
| where TimeGenerated >= ago(endtime)
| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName) 
by Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;
Kerbevent1h 
| join kind=leftanti
(
Kerbevent23h
) on TargetUserName
// Threshold value set above is based on testing, this value may need to be changed for your environment.
| where ServiceNameCountPrev1h > prev1hThreshold
| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions, 
TicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h
| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, IPCustomEntity = ClientIPAddress
",yes
Powershell Empire cmdlets seen in command line,SecurityEvent,"'Identifies instances of PowerShell Empire cmdlets in powershell process command line data.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let regexEmpire = @""SetDelay|GetDelay|Set-LostLimit|Get-LostLimit|Set-Killdate|Get-Killdate|Set-WorkingHours|Get-WorkingHours|Get-Sysinfo|Add-Servers|Invoke-ShellCommand|Start-AgentJob|Update-Profile|Get-FilePart|Encrypt-Bytes|Decrypt-Bytes|Encode-Packet|Decode-Packet|Send-Message|Process-Packet|Process-Tasking|Get-Task|Start-Negotiate|Invoke-DllInjection|Invoke-ReflectivePEInjection|Invoke-Shellcode|Invoke-ShellcodeMSIL|Get-ChromeDump|Get-ClipboardContents|Get-IndexedItem|Get-Keystrokes|Invoke-Inveigh|Invoke-NetRipper|local:Invoke-PatchDll|Invoke-NinjaCopy|Get-Win32Types|Get-Win32Constants|Get-Win32Functions|Sub-SignedIntAsUnsigned|Add-SignedIntAsUnsigned|Compare-Val1GreaterThanVal2AsUInt|Convert-UIntToInt|Test-MemoryRangeValid|Write-BytesToMemory|Get-DelegateType|Get-ProcAddress|Enable-SeDebugPrivilege|Invoke-CreateRemoteThread|Get-ImageNtHeaders|Get-PEBasicInfo|Get-PEDetailedInfo|Import-DllInRemoteProcess|Get-RemoteProcAddress|Copy-Sections|Update-MemoryAddresses|Import-DllImports|Get-VirtualProtectValue|Update-MemoryProtectionFlags|Update-ExeFunctions|Copy-ArrayOfMemAddresses|Get-MemoryProcAddress|Invoke-MemoryLoadLibrary|Invoke-MemoryFreeLibrary|Out-Minidump|Get-VaultCredential|Invoke-DCSync|Translate-Name|Get-NetDomain|Get-NetForest|Get-NetForestDomain|Get-DomainSearcher|Get-NetComputer|Get-NetGroupMember|Get-NetUser|Invoke-Mimikatz|Invoke-PowerDump|Invoke-TokenManipulation|Exploit-JMXConsole|Exploit-JBoss|Invoke-Thunderstruck|Invoke-VoiceTroll|Set-WallPaper|Invoke-PsExec|Invoke-SSHCommand|Invoke-PSInject|Invoke-RunAs|Invoke-SendMail|Invoke-Rule|Get-OSVersion|Select-EmailItem|View-Email|Get-OutlookFolder|Get-EmailItems|Invoke-MailSearch|Get-SubFolders|Get-GlobalAddressList|Invoke-SearchGAL|Get-SMTPAddress|Disable-SecuritySettings|Reset-SecuritySettings|Get-OutlookInstance|New-HoneyHash|Set-MacAttribute|Invoke-PatchDll|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|New-ElevatedPersistenceOption|New-UserPersistenceOption|Add-Persistence|Invoke-CallbackIEX|Add-PSFirewallRules|Invoke-EventLoop|Invoke-PortBind|Invoke-DNSLoop|Invoke-PacketKnock|Invoke-CallbackLoop|Invoke-BypassUAC|Get-DecryptedCpassword|Get-GPPInnerFields|Invoke-WScriptBypassUAC|Get-ModifiableFile|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceUserAdd|Invoke-ServiceCMD|Write-UserAddServiceBinary|Write-CMDServiceBinary|Write-ServiceEXE|Write-ServiceEXECMD|Restore-ServiceEXE|Invoke-ServiceStart|Invoke-ServiceStop|Invoke-ServiceEnable|Invoke-ServiceDisable|Get-ServiceDetail|Find-DLLHijack|Find-PathHijack|Write-HijackDll|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-Webconfig|Get-ApplicationHost|Write-UserAddMSI|Invoke-AllChecks|Invoke-ThreadedFunction|Test-Login|Get-UserAgent|Test-Password|Get-ComputerDetails|Find-4648Logons|Find-4624Logons|Find-AppLockerLogs|Find-PSScriptsInPSAppLog|Find-RDPClientConnections|Get-SystemDNSServer|Invoke-Paranoia|Invoke-WinEnum{|Get-SPN|Invoke-ARPScan|Invoke-Portscan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|New-InMemoryModule|Add-Win32Type|Export-PowerViewCSV|Get-MacAttribute|Copy-ClonedFile|Get-IPAddress|Convert-NameToSid|Convert-SidToName|Convert-NT4toCanonical|Get-Proxy|Get-PathAcl|Get-NameField|Convert-LDAPProperty|Get-NetDomainController|Add-NetUser|Add-NetGroupUser|Get-UserProperty|Find-UserField|Get-UserEvent|Get-ObjectAcl|Add-ObjectAcl|Invoke-ACLScanner|Get-GUIDMap|Get-ADObject|Set-ADObject|Get-ComputerProperty|Find-ComputerField|Get-NetOU|Get-NetSite|Get-NetSubnet|Get-DomainSID|Get-NetGroup|Get-NetFileServer|SplitPath|Get-DFSshare|Get-DFSshareV1|Get-DFSshareV2|Get-GptTmpl|Get-GroupsXML|Get-NetGPO|Get-NetGPOGroup|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Invoke-ImpersonateUser|Create-ProcessWithToken|Free-AllTokens|Enum-AllTokens|Invoke-RevertToSelf|Set-Speaker(\$Volume){\$wshShell|Local:Get-RandomString|Local:Invoke-PsExecCmd|Get-GPPPassword|Local:Inject-BypassStuff|Local:Invoke-CopyFile\(\$sSource,|ind-Fruit|New-IPv4Range|New-IPv4RangeFromCIDR|Parse-Hosts|Parse-ILHosts|Exclude-Hosts|Get-TopPort|Parse-Ports|Parse-IpPorts|Remove-Ports|Write-PortscanOut|Convert-SwitchtoBool|Get-ForeignUser|Get-ForeignGroup"";
let ProcessCreationEvents=() {
let processEvents=SecurityEvent
| where EventID==4688
| where isnotempty(CommandLine)
| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;
processEvents};
let decodedPS = ProcessCreationEvents
| where TimeGenerated >= ago(timeframe) 
| where CommandLine contains "" -encodedCommand""
| parse kind=regex flags=i CommandLine with * ""-EncodedCommand "" encodedCommand
| project StartTimeUtc = TimeGenerated, encodedCommand = tostring(split(encodedCommand, ' ')[0]), CommandLine
// Note: currently the base64_decodestring function is limited to supporting UTF8
| extend decodedCommand = translate('\0','', base64_decodestring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand);
(decodedPS
| union 
(ProcessCreationEvents
| where TimeGenerated >= ago(timeframe)
| where FileName in~ (""powershell.exe"",""powershell_ise.exe"")
| where CommandLine !contains ""-encodedcommand"")
| extend StartTimeUtc = TimeGenerated
)
| where CommandLine matches regex regexEmpire
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Multiple RDP connections from Single System,SecurityEvent,"'Identifies when an RDP connection is made to multiple systems and above the normal for the previous 7 days.  
Connections from the same system with the same account within the same day.
RDP connections are indicated by the EventID 4624 with LogonType = 10'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let endtime = 1d;
let starttime = 8d;
let threshold = 2.0;
SecurityEvent
| where TimeGenerated >= ago(endtime) 
| where EventID == 4624 and LogonType == 10
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)  
by Account, IpAddress, AccountType, Activity, LogonTypeName
| join kind=inner (
SecurityEvent
| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime) 
| where EventID == 4624 and LogonType == 10
| summarize ComputerCountPrev7Days = dcount(Computer) by Account, IpAddress
) on Account, IpAddress
| extend Ratio = ComputerCountToday/(ComputerCountPrev7Days*1.0)
// Where the ratio of today to previous 7 days is more than double.
| where Ratio > threshold
| project StartTimeUtc, EndTimeUtc, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = IpAddress
",yes
RDP Nesting,SecurityEvent,"'Identifies when an RDP connection is made to a first system and then an RDP connection is made from the first system 
to another system with the same account within the 60 minutes. Additionally, if historically daily  
RDP connections are indicated by the logged EventID 4624 with LogonType = 10'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let endtime = 1d;
let starttime = 8d;
// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day.  Change the threshold as needed.
let threshold = 5;
SecurityEvent
| where TimeGenerated >= ago(endtime) 
| where EventID == 4624 and LogonType == 10
// Labeling the first RDP connection time, computer and ip
| extend FirstHop = TimeGenerated, FirstComputer = toupper(Computer), FirstIPAddress = IpAddress, Account = tolower(Account)  
| join kind=inner (
SecurityEvent
| where TimeGenerated >= ago(endtime) 
| where EventID == 4624 and LogonType == 10
// Labeling the second RDP connection time, computer and ip
| extend SecondHop = TimeGenerated, SecondComputer = toupper(Computer), SecondIPAddress = IpAddress, Account = tolower(Account)
) on Account
// Make sure that the first connection is after the second connection --> SecondHop > FirstHop
// Then identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match --> FirstComputer != SecondComputer
// Then make sure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers --> FirstIPAddress != SecondIPAddress
| where FirstComputer != SecondComputer and FirstIPAddress != SecondIPAddress and SecondHop > FirstHop
// where the second hop occurs within 30 minutes of the first hop
| where SecondHop <= FirstHop+30m
| distinct Account, FirstHop, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName
// use left anti to exclude anything from the previous 7 days where the Account and IP has connected 5 or more computers.
| join kind=leftanti (
SecurityEvent
| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime) 
| where EventID == 4624 and LogonType == 10
| summarize makeset(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress
// Connection count to computer by same account and IP to exclude counts of 5 or more on a given day
| where ComputerCount >= threshold
| mvexpand set_Computer
| extend Computer = toupper(set_Computer)
) on Account, $left.SecondComputer == $right.Computer, $left.SecondIPAddress == $right.IpAddress
| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop) by Account, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, 
SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName
| extend timestamp = FirstHopFirstSeen, AccountCustomEntity = Account, HostCustomEntity = FirstComputer, IPCustomEntity = FirstIPAddress
",yes
Rare RDP Connections,SecurityEvent,"'Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.
RDP connections are indicated by the EventID 4624 with LogonType = 10'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let starttime = 14d;
let endtime = 1d;
SecurityEvent
| where TimeGenerated >= ago(endtime) 
| where EventID == 4624 and LogonType == 10
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count() 
by Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName
// use left anti to exclude anything from the previous 14 days that is not rare
| join kind=leftanti (
SecurityEvent
| where TimeGenerated between (ago(starttime) .. ago(endtime))
| where EventID == 4624
| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)
) on Account, Computer
| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)  
by Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName
| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress
",yes
Security Event log cleared,SecurityEvent,"'Checks for event id 1102 which indicates the security event log was cleared. 
It uses Event Source Name ""Microsoft-Windows-Eventlog"" to avoid generating false positives from other sources, like AD FS servers for instance.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
SecurityEvent
| where TimeGenerated >= ago(timeframe)
| where EventID == 1102 and EventSourceName == ""Microsoft-Windows-Eventlog"" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity
| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Process execution frequency anomaly,SecurityEvent,"'Identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors. 
The query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns. 
Sudden increases in execution frequency of sensitive processes should be further investigated for malicious activity.
Tune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let starttime = 14d;
let endtime = 1d;
let timeframe = 1h;
let TotalEventsThreshold = 5;
let ExeList = dynamic([""powershell.exe"",""cmd.exe"",""wmic.exe"",""psexec.exe"",""cacls.exe"",""rundll.exe""]);
let TimeSeriesData = 
SecurityEvent
| where EventID == 4688 | extend Process = tolower(Process)
| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))
| where Process in (ExeList)
| project TimeGenerated, Computer, AccountType, Account, Process
| make-series Total=count() on TimeGenerated from ago(starttime) to ago(endtime) step timeframe by Process;
let TimeSeriesAlerts = TimeSeriesData
| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')
| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)
| where anomalies > 0
| project Process, TimeGenerated, Total, baseline, anomalies, score
| where Total > TotalEventsThreshold;
TimeSeriesAlerts
| join (
SecurityEvent
| where EventID == 4688 | extend Process = tolower(Process)
| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account
) on Process, TimeGenerated 
| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score 
| extend timestamp = AnomalyHour, AccountCustomEntity = Account, HostCustomEntity = Computer
",yes
Account added and removed from privileged groups,SecurityEvent,"'Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise.' 
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let WellKnownLocalSID = ""S-1-5-32-5[0-9][0-9]$"";
let WellKnownGroupSID = ""S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$"";
let AC_Add = 
SecurityEvent
| where TimeGenerated >= ago(timeframe)
// Event ID related to member addition.
| where EventID in (4728, 4732,4756) 
| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID  
| parse EventData with * '""MemberName"">' AccountAdded "",OU"" * 
| where isnotempty(AccountAdded)
| extend GroupAddedTo = TargetUserName, AddingAccount = Account 
| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, ""||"", GroupAddedTo, ""||"", AddingAccount )
| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated;
let AC_Remove = 
SecurityEvent
| where TimeGenerated >= ago(timeframe)
// Event IDs related to member removal.
| where EventID in (4729,4733,4757)
| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID 
| parse EventData with * '""MemberName"">' AccountRemoved "",OU"" * 
| where isnotempty(AccountRemoved)
| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account
| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, ""||"", GroupRemovedFrom, ""||"", RemovingAccount)
| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, RemovedAccountId = tolower(AccountRemoved), 
RemovedByUser = SubjectUserName, RemovedByUserLogonId = SubjectLogonId,  GroupRemovedFrom = TargetUserName, TargetDomainName; 
AC_Add 
| join kind= inner AC_Remove on $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount 
| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)
| where DurationinSecondAfter_Removed > 0
| project-away AccountRemoved_GroupRemovedFrom_RemovingAccount
| extend timestamp = AccountAddedTime, AccountCustomEntity = RemovedAccountId, HostCustomEntity = Computer
",yes
User account added to built in domain local or global group,SecurityEvent,"'Identifies when a user account has been added to a privileged built in domain local group or global group 
such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition.'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups
let WellKnownLocalSID = ""S-1-5-32-5[0-9][0-9]$"";
let WellKnownGroupSID = ""S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$"";
SecurityEvent 
| where TimeGenerated > ago(timeframe)
// When MemberName contains '-' this indicates addition of a group to a group
| where AccountType == ""User"" and MemberName != ""-""
// 4728 - A member was added to a security-enabled global group
// 4732 - A member was added to a security-enabled local group
// 4756 - A member was added to a security-enabled universal group
| where EventID in (4728, 4732, 4756)   
| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID
// Exclude Remote Desktop Users group: S-1-5-32-555
| where TargetSid !in (""S-1-5-32-555"")
| extend SimpleMemberName = tostring(split(tostring(split(MemberName, "","")[0]),""CN="")[1])
| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, SimpleMemberName, MemberName, MemberSid, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid
| extend timestamp = StartTimeUtc, AccountCustomEntity = SimpleMemberName, HostCustomEntity = Computer
",yes
User account created and deleted within 10 mins,SecurityEvent,"'Identifies when a user account is created and then deleted within 10 minutes. This can be an indication of compromise and
an adversary attempting to hide in the noise.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let spanoftime = 10m;
let threshold = 0;
SecurityEvent 
| where TimeGenerated > ago(2*timeframe) 
// A user account was created
| where EventID == 4720
| where AccountType =~ ""User""
| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, 
AccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid 
| join kind= inner (
  SecurityEvent
  | where TimeGenerated > ago(timeframe) 
  // A user account was deleted 
  | where EventID == 4726
| where AccountType == ""User""
| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, 
AccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid 
) on Computer, TargetUserName
| where deletionTime - creationTime < spanoftime
| extend TimeDelta = deletionTime - creationTime
| where tolong(TimeDelta) >= threshold
| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, 
deletionTime, DeleteEventID, AccountUsedToDelete
| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer
",yes
User account enabled and disabled within 10 mins,SecurityEvent,"'Identifies when a user account is enabled and then disabled within 10 minutes. This can be an indication of compromise and
an adversary attempting to hide in the noise.'
",Medium,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
let spanoftime = 10m;
let threshold = 0;
SecurityEvent 
| where TimeGenerated > ago(2*timeframe) 
// A user account was enabled
| where EventID == 4722
| where AccountType =~ ""User""
| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, 
AccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid 
| join kind= inner (
  SecurityEvent
  | where TimeGenerated > ago(timeframe) 
  // A user account was disabled 
  | where EventID == 4725
| where AccountType == ""User""
| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, 
AccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid 
) on Computer, TargetUserName
| where deletionTime - creationTime < spanoftime
| extend TimeDelta = deletionTime - creationTime
| where tolong(TimeDelta) >= threshold
| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, 
deletionTime, DeleteEventID, AccountUsedToDelete
| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer
",yes
New user created and added to the built-in administrators group,SecurityEvent,"'Identifies when a user account was created and then added to the builtin Administrators group in the same day.
This should be monitored closely and all additions reviewed.'
",Low,"{
    ""connectorId"":  ""SecurityEvents"",
    ""dataTypes"":  [
                      ""SecurityEvent""
                  ]
}","
let timeframe = 1d;
SecurityEvent
| where TimeGenerated > ago(timeframe) 
| where EventID == 4720
| where AccountType == ""User""
| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer), 
CreatedUser = tolower(TargetUserName), Domain = toupper(TargetDomainName), CreatedUserSid = TargetSid, AccountUsedToCreateUser = SubjectUserName
|join (
SecurityEvent 
| where TimeGenerated > ago(timeframe) 
| where AccountType == ""User""
// 4732 - A member was added to a security-enabled local group
| where EventID == 4732
//TargetSid is the builin Admins group: S-1-5-32-544
| where TargetSid == ""S-1-5-32-544""
| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = TargetUserName, 
Domain = toupper(TargetDomainName), GroupSid = TargetSid, UserAdded = SubjectUserName, UserAddedSid = SubjectUserSid, CreatedUser = tolower(SubjectUserName), 
CreatedUserSid = MemberSid
)
on CreatedUserSid
//Create User first, then the add to the group.
| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, Domain, GroupAddTime, GroupAddEventID, 
GroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, UserAdded, UserAddedSid 
| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer
",yes
Anomalous sign-in location by user account and authenticating application,SigninLogs,"'This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active 
Directory application and picks out the most anomalous change in location profile for a user within an 
individual application. An alert is generated for recent sign-ins that have location counts that are anomalous
over last day but also over the last 7-day and 14-day periods.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let lookBack_long = 14d;
let lookBack_med = 7d;
let lookBack = 1d;
SigninLogs
| where TimeGenerated >= startofday(ago(lookBack_long))
| extend locationString = strcat(tostring(LocationDetails[""countryOrRegion""]), ""/"", tostring(LocationDetails[""state""]), ""/"", tostring(LocationDetails[""city""]), "";"") 
| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString 
// Create time series 
| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_long)),now(), 1d) 
by UserPrincipalName, AppDisplayName 
// Compute best fit line for each entry 
| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) 
// Chart the 3 most interesting lines  
// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application
| where Slope > 0.3
| top 50 by Slope desc
| join kind = leftsemi (
SigninLogs
| where TimeGenerated >= startofday(ago(lookBack_med))
| extend locationString = strcat(tostring(LocationDetails[""countryOrRegion""]), ""/"", tostring(LocationDetails[""state""]), ""/"", tostring(LocationDetails[""city""]), "";"") 
| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString 
| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_med)) ,now(), 1d) 
by UserPrincipalName, AppDisplayName 
| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) 
| top 50 by Slope desc
| where Slope > 0.3
) on UserPrincipalName, AppDisplayName
| join kind = leftsemi (
SigninLogs
| where TimeGenerated >= startofday(ago(lookBack))
| extend locationString = strcat(tostring(LocationDetails[""countryOrRegion""]), ""/"", tostring(LocationDetails[""state""]), ""/"", tostring(LocationDetails[""city""]), "";"") 
| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString 
| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack)) ,now(), 1d) 
by UserPrincipalName, AppDisplayName 
| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) 
| top 50 by Slope desc
// Higher threshold requirement on last day anomaly
| where Slope > 5
) on UserPrincipalName, AppDisplayName
| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName
",yes
Brute Force Attack against GitHub Account,SigninLogs,"'Attackers who are trying to guess your users' passwords or use brute-force methods to get in. If your organization is using SSO with Azure Active Directory, authentication logs to GitHub.com will be generated. Using the following query can help you identify a sudden increase in failed logon attempt of users.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let LearningPeriod = 7d; 
let BinTime = 1h; 
let RunTime = 1h; 
let StartTime = 1h; 
let NumberOfStds = 3; 
let MinThreshold = 10.0; 
let EndRunTime = StartTime - RunTime; 
let EndLearningTime = StartTime + LearningPeriod; 
let GitHubFailedSSOLogins = (SigninLogs 
| where AppDisplayName contains ""GitHub"" 
| where ResultType == 50056); 
GitHubFailedSSOLogins 
| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime)) 
| summarize FailedLoginsCountInBinTime = count() by User = Identity, bin(TimeGenerated, BinTime) 
| summarize AvgOfFailedLoginsInLearning = avg(FailedLoginsCountInBinTime), StdOfFailedLoginsInLearning = stdev(FailedLoginsCountInBinTime) by User 
| extend LearningThreshold = max_of(AvgOfFailedLoginsInLearning + StdOfFailedLoginsInLearning * NumberOfStds, MinThreshold) 
| join kind=innerunique ( 
  GitHubFailedSSOLogins 
  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime)) 
  | summarize FailedLoginsCountInRunTime = count() by User = Identity 
) on User 
| where FailedLoginsCountInRunTime > LearningThreshold
//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",yes
Attempt to bypass conditional access rule in Azure AD,SigninLogs,"'Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.
The ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access
or if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).
References: 
https://docs.microsoft.com/azure/active-directory/conditional-access/overview
https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins
https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes
ConditionalAccessStatus == 0 // Success
ConditionalAccessStatus == 1 // Failure
ConditionalAccessStatus == 2 // Not Applied
ConditionalAccessStatus == 3 // unknown'
",Low,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeRange = ago(1d);
let threshold = 1;
SigninLogs
| where TimeGenerated >= timeRange
| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ ""failure""
| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser 
| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)
| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)
| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)
| extend Status = strcat(StatusCode, "": "", ResultDescription) 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name
| where IPAddressCount > threshold and StatusDetails !has ""MFA successfully completed""
| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds
| extend Status = strcat(Status, "" "", StatusDetails)
| summarize IPAddresses = makeset(IPAddresses), Status = makeset(Status), CorrelationIds = makeset(CorrelationIds) by StartTimeUtc, EndTimeUtc, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)
",yes
Attempts to sign in to disabled accounts,SigninLogs,"'Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.
Default threshold for Azure Applications attempted to sign in to is 3.
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes
50057 - User account is disabled. The account has been disabled by an administrator.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeframe = 1d;
let threshold = 3;
SigninLogs
| where TimeGenerated >= ago(timeframe)
| where ResultType == ""50057""
| where ResultDescription contains ""User account is disabled""
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(), applicationCount = dcount(AppDisplayName), 
applicationSet = makeset(AppDisplayName) by UserPrincipalName, IPAddress
| where applicationCount >= threshold
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress 
",yes
Distributed Password cracking attempts in AzureAD,SigninLogs,"'Identifies distributed password cracking attempts from the Azure Active Directory SigninLogs.
The query looks for unusually high number of failed password attempts coming from multiple locations for a user account.
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes
50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.
50055   Invalid password, entered expired password.
50056   Invalid or null password - Password does not exist in store for this user.
50126   Invalid username or password, or invalid on-premises username or password.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeRange = 1d;
let s_threshold = 30;
let l_threshold = 3;
SigninLogs
| where TimeGenerated >= ago(timeRange)
| where OperationName =~ ""Sign-in activity""
// Error codes that we want to look at as they are related to the use of incorrect password.
| where ResultType in (""50126"", ""50053"" , ""50055"", ""50056"")
| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser 
| extend LocationString= strcat(tostring(LocationDetails[""countryOrRegion""]), ""/"", tostring(LocationDetails[""state""]), ""/"", tostring(LocationDetails[""city""]))
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),LocationCount=dcount(LocationString), Location = make_set(LocationString), 
IPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), 
Browser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName                               
// Setting a generic threshold - Can be different for different environment
| where SigninCount > s_threshold and LocationCount >= l_threshold
| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)
| distinct *
| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",yes
Failed login attempts to Azure Portal,SigninLogs,"'Identifies failed login attempts in the Azure Active Directory SigninLogs to the Azure Portal.  Many failed logon 
attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.  
The following are excluded due to success and non-failure results:
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes
0 - successful logon
50125 - Sign-in was interrupted due to a password reset or password registration entry.
50140 - This error occurred due to 'Keep me signed in' interrupt when the user was signing-in.'
",Low,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeRange = 1d;
let lookBack = 7d;
let threshold_Failed = 5;
let threshold_FailedwithSingleIP = 20;
let threshold_IPAddressCount = 2;
let isGUID = ""[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"";
let azPortalSignins = materialize(SigninLogs
| where TimeGenerated >= ago(lookBack)
// Azure Portal only
| where AppDisplayName =~ ""Azure Portal"")
;
let successPortalSignins = azPortalSignins
| where TimeGenerated >= ago(timeRange)
// Azure Portal only and exclude non-failure Result Types
| where ResultType in (""0"", ""50125"", ""50140"")
// Tagging identities not resolved to friendly names
//| extend Unresolved = iff(Identity matches regex isGUID, true, false)
| distinct TimeGenerated, UserPrincipalName, Id, ResultType
;
let failPortalSignins = azPortalSignins
| where TimeGenerated >= ago(timeRange)
// Azure Portal only and exclude non-failure Result Types
| where ResultType !in (""0"", ""50125"", ""50140"")
// Tagging identities not resolved to friendly names
| extend Unresolved = iff(Identity matches regex isGUID, true, false)
;
// Verify there is no success for the same connection attempt after the fail
let failnoSuccess = failPortalSignins | join kind= leftouter (
   successPortalSignins 
) on UserPrincipalName, Id
| where TimeGenerated > TimeGenerated1
| project-away TimeGenerated1, UserPrincipalName1, Id1, ResultType1
;
// Lookup up resolved identities from last 7 days
let identityLookup = azPortalSignins
| where TimeGenerated >= ago(lookBack)
| where not(Identity matches regex isGUID)
| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;
// Join resolved names to unresolved list from portal signins
let unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (
   identityLookup 
) on UserId
| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName
| project-away lu_UserDisplayName, lu_UserPrincipalName;
// Join Signins that had resolved names with list of unresolved that now have a resolved name
let u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;
u_azPortalSignins
| extend Status = strcat(ResultType, "": "", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)
| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)
| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()
by UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation
| mvexpand TimeGenerated, IPAddresses, Status
| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)
| project-away IPAddresses
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation
| where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP
| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",yes
GitHub Signin Burst from Multiple Locations,SigninLogs,"'This alerts when there Signin burst from multiple locations in GitHub (AAD SSO).'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let RunTime = 1h;
SigninLogs
| where TimeGenerated > ago(RunTime)
| where AppDisplayName contains ""GitHub""
| where ResultType == 0
| summarize CountOfLocations = dcount(Location), Locations = make_set(Location) by User = Identity
| where CountOfLocations > 1
//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
",yes
Sign-ins from IPs that attempt sign-ins to disabled accounts,SigninLogs,"'Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes
50057 - User account is disabled. The account has been disabled by an administrator.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let lookBack = 1d;
SigninLogs 
| where TimeGenerated >= ago(lookBack)
| where ResultType == ""50057"" 
| where ResultDescription contains ""User account is disabled"" 
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), disabledAccountLoginAttempts = count(), 
disabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), 
applicationSet = makeset(AppDisplayName) by IPAddress
| order by disabledAccountLoginAttempts desc
| join kind= leftouter (
    // Consider these IPs suspicious - and alert any related  successful sign-ins
    SigninLogs
    | where TimeGenerated >= ago(lookBack)
    | where ResultType == 0
    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress
    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe
    | where successfulAccountSigninCount < 100
) on IPAddress  
// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account
| where successfulAccountSigninCount != 0
| project StartTimeUtc, EndTimeUtc, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, 
successfulAccountSigninCount, successfulAccountSigninSet
| order by disabledAccountLoginAttempts
| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress
",yes
Brute force attack against Azure Portal,SigninLogs,"'Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures 
and by a successful authentication within a given time window. 
(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)
Default Failure count is 5, Default Success count is 1 and default Time Window is 20 minutes.
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let failureCountThreshold = 5;
let successCountThreshold = 1;
let timeRange = 1d;
let authenticationWindow = 20m;
SigninLogs
| where TimeGenerated >= ago(timeRange)
| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser
| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)
| where AppDisplayName contains ""Azure Portal""
// Split out failure versus non-failure types
| extend FailureOrSuccess = iff(ResultType in (""0"", ""50125"", ""50140"", ""70043"", ""70044""), ""Success"", ""Failure"")
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddress = makeset(IPAddress), makeset(OS), makeset(Browser), makeset(City), 
makeset(ResultType), FailureCount = countif(FailureOrSuccess==""Failure""), SuccessCount = countif(FailureOrSuccess==""Success"") 
by bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName, AppDisplayName
| where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold
| mvexpand IPAddress
| extend IPAddress = tostring(IPAddress)
| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress 
",yes
Password spray attack against Azure AD application,SigninLogs,"'Identifies evidence of password spray activity against Azure AD applications by looking for failures from multiple accounts from the same
IP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range
are bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.
This can be an indicator that an attack was successful.
The default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 3 days
Note: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.
References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeRange = 3d;
let lookBack = 7d;
let authenticationWindow = 20m;
let authenticationThreshold = 5;
let isGUID = ""[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"";
let failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password
let successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);
// Lookup up resolved identities from last 7 days
let identityLookup = SigninLogs
| where TimeGenerated >= ago(lookBack)
| where not(Identity matches regex isGUID)
| where isnotempty(UserId)
| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;
// collect window threshold breaches
SigninLogs
| where TimeGenerated > ago(timeRange)
| where ResultType in(failureCodes)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName
| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName
| where FailedPrincipalCount >= authenticationThreshold
| summarize WindowThresholdBreaches = count() by IPAddress
| join kind= inner (
// where we breached a threshold, join the details back on all failure data
 SigninLogs
| where TimeGenerated > ago(timeRange)
| where ResultType in(failureCodes)
| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId
// lookup any unresolved identities
| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, """")
| join kind= leftouter (
 identityLookup 
) on $left.UnresolvedUserId==$right.UserId
| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)
| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)
| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName
| extend FailedPrincipalCount = arraylength(set_UserPrincipalName)
) on IPAddress
| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches
| join kind= inner (
SigninLogs // get data on success vs. failure history for each IP
| where TimeGenerated > ago(timeRange)
| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types
| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress
| where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures
) on IPAddress
| project-away IPAddress1
| extend timestamp=StartTime, IPCustomEntity = IPAddress
",yes
Successful logon from IP and failure from a different IP,SigninLogs,"'Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP.
This may indicate a malicious attempt at password guessing based on knowledge of the users account.'
",Medium,"{
    ""connectorId"":  ""AzureActiveDirectory"",
    ""dataTypes"":  [
                      ""SigninLogs""
                  ]
}","
let timeFrame = 1d;
let logonDiff = 10m;
SigninLogs 
| where TimeGenerated >= ago(timeFrame) 
| where ResultType == ""0"" 
| where AppDisplayName !in (""Office 365 Exchange Online"", ""Skype for Business Online"")
| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, ""."")[0], ""."", split(IPAddress, ""."")[1])
| join kind= inner (
    SigninLogs 
    | where TimeGenerated >= ago(timeFrame) 
    | where ResultType !in (""0"", ""50140"") 
    | where ResultDescription !~ ""Other""  
    | where AppDisplayName !in (""Office 365 Exchange Online"", ""Skype for Business Online"")
    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription
) on UserPrincipalName, AppDisplayName 
| where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock
| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription 
| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress
",yes
Excessive Amount of Denied Connections from a Single Source,SophosXGFirewall,"'This creates an incident in the event that a single source IP address generates a excessive amount of denied connections.'
",Medium,"{
    ""connectorId"":  ""SophosXGFirewall"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 5000;
SophosXGFirewall
| where TimeGenerated >= timeframe
| where Log_Type =~ ""Firewall"" and Status =~ ""Deny""
| summarize count() by Src_IP, bin(TimeGenerated,5m)
| where count_ > threshold
| extend timestamp = TimeGenerated, IPCustomEntity = Src_IP
",no
Port Scan Detected,SophosXGFirewall,"'This alert creates an incident when a source IP addresses attempt to communicate with a large amount of distinct ports within a short period.'
",Medium,"{
    ""connectorId"":  ""SophosXGFirewall"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 50;
SophosXGFirewall
| where TimeGenerated >= timeframe
| where Log_Type =~ ""Firewall""
| where not(ipv4_is_match(""10.0.0.0"",Src_IP,8) or ipv4_is_match(""172.16.0.0"",Src_IP,12) or ipv4_is_match(""192.168.0.0"",Src_IP,16))
| summarize dcount(Dst_Port) by Src_IP, bin(TimeGenerated, 5m)
| where dcount_Dst_Port > threshold
| extend timestamp = TimeGenerated, IPCustomEntity = Src_IP
",no
Excessive Denied Proxy Traffic,SymantecProxySG,"'This alert creates an incident when a client generates an excessive amounts of denied proxy traffic.'
",Low,"{
    ""connectorId"":  ""SymantecProxySG"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 100;
SymantecProxySG 
| where TimeGenerated >= timeframe
| where sc_filter_result =~ ""DENIED""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by c_ip, cs_host
| where count_ > threshold
| extend timestamp = StartTime, HostCustomEntity = cs_host, IPCustomEntity = c_ip
",no
User Accessed Suspicious URL Categories,SymantecProxySG,"'Creates an incident in the event the requested URL accessed by the user has been identified as Suspicious, Phishing, or Hacking.'
",Medium,"{
    ""connectorId"":  ""SymantecProxySG"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
SymantecProxySG
| where TimeGenerated >= timeframe
| mv-expand cs_categories
| where cs_categories has_any (""Suspicious"",""phishing"", ""hacking"")
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by sc_filter_result, cs_userdn, c_ip, cs_host, Computer,  tostring(cs_categories)
| extend timestamp = StartTime, AccountCustomEntity = cs_userdn, IPCustomEntity = c_ip, HostCustomEntity = Computer
",no
ClientDeniedAccess,SymantecVIP,"'Creates an incident in the event a Client has an excessive amounts of denied access requests.'
",Medium,"{
    ""connectorId"":  ""SymantecVIP"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 15;
let rejectedAccess = SymantecVIP
| where TimeGenerated > timeframe
| where isnotempty(RADIUSAuth)
| where RADIUSAuth =~ ""Reject""
| summarize Total = count() by ClientIP, bin(TimeGenerated, 15m)
| where Total > threshold
| project ClientIP;
SymantecVIP
| where TimeGenerated > timeframe
| where isnotempty(RADIUSAuth)
| where RADIUSAuth =~ ""Reject""
| join kind=inner rejectedAccess() on ClientIP
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by ClientIP, User
| extend timestamp = StartTime, IPCustomEntity = ClientIP, AccountCustomEntity = User
",no
Excessive Failed Authentication from Invalid Inputs,SymantecVIP,"'Creates an incident in the event that a user generates an excessive amount of failed authentications due to invalid inputs, indications of a potential brute force.'
",Medium,"{
    ""connectorId"":  ""SymantecVIP"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = ago(1h);
let threshold = 15;
SymantecVIP
| where TimeGenerated > timeframe
| where isnotempty(RADIUSAuth)
| where RADIUSAuth =~ ""Reject""
| summarize Total = count() by bin(TimeGenerated, 15m), User, ClientIP
| where Total > threshold
| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = User
",no
Failed logon attempts in authpriv,Syslog,"'Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in 
isn't provisioned on the machine. A few hits could indicate someone attempting to access a machine they aren't authorized to access. 
If there are many of hits, especially from outside your network, it could indicate a brute force attack. 
Default threshold for logon attempts is 15.'
",Medium,"{
    ""connectorId"":  ""Syslog"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let startdate = 1d;
let threshold = 15;
// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.
// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages
// are aggregated.
let authfail = Syslog
| where TimeGenerated >= ago(startdate)     
| where Facility =~ ""authpriv""   // looks at authpriv messages
| where SyslogMessage contains ""authentication failure"" and SyslogMessage contains "" uid=0""
| parse SyslogMessage with * ""rhost="" ExternalIP
| project TimeGenerated, Computer, ProcessName, HostIP, ExternalIP, ProcessID;  
// Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. 
let userfail = Syslog 
| where TimeGenerated >= ago(startdate)
| where Facility =~ ""authpriv"" 
| where SyslogMessage contains ""user unknown""
| project TimeGenerated, Computer, HostIP, ProcessID;
// Join the two log messages above
let userauthfail = authfail | join (userfail) on Computer, HostIP, ProcessID
| project TimeGenerated, Computer, HostIP, ExternalIP, ProcessID ;
// Extract the EventTime of the first logon attempt
let firstfail = userauthfail
| summarize arg_min(TimeGenerated, *) by Computer, ExternalIP
| project Computer, ExternalIP, FirstLogonAttempt = TimeGenerated;
// Extract the EventTime of the last logon attempt
let lastfail = userauthfail
| summarize arg_max(TimeGenerated, *) by Computer, ExternalIP
| project Computer, ExternalIP, LatestLogonAttempt = TimeGenerated;
// Join first and last logon attempt data and calculate the time between them (AttemptPeriodLength).
let faildates = firstfail | join (lastfail) on Computer, ExternalIP
| project ExternalIP, Computer, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt;
// Count the number of failed logon attempts by External IP and internal machine
let totalfails = userauthfail
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TotalLogonAttempts = count() by ExternalIP, Computer, HostIP
| project StartTimeUtc, EndTimeUtc, ExternalIP, Computer, HostIP, TotalLogonAttempts;
// Combine total attempts with timing data from above
let finalfails = totalfails | join (faildates) on Computer, ExternalIP
| project StartTimeUtc, EndTimeUtc, SourceAddress = ExternalIP, DestinationHost = Computer, DestinationIP = HostIP, TotalLogonAttempts, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts
| order by DestinationHost asc nulls last;
finalfails 
| where TotalLogonAttempts >= threshold
| extend timestamp = StartTimeUtc, HostCustomEntity = DestinationHost, IPCustomEntity = DestinationIP
",yes
Squid proxy events related to mining pools,Syslog,"'Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used. 
 http://www.squid-cache.org/Doc/config/access_log/'
",Low,"{
    ""connectorId"":  ""Syslog"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = 1d;
let DomainList = dynamic([""monerohash.com"", ""do-dear.com"", ""xmrminerpro.com"", ""secumine.net"", ""xmrpool.com"", ""minexmr.org"", ""hashanywhere.com"", ""xmrget.com"", 
""mininglottery.eu"", ""minergate.com"", ""moriaxmr.com"", ""multipooler.com"", ""moneropools.com"", ""xmrpool.eu"", ""coolmining.club"", ""supportxmr.com"",
""minexmr.com"", ""hashvault.pro"", ""xmrpool.net"", ""crypto-pool.fr"", ""xmr.pt"", ""miner.rocks"", ""walpool.com"", ""herominers.com"", ""gntl.co.uk"", ""semipool.com"", 
""coinfoundry.org"", ""cryptoknight.cc"", ""fairhash.org"", ""baikalmine.com"", ""tubepool.xyz"", ""fairpool.xyz"", ""asiapool.io"", ""coinpoolit.webhop.me"", ""nanopool.org"", 
""moneropool.com"", ""miner.center"", ""prohash.net"", ""poolto.be"", ""cryptoescrow.eu"", ""monerominers.net"", ""cryptonotepool.org"", ""extrmepool.org"", ""webcoin.me"", 
""kippo.eu"", ""hashinvest.ws"", ""monero.farm"", ""supportxmr.com"", ""xmrpool.eu"", ""linux-repository-updates.com"", ""1gh.com"", ""dwarfpool.com"", ""hash-to-coins.com"", 
""hashvault.pro"", ""pool-proxy.com"", ""hashfor.cash"", ""fairpool.cloud"", ""litecoinpool.org"", ""mineshaft.ml"", ""abcxyz.stream"", ""moneropool.ru"", ""cryptonotepool.org.uk"",
""extremepool.org"", ""extremehash.com"", ""hashinvest.net"", ""unipool.pro"", ""crypto-pools.org"", ""monero.net"", ""backup-pool.com"", ""mooo.com"", ""freeyy.me"", ""cryptonight.net"",
""shscrypto.net""]);
Syslog
| where TimeGenerated >= ago(timeframe)
| where ProcessName contains ""squid""
| extend URL = extract(""(([A-Z]+ [a-z]{4,5}:\\/\\/)|[A-Z]+ )([^ :]*)"",3,SyslogMessage), 
        SourceIP = extract(""([0-9]+ )(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3}))"",2,SyslogMessage), 
        Status = extract(""(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))"",1,SyslogMessage), 
        HTTP_Status_Code = extract(""(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})"",8,SyslogMessage),
        User = extract(""(CONNECT |GET )([^ ]* )([^ ]+)"",3,SyslogMessage),
        RemotePort = extract(""(CONNECT |GET )([^ ]*)(:)([0-9]*)"",4,SyslogMessage),
        Domain = extract(""(([A-Z]+ [a-z]{4,5}:\\/\\/)|[A-Z]+ )([^ :\\/]*)"",3,SyslogMessage),
        Bytes = toint(extract(""([A-Z]+\\/[0-9]{3} )([0-9]+)"",2,SyslogMessage)),
        contentType = extract(""([a-z/]+$)"",1,SyslogMessage)
| extend TLD = extract(""\\.[a-z]*$"",0,Domain)
| where HTTP_Status_Code == '200'
| where Domain contains "".""
| where Domain has_any (DomainList)
| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User
",yes
Squid proxy events for ToR proxies,Syslog,"'Check for Squid proxy events associated with common ToR proxies. This query presumes the default squid log format is being used.
http://www.squid-cache.org/Doc/config/access_log/'
",Low,"{
    ""connectorId"":  ""Syslog"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let timeframe = 1d;
let DomainList = dynamic([""tor2web.org"", ""tor2web.com"", ""torlink.co"", ""onion.to"", ""onion.ink"", ""onion.cab"", ""onion.nu"", ""onion.link"", 
""onion.it"", ""onion.city"", ""onion.direct"", ""onion.top"", ""onion.casa"", ""onion.plus"", ""onion.rip"", ""onion.dog"", ""tor2web.fi"", 
""tor2web.blutmagie.de"", ""onion.sh"", ""onion.lu"", ""onion.pet"", ""t2w.pw"", ""tor2web.ae.org"", ""tor2web.io"", ""tor2web.xyz"", ""onion.lt"", 
""s1.tor-gateways.de"", ""s2.tor-gateways.de"", ""s3.tor-gateways.de"", ""s4.tor-gateways.de"", ""s5.tor-gateways.de"", ""hiddenservice.net""]);
Syslog
| where TimeGenerated >= ago(timeframe)
| where ProcessName contains ""squid""
| extend URL = extract(""(([A-Z]+ [a-z]{4,5}:\\/\\/)|[A-Z]+ )([^ :]*)"",3,SyslogMessage), 
        SourceIP = extract(""([0-9]+ )(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3}))"",2,SyslogMessage), 
        Status = extract(""(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))"",1,SyslogMessage), 
        HTTP_Status_Code = extract(""(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})"",8,SyslogMessage),
        User = extract(""(CONNECT |GET )([^ ]* )([^ ]+)"",3,SyslogMessage),
        RemotePort = extract(""(CONNECT |GET )([^ ]*)(:)([0-9]*)"",4,SyslogMessage),
        Domain = extract(""(([A-Z]+ [a-z]{4,5}:\\/\\/)|[A-Z]+ )([^ :\\/]*)"",3,SyslogMessage),
        Bytes = toint(extract(""([A-Z]+\\/[0-9]{3} )([0-9]+)"",2,SyslogMessage)),
        contentType = extract(""([a-z/]+$)"",1,SyslogMessage)
| extend TLD = extract(""\\.[a-z]*$"",0,Domain)
| where HTTP_Status_Code == ""200""
| where Domain contains "".""
| where Domain has_any (DomainList)
| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User
",yes
New internet-exposed SSH endpoints,Syslog,"'Looks for SSH endpoints with a history of sign-ins only from private IP addresses are accessed from a public IP address.'
",Medium,"{
    ""connectorId"":  ""Syslog"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","
let PrivateIPregex = @'^127\.|^10\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-1]\.|^192\.168\.'; 
let avgthreshold = 0;
let probabilityLimit = 0.01;
let startime = 7d;
let ssh_logins = Syslog
| where TimeGenerated >= ago(startime)
| where Facility contains ""auth"" and ProcessName =~ ""sshd""
| where SyslogMessage has ""Accepted""
| extend SourceIP = extract(""(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))"",1,SyslogMessage) 
| where isnotempty(SourceIP)
| extend ipType = iff(SourceIP matches regex PrivateIPregex,""private"" ,""public"");
ssh_logins 
| summarize privatecount=countif(ipType==""private""), publiccount=countif(ipType==""public"") by HostName, HostIP, bin(EventTime, 1d)
| summarize 
publicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),
privateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP
| mv-apply publicIPLoginHistory = publicIPLoginHistory on
(
    order by todatetime(publicIPLoginHistory['logon_time']) asc
    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))
)
| mv-apply privateIPLoginHistory = privateIPLoginHistory on
(
    order by todatetime(privateIPLoginHistory['logon_time']) asc
    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))
)
// Some logins from private IPs
| where privateAverage > avgthreshold
// There is a non-zero number of logins from public IPs
| where publicAverage > avgthreshold
// Approximate probability of seeing login from a public IP is < 1%
| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)
| where probabilityPublic < probabilityLimit
// Today has the highest number of logins from public IPs that we've seen in the last week
| extend publicLoginCountToday = publicIPLoginCountList[-1]
| where publicLoginCountToday >= maxPublicLoginCount
| extend HostCustomEntity = HostName
// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect
// | join kind=rightsemi (
//   ssh_logins
//  | where ipType == ""public""
//  ) on HostName
",yes
SSH - Potential Brute Force,Syslog,"'Identifies an IP address that had 15 failed attempts to sign in via SSH in a 4 hour block during a 24 hour time period.'
",Low,"{
    ""connectorId"":  ""Syslog"",
    ""dataTypes"":  [
                      ""Syslog""
                  ]
}","let timeframe = 1d;
let threshold = 15;
Syslog
| where TimeGenerated >= ago(timeframe)
| where SyslogMessage contains ""Failed password for""
| where ProcessName =~ ""sshd"" 
| parse kind=relaxed SyslogMessage with * ""Failed password for "" user "" from "" ip "" port"" port "" ssh2""
| project user, ip, port, SyslogMessage, EventTime
| summarize EventTimes = make_list(EventTime), PerHourCount = count() by ip, bin(EventTime, 4h), user
//| where PerHourCount > threshold
| mvexpand EventTimes
| extend EventTimes = tostring(EventTimes) 
| summarize StartTimeUtc = min(EventTimes), EndTimeUtc = max(EventTimes), UserList = makeset(user), sum(PerHourCount) by IPAddress = ip
| extend UserList = tostring(UserList) 
| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress, AccountCustomEntity = UserList
",yes
(Preview) TI map Domain entity to CommonSecurityLog,ThreatIntelligenceIndicator,"'Identifies a match in CommonSecurityLog table from any Domain IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","let dt_lookBack = 1h;
let ioc_lookBack = 14d;
//Create a list of TLDs in our threat feed for later validation of extracted domains
let list_tlds = ThreatIntelligenceIndicator
    | where TimeGenerated > ago(ioc_lookBack)
    | where isnotempty(DomainName)
    | extend DomainName = tolower(DomainName)
    | extend parts = split(DomainName, '.')
    | extend tld = parts[(array_length(parts)-1)]
    | summarize count() by tostring(tld)
    | summarize make_list(tld);
    ThreatIntelligenceIndicator
    | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
    | where Active == true
    // Picking up only IOC's that contain the entities we want
    | where isnotempty(DomainName)
    | join (
        CommonSecurityLog
        | extend IngestionTime = ingestion_time()
        | where IngestionTime > ago(dt_lookBack)
        | where DeviceEventClassID =~ 'url'
        //Uncomment the line below to only alert on allowed connections
        //| where DeviceAction !~ ""block-url""
        //Extract domain from RequestURL, if not present extarct it from AdditionalExtentions
        | extend PA_Url = columnifexists(""RequestURL"", ""None"")
        | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith ""PanOS"", extract(""([^\""]+)"", 1, tolower(AdditionalExtensions)), trim('""', PA_Url))
        | extend PA_Url = iif(PA_Url !startswith ""http://"" and ApplicationProtocol !~ ""ssl"", strcat('http://', PA_Url), iif(PA_Url !startswith ""https://"" and ApplicationProtocol =~ ""ssl"", strcat('https://', PA_Url), PA_Url))
        | extend Domain = trim(@"""""""",tostring(parse_url(PA_Url).Host))
        | where isnotempty(Domain)
        | extend Domain = tolower(Domain)
        | extend parts = split(Domain, '.')
        //Split out the TLD for the purpose of checking if we have any TI indicators with this TLD to match on
        | extend tld = parts[(array_length(parts)-1)]
        //Validate parsed domain by checking TLD against TLDs from threat feed and drop domains where there is no chance of a match
        | where tld in~ (list_tlds)
        | extend CSL_TimeGenerated = TimeGenerated
    ) on $left.DomainName==$right.Domain
    | project LatestIndicatorTime, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, CSL_TimeGenerated, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod
    | extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url
",no
(Preview) TI map Domain entity to DnsEvent,ThreatIntelligenceIndicator,"'Identifies a match in DnsEvent table from any Domain IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
//Create a list of TLDs in our threat feed for later validation
let list_tlds = ThreatIntelligenceIndicator
| where TimeGenerated > ago(ioc_lookBack)
| where isnotempty(DomainName)
| extend parts = split(DomainName, '.')
| extend tld = parts[(array_length(parts)-1)]
| summarize count() by tostring(tld)
| summarize make_list(tld);
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(DomainName)
| join (
     DnsEvents
    | where TimeGenerated > ago(dt_lookBack)
    //Extract domain patterns from syslog message
    | where isnotempty(Name)
    | extend parts = split(Name, '.')
    //Split out the TLD
    | extend tld = parts[(array_length(parts)-1)]
    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed
    | where tld in~ (list_tlds)
    | extend DNS_TimeGenerated = TimeGenerated
) on $left.DomainName==$right.Name
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, DNS_TimeGenerated, Computer, ClientIP, Name, QueryType
| extend timestamp = DNS_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = ClientIP, URLCustomEntity = Url
",no
(Preview) TI map Domain entity to PaloAlto,ThreatIntelligenceIndicator,"'Identifies a match in Palo Alto data in CommonSecurityLog table from any Domain IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
//Create a list of TLDs in our threat feed for later validation of extracted domains
let list_tlds = ThreatIntelligenceIndicator
    | where TimeGenerated > ago(ioc_lookBack)
    | where isnotempty(DomainName)
    | extend DomainName = tolower(DomainName)
    | extend parts = split(DomainName, '.')
    | extend tld = parts[(array_length(parts)-1)]
    | summarize count() by tostring(tld)
    | summarize make_list(tld);
    ThreatIntelligenceIndicator
    | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
    | where Active == true
    // Picking up only IOC's that contain the entities we want
    | where isnotempty(DomainName)
    | join (
        CommonSecurityLog
        | extend IngestionTime = ingestion_time()
        | where IngestionTime > ago(dt_lookBack)
        | where DeviceVendor =~ 'Palo Alto Networks'
        | where DeviceEventClassID =~ 'url'
        //Uncomment the line below to only alert on allowed connections
        //| where DeviceAction !~ ""block-url""
        //Extract domain from RequestURL, if not present extarct it from AdditionalExtentions
        | extend PA_Url = columnifexists(""RequestURL"", ""None"")
        | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith ""PanOS"", extract(""([^\""]+)"", 1, tolower(AdditionalExtensions)), trim('""', PA_Url))
        | extend PA_Url = iif(PA_Url !startswith ""http://"" and ApplicationProtocol !~ ""ssl"", strcat('http://', PA_Url), iif(PA_Url !startswith ""https://"" and ApplicationProtocol =~ ""ssl"", strcat('https://', PA_Url), PA_Url))
        | extend Domain = trim(@"""""""",tostring(parse_url(PA_Url).Host))
        | where isnotempty(Domain)
        | extend Domain = tolower(Domain)
        | extend parts = split(Domain, '.')
        //Split out the TLD for the purpose of checking if we have any TI indicators with this TLD to match on
        | extend tld = parts[(array_length(parts)-1)]
        //Validate parsed domain by checking TLD against TLDs from threat feed and drop domains where there is no chance of a match
        | where tld in~ (list_tlds)
        | extend CSL_TimeGenerated = TimeGenerated
    ) on $left.DomainName==$right.Domain
    | project LatestIndicatorTime, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, CSL_TimeGenerated, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod
    | extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url
",no
(Preview) TI map Domain entity to SecurityAlert,ThreatIntelligenceIndicator,"'Identifies a match in SecurityAlert table from any Domain IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""MicrosoftCloudAppSecurity"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    },
    {
        ""connectorId"":  ""AzureSecurityCenter"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
//Create a list of TLDs in our threat feed for later validation
let list_tlds = ThreatIntelligenceIndicator
| where TimeGenerated > ago(ioc_lookBack)
| where isnotempty(DomainName)
| extend parts = split(DomainName, '.')
| extend tld = parts[(array_length(parts)-1)]
| summarize count() by tostring(tld)
| summarize make_list(tld);
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(DomainName)
| join (
    SecurityAlert
    | where TimeGenerated > ago(dt_lookBack)
    //Extract domain patterns from message
    | extend domain = extract(""(([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,})"", 1, tolower(Entities))
    | where isnotempty(domain)
    | extend parts = split(domain, '.')
    //Split out the TLD
    | extend tld = parts[(array_length(parts)-1)]
    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed
    | where tld in~ (list_tlds)
    // Converting Entities into dynamic data type and use mv-expand to unpack the array
    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray
    // Parsing relevant entity column extract hostname and IP address
    | extend EntityType = tostring(parse_json(EntitiesDynamicArray).Type), EntityAddress = tostring(EntitiesDynamicArray.Address), EntityHostName = tostring(EntitiesDynamicArray.HostName)
    | extend HostName = iif(EntityType == 'host', EntityHostName, '')
    | extend IP_addr = iif(EntityType == 'ip', EntityAddress, '')
    | extend Alert_TimeGenerated = TimeGenerated
    | extend Alert_Description = Description
) on $left.DomainName==$right.domain
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Alert_TimeGenerated, AlertName, Alert_Description, ProviderName, AlertSeverity, ConfidenceLevel, HostName, IP_addr, Url
| extend timestamp = Alert_TimeGenerated, HostCustomEntity = HostName, IPCustomEntity = IP_addr, URLCustomEntity = Url
",no
(Preview) TI map Domain entity to Syslog,ThreatIntelligenceIndicator,"'Identifies a match in Syslog table from any Domain IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""Syslog"",
        ""dataTypes"":  [
                          ""Syslog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
//Create a list of TLDs in our threat feed for later validation
let list_tlds = ThreatIntelligenceIndicator
| where TimeGenerated > ago(ioc_lookBack)
| where isnotempty(DomainName)
| extend parts = split(DomainName, '.')
| extend tld = parts[(array_length(parts)-1)]
| summarize count() by tostring(tld)
| summarize make_list(tld);
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(DomainName)
| join (
    Syslog
    | where TimeGenerated > ago(dt_lookBack)
    //Extract domain patterns from syslog message
    | extend domain = extract(""(([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,})"",1, tolower(SyslogMessage))
    | where isnotempty(domain)
    | extend parts = split(domain, '.')
    //Split out the TLD
    | extend tld = parts[(array_length(parts)-1)]
    //Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed
    | where tld in~ (list_tlds)
    | extend Syslog_TimeGenerated = TimeGenerated
) on $left.DomainName==$right.domain
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Syslog_TimeGenerated, SyslogMessage, Computer, ProcessName, domain, HostIP, Url
| extend timestamp = Syslog_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = HostIP, URLCustomEntity = Url
",no
(Preview) TI map Email entity to AzureActivity,ThreatIntelligenceIndicator,"'Identifies a match in AzureActivity table from any Email IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""AzureActivity"",
        ""dataTypes"":  [
                          ""AzureActivity""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    AzureActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(Caller)
    | extend Caller = tolower(Caller)
    | where Caller matches regex emailregex
    | extend AzureActivity_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.Caller
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, AzureActivity_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Caller, Level, CallerIpAddress, Category, OperationName,
OperationNameValue, ActivityStatus, ResourceGroup, SubscriptionId
| extend timestamp = AzureActivity_TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress, URLCustomEntity = Url
",no
(Preview) TI map Email entity to OfficeActivity,ThreatIntelligenceIndicator,"'Identifies a match in OfficeActivity table from any Email IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    OfficeActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(UserId)
    | where UserId matches regex emailregex
    | extend OfficeActivity_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.UserId
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, OfficeActivity_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, UserId, ClientIP, Operation, UserType, RecordType, OfficeWorkload, Parameters
| extend timestamp = OfficeActivity_TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Url
",no
(Preview) TI map Email entity to CommonSecurityLog,ThreatIntelligenceIndicator,"'Identifies a match in CommonSecurityLog table from any Email IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) and isnotempty(DestinationUserID)
    // Filtering PAN Logs for specific event type to match relevant email entities
    | where DeviceVendor == ""Palo Alto Networks"" and  DeviceEventClassID == ""wildfire"" and ApplicationProtocol in (""smtp"",""pop3"")
    | extend DestinationUserID = tolower(DestinationUserID)
    | where DestinationUserID matches regex emailregex
    | extend CommonSecurityLog_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.DestinationUserID
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, CommonSecurityLog_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, DestinationUserID, DeviceEventClassID, LogSeverity, DeviceAction,
SourceIP, SourcePort, DestinationIP, DestinationPort, Protocol, ApplicationProtocol
| extend timestamp = CommonSecurityLog_TimeGenerated, AccountCustomEntity = DestinationUserID, IPCustomEntity = SourceIP, URLCustomEntity = Url
",no
(Preview) TI map Email entity to SecurityAlert,ThreatIntelligenceIndicator,"'Identifies a match in SecurityAlert table from any Email IOC from TI which will extend coverage to datatypes such as MCAS, StorageThreatProtection and many others'
",Medium,"[
    {
        ""connectorId"":  ""AzureSecurityCenter"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    SecurityAlert | where TimeGenerated >= ago(dt_lookBack)
    // Converting Entities into dynamic data type and use mv-expand to unpack the array
    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray
    // Parsing relevant entity column to filter type account and creating new column by combining account and UPNSuffix
    | extend Entitytype = tostring(parse_json(EntitiesDynamicArray).Type), EntityName = tostring(parse_json(EntitiesDynamicArray).Name),
    EntityUPNSuffix = tostring(parse_json(EntitiesDynamicArray).UPNSuffix)
    | where Entitytype =~ ""account""
    | extend EntityEmail = tolower(strcat(EntityName, ""@"", EntityUPNSuffix))
    | where EntityEmail matches regex emailregex
    | extend SecurityAlert_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.EntityEmail
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SecurityAlert_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, EntityEmail, AlertName, AlertType,
AlertSeverity, Entities, ProviderName, VendorName
| extend timestamp = SecurityAlert_TimeGenerated, AccountCustomEntity = EntityEmail, URLCustomEntity = Url
",no
(Preview) TI map Email entity to SecurityEvent,ThreatIntelligenceIndicator,"'Identifies a match in SecurityEvent table from any Email IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    SecurityEvent | where TimeGenerated >= ago(dt_lookBack) and isnotempty(TargetUserName)
    //Normalizing the column to lower case for exact match with EmailRecipient column
    | extend TargetUserName = tolower(TargetUserName)
    // renaming timestamp column so it is clear the log this came from SecurityEvent table
    | extend SecurityEvent_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.TargetUserName
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SecurityEvent_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Computer, EventID, TargetUserName, Activity, IpAddress, AccountType,
LogonTypeName, LogonProcessName, Status, SubStatus
| extend timestamp = SecurityEvent_TimeGenerated, AccountCustomEntity = TargetUserName, IPCustomEntity = IpAddress, HostCustomEntity = Computer, URLCustomEntity = Url
",no
(Preview) TI map Email entity to SigninLogs,ThreatIntelligenceIndicator,"'Identifies a match in SigninLogs table from any Email IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$';
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
//Filtering the table for Email related IOCs
| where isnotempty(EmailRecipient)
| join (
    SigninLogs | where TimeGenerated >= ago(dt_lookBack) and isnotempty(UserPrincipalName)
    //Normalizing the column to lower case for exact match with EmailRecipient column
    | extend UserPrincipalName = tolower(UserPrincipalName)
    | where UserPrincipalName matches regex emailregex
    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
    | extend Region = tostring(LocationDetails[""countryOrRegion""]), State = tostring(LocationDetails[""state""]), City = tostring(LocationDetails[""city""])
    // renaming timestamp column so it is clear the log this came from SigninLogs table
    | extend SigninLogs_TimeGenerated = TimeGenerated
)
on $left.EmailRecipient == $right.UserPrincipalName
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SigninLogs_TimeGenerated,
EmailSenderName, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, IPAddress, UserPrincipalName, AppDisplayName,
StatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP
| extend timestamp = SigninLogs_TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, URLCustomEntity = Url
",no
(Preview) TI map File Hash to CommonSecurityLog Event,ThreatIntelligenceIndicator,"'Identifies a match in CommonSecurityLog Event data from any FileHash IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
let fileHashIndicators = ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
| where isnotempty(FileHashValue);
// Handle matches against both lower case and uppercase versions of the hash:
( fileHashIndicators | extend  FileHashValue = tolower(FileHashValue)
  |union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))
|  join (
   CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)
   | where isnotempty(FileHash)
   | extend CommonSecurityLog_TimeGenerated = TimeGenerated
)
on $left.FileHashValue == $right.FileHash
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,
CommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction,
RequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity
| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, AccountCustomEntity = SourceUserName, URLCustomEntity = Url
",no
Microsoft COVID-19 file hash indicator matches,ThreatIntelligenceIndicator,"'Identifies a match in CommonSecurityLog Event data from any FileHash published in the Microsoft COVID-19 Threat Intel Feed - as described at https://www.microsoft.com/security/blog/2020/05/14/open-sourcing-covid-threat-intelligence/'
",Medium,"{
    ""connectorId"":  ""PaloAltoNetworks"",
    ""dataTypes"":  [
                      ""CommonSecurityLog""
                  ]
}","
let dt_lookBack = 1h;
let covidIndicators = (externaldata(TimeGenerated:datetime, FileHashValue:string, FileHashType: string, TlpLevel: string, Product: string, ThreatType: string, Description: string )
[@""https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.Covid19.Indicators.csv""] with (format=""csv""));
let fileHashIndicators = covidIndicators
| where isnotempty(FileHashValue);
// Handle matches against both lower case and uppercase versions of the hash:
( fileHashIndicators | extend FileHashValue = tolower(FileHashValue)
  | union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))
|  join (
   CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) 
   | where isnotempty(FileHash)
   | extend CommonSecurityLog_TimeGenerated = TimeGenerated
)
on $left.FileHashValue == $right.FileHash
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by FileHashValue
| project LatestIndicatorTime, FileHashValue, FileHashType, Description, ThreatType,  
CommonSecurityLog_TimeGenerated, SourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction, 
RequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity
| extend timestamp = CommonSecurityLog_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, AccountCustomEntity = SourceUserName
",no
(Preview) TI map File Hash to Security Event,ThreatIntelligenceIndicator,"'Identifies a match in Security Event data from any File Hash IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""SecurityEvents"",
        ""dataTypes"":  [
                          ""SecurityEvent""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
| where isnotempty(FileHashValue)
|  join (
  SecurityEvent | where TimeGenerated >= ago(dt_lookBack)
      | where EventID in (""8003"",""8002"",""8005"")
      | where isnotempty(FileHash)
      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID
)
on $left.FileHashValue == $right.FileHash
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,
SecurityEvent_TimeGenerated, Process, FileHash, Computer, Account, Event
| extend timestamp = SecurityEvent_TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, URLCustomEntity = Url
",no
(Preview) TI map IP entity to AWSCloudTrail,ThreatIntelligenceIndicator,"'Identifies a match in AWSCloudTrail from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AWS"",
        ""dataTypes"":  [
                          ""AWSCloudTrail""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    AWSCloudTrail | where TimeGenerated >= ago(dt_lookBack)
    // renaming time column so it is clear the log this came from
    | extend AWSCloudTrail_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.SourceIpAddress
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, AWSCloudTrail_TimeGenerated,
TI_ipEntity, EventName, EventTypeName, UserIdentityAccountId, UserIdentityPrincipalid, UserIdentityUserName, SourceIpAddress,
NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = AWSCloudTrail_TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName, URLCustomEntity = Url
",no
(Preview) TI map IP entity to AzureActivity,ThreatIntelligenceIndicator,"'Identifies a match in AzureActivity from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureActivity"",
        ""dataTypes"":  [
                          ""AzureActivity""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    AzureActivity | where TimeGenerated >= ago(dt_lookBack)
    // renaming time column so it is clear the log this came from
    | extend AzureActivity_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.CallerIpAddress
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, AzureActivity_TimeGenerated,
TI_ipEntity, CallerIpAddress, Caller, OperationName, ActivityStatus, Category, ResourceId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = AzureActivity_TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller, URLCustomEntity = Url
",no
(Preview) TI map IP entity to DnsEvents,ThreatIntelligenceIndicator,"'Identifies a match in DnsEvents from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""DNS"",
        ""dataTypes"":  [
                          ""DnsEvents""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    DnsEvents | where TimeGenerated >= ago(dt_lookBack)
    | where SubType =~ ""LookupQuery"" and isnotempty(IPAddresses)
    | extend SingleIP = split(IPAddresses, "","")
    | mvexpand SingleIP
    | extend SingleIP = tostring(SingleIP)
    // renaming time column so it is clear the log this came from
    | extend DNS_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.SingleIP
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, DNS_TimeGenerated,
TI_ipEntity, Computer, EventId, SubType, ClientIP, Name, IPAddresses, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = DNS_TimeGenerated, IPCustomEntity = ClientIP, HostCustomEntity = Computer, URLCustomEntity = Url
",no
(Preview) TI map IP entity to OfficeActivity,ThreatIntelligenceIndicator,"'Identifies a match in OfficeActivity from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    OfficeActivity | where TimeGenerated >= ago(dt_lookBack)
    // renaming time column so it is clear the log this came from
    | extend OfficeActivity_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.ClientIP
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, OfficeActivity_TimeGenerated,
TI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = OfficeActivity_TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId, URLCustomEntity = Url
",no
(Preview) TI map IP entity to SigninLogs,ThreatIntelligenceIndicator,"'Identifies a match in SigninLogs from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""SigninLogs""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    SigninLogs | where TimeGenerated >= ago(dt_lookBack)
    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)
    | extend Region = tostring(LocationDetails[""countryOrRegion""]), State = tostring(LocationDetails[""state""]), City = tostring(LocationDetails[""city""])
    // renaming time column so it is clear the log this came from
    | extend SigninLogs_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.IPAddress
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SigninLogs_TimeGenerated,
TI_ipEntity, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = SigninLogs_TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, URLCustomEntity = Url
",no
(Preview) TI map IP entity to VMConnection,ThreatIntelligenceIndicator,"'Identifies a match in VMConnection from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(VMInsights)"",
        ""dataTypes"":  [
                          ""VMConnection""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    VMConnection
    | where TimeGenerated >= ago(dt_lookBack)
    // renaming time column so it is clear the log this came from
    | extend VMConnection_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.RemoteIp
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, VMConnection_TimeGenerated,
TI_ipEntity, Computer, Direction, ProcessName, SourceIp, DestinationIp, RemoteIp, Protocol, DestinationPort, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = VMConnection_TimeGenerated, IPCustomEntity = RemoteIp, HostCustomEntity = Computer, URLCustomEntity = Url
",no
(Preview) TI map IP entity to W3CIISLog,ThreatIntelligenceIndicator,"'Identifies a match in W3CIISLog from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(IIS)"",
        ""dataTypes"":  [
                          ""W3CIISLog""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    W3CIISLog
    | where TimeGenerated >= ago(dt_lookBack)
    | where isnotempty(cIP)
    // renaming time column so it is clear the log this came from
    | extend W3CIISLog_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.cIP
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,
W3CIISLog_TimeGenerated, TI_ipEntity, Computer, sSiteName, cIP, sIP, sPort, csMethod, csUserName, scStatus, scSubStatus, scWin32Status,
NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = W3CIISLog_TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName, URLCustomEntity = Url
",no
(Preview) TI map IP entity to WireData,ThreatIntelligenceIndicator,"'Identifies a match in WireData from any IP IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(WireData)"",
        ""dataTypes"":  [
                          ""WireData""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)
// As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.
// Taking the first non-empty value based on potential IOC match availability
| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)
| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)
| join (
    WireData | where TimeGenerated >= ago(dt_lookBack)
    | where isnotempty(RemoteIP)
    // renaming time column so it is clear the log this came from
    | extend WireData_TimeGenerated = TimeGenerated
)
on $left.TI_ipEntity == $right.RemoteIP
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, WireData_TimeGenerated,
TI_ipEntity, Computer, LocalIP, RemoteIP, ProcessName, ApplicationProtocol, LocalPortNumber, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress
| extend timestamp = WireData_TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer, URLCustomEntity = Url
",no
(Preview) TI map URL entity to AuditLogs,ThreatIntelligenceIndicator,"'Identifies a match in AuditLogs from any URL IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""AzureActiveDirectory"",
        ""dataTypes"":  [
                          ""AuditLogs""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(Url)
| join (
  AuditLogs
  | where TimeGenerated >= ago(dt_lookBack)
  // Extract the URL that is contained within the JSON data
  | extend Url = extract(""(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+);"", 1,tostring(TargetResources))
  | where isnotempty(Url)
  | extend userPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
  | extend TargetResourceDisplayName = tostring(TargetResources[0].displayName)
  | extend Audit_TimeGenerated = TimeGenerated
) on Url
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,
Audit_TimeGenerated, OperationName, Identity, userPrincipalName, TargetResourceDisplayName, Url
| extend timestamp = Audit_TimeGenerated, AccountCustomEntity = userPrincipalName, HostCustomEntity = TargetResourceDisplayName, URLCustomEntity = Url
",no
(Preview) TI map URL entity to OfficeActivity data,ThreatIntelligenceIndicator,"'Identifies a match in OfficeActivity data from any URL IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""Office365"",
        ""dataTypes"":  [
                          ""OfficeActivity""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(Url)
| join (
 OfficeActivity
  | where TimeGenerated >= ago(dt_lookBack)
  //Extract the Url from a number of potential fields
  | extend Url = iif(OfficeWorkload == ""AzureActiveDirectory"",extract(""(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+);"", 1,ModifiedProperties),tostring(parse_json(ModifiedProperties)[12].NewValue))
  | where isnotempty(Url)
  // Ensure we get a clean URL
  | extend Url = tostring(split(Url, ';')[0])
  | extend Office_TimeGenerated = TimeGenerated
  // Project a single user identity that we can use for entity mapping
  | extend User = iif(isnotempty(UserId), UserId, iif(isnotempty(Actor), tostring(parse_json(Actor)[0].ID), tostring(parse_json(Parameters)[0].Vlaue))) 
) on Url
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Operation, 
UserType, OfficeWorkload, Parameters, Office_TimeGenerated, Url, User
| extend timestamp = Office_TimeGenerated, AccountCustomEntity = User, URLCustomEntity = Url
",no
(Preview) TI map URL entity to PaloAlto data,ThreatIntelligenceIndicator,"'Identifies a match in PaloAlto data from any URL IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""PaloAltoNetworks"",
        ""dataTypes"":  [
                          ""CommonSecurityLog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(Url)
| join (
  CommonSecurityLog
  | extend IngestionTime = ingestion_time()
  | where IngestionTime > ago(dt_lookBack)
  // Select on Palo Alto logs
  | where DeviceVendor =~ ""Palo Alto Networks""
  | where DeviceEventClassID =~ 'url'
  //Uncomment the line below to only alert on allowed connections
  //| where DeviceAction !~ ""block-url""
  //Select logs where URL data is populated
  | extend PA_Url = columnifexists(""RequestURL"", ""None"")
  | extend PA_Url = iif(isempty(PA_Url), extract(""([^\""]+)"", 1, tolower(AdditionalExtensions)), trim('""', PA_Url))
  | extend PA_Url = iif(PA_Url !startswith ""http://"" and ApplicationProtocol !~ ""ssl"", strcat('http://', PA_Url), iif(PA_Url !startswith ""https://"" and ApplicationProtocol =~ ""ssl"", strcat('https://', PA_Url), PA_Url))
  | where isnotempty(PA_Url)
  | extend CSL_TimeGenerated = TimeGenerated
) on $left.Url == $right.PA_Url
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, SourceIP, CSL_TimeGenerated, PA_Url, DeviceName
| extend timestamp = CSL_TimeGenerated, IPCustomEntity = SourceIP, HostCustomEntity = DeviceName, URLCustomEntity = PA_Url
",no
(Preview) TI map URL entity to SecurityAlert data,ThreatIntelligenceIndicator,"'Identifies a match in SecurityAlert data from any URL IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""MicrosoftCloudAppSecurity"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    },
    {
        ""connectorId"":  ""AzureSecurityCenter"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(Url)
| join (
  SecurityAlert
  | where TimeGenerated >= ago(dt_lookBack)
  // Extract URL from JSON data
  | extend Url = extract(""(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)"", 1,Entities)
  // We only want alerts that actually contain URL data
  | where isnotempty(Url)
  // Extract hostname from JSON data for entity mapping
  | extend Compromised_Host = tostring(parse_json(ExtendedProperties).[""Compromised Host""])
  | extend Alert_TimeGenerated = TimeGenerated
) on Url
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Alert_TimeGenerated,
AlertName, AlertSeverity, Description, Url, Compromised_Host
| extend timestamp = Alert_TimeGenerated, HostCustomEntity = Compromised_Host, URLCustomEntity = Url
",no
(Preview) TI map URL entity to Syslog data,ThreatIntelligenceIndicator,"'Identifies a match in Syslog data from any URL IOC from TI'
",Medium,"[
    {
        ""connectorId"":  ""Syslog"",
        ""dataTypes"":  [
                          ""Syslog""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligence"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    },
    {
        ""connectorId"":  ""ThreatIntelligenceTaxii"",
        ""dataTypes"":  [
                          ""ThreatIntelligenceIndicator""
                      ]
    }
]","
let dt_lookBack = 1h;
let ioc_lookBack = 14d;
ThreatIntelligenceIndicator
| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()
| where Active == true
// Picking up only IOC's that contain the entities we want
| where isnotempty(Url)
| join (
  Syslog
  | where TimeGenerated >= ago(dt_lookBack)
  // Extract URL from the Syslog message but only take messages that include URLs
  | extend Url = extract(""(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)"", 1,SyslogMessage)
  | where isnotempty(Url)
  | extend Syslog_TimeGenerated = TimeGenerated
) on Url
| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId
| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Syslog_TimeGenerated, SyslogMessage, Computer, ProcessName, Url, HostIP
| extend timestamp = Syslog_TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = HostIP, URLCustomEntity = Url
",no
Critical Threat Detected,VMwareCarbonBlack,"'This creates an incident in the event a critical threat was identified on a Carbon Black managed endpoint.'
",Medium,"{
    ""connectorId"":  ""VMwareCarbonBlack"",
    ""dataTypes"":  [
                      ""CarbonBlackNotifications_CL""
                  ]
}","
let timeframe = ago(1h);
let threshold = 8;
CarbonBlackNotifications_CL
| where TimeGenerated > timeframe
| where threatHunterInfo_score_d >= threshold
| extend eventTime = datetime(1970-01-01) + tolong(threatHunterInfo_time_d/1000) * 1sec
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, Threat_Name = threatHunterInfo_reportName_s, Device_Name = deviceInfo_deviceName_s,  Internal_IP = deviceInfo_internalIpAddress_s, External_IP = deviceInfo_externalIpAddress_s, Threat_Score = threatHunterInfo_score_d
| project-away count_
| extend timestamp = StartTime, HostCustomEntity = Device_Name, IPCustomEntity = Internal_IP
",no
Known Malware Detected,VMwareCarbonBlack,"'This creates an incident when a known Malware is detected on a endpoint managed by a Carbon Black.'
",Medium,"{
    ""connectorId"":  ""VMwareCarbonBlack"",
    ""dataTypes"":  [
                      ""CarbonBlackEvents_CL""
                  ]
}","
let timeframe = ago(1h);
CarbonBlackEvents_CL
| where TimeGenerated > timeframe
| extend eventTime = datetime(1970-01-01) + tolong(eventTime_d/1000) * 1sec
| where targetApp_effectiveReputation_s =~ ""KNOWN_MALWARE""
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by eventTime, deviceDetails_deviceName_s, deviceDetails_deviceIpAddress_s, processDetails_fullUserName_s, processDetails_targetName_s
| extend timestamp = StartTime, AccountCustomEntity = processDetails_fullUserName_s, HostCustomEntity = deviceDetails_deviceName_s, IPCustomEntity = deviceDetails_deviceIpAddress_s
",no
Anomalous User Agent connection attempt,W3CIISLog,"'Identifies connection attempts (success or fail) from clients with very short or very long User Agent strings and with less than 100 connection attempts.'
",Low,"{
    ""connectorId"":  ""AzureMonitor(IIS)"",
    ""dataTypes"":  [
                      ""W3CIISLog""
                  ]
}","
let timeFrame = 1d;
let short_uaLength = 5;
let long_uaLength = 1000;
let c_threshold = 100;
W3CIISLog 
| where TimeGenerated >= ago(timeFrame)
// Exclude local IPs as these create noise
| where cIP !startswith ""192.168."" and cIP != ""::1""
| where isnotempty(csUserAgent) and csUserAgent !in~ (""-"", ""MSRPC"") and (string_size(csUserAgent) <= short_uaLength or string_size(csUserAgent) >= long_uaLength)
| extend csUserAgent_size = string_size(csUserAgent)
| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ConnectionCount = count() by Computer, sSiteName, sPort, csUserAgent, csUserAgent_size, csUserName , csMethod, csUriStem, sIP, cIP, scStatus, scSubStatus, scWin32Status
| where ConnectionCount < c_threshold
| extend timestamp = StartTimeUtc, AccountCustomEntity = csUserName, HostCustomEntity = Computer, IPCustomEntity = cIP
",yes
High count of failed attempts from same client IP,W3CIISLog,"'Identifies when 20 or more failed attempts from a given client IP in 1 minute occur on the IIS server.
This could be indicative of an attempted brute force. This could also simply indicate a misconfigured service or device.
Recommendations: Validate that these are expected connections from the given Client IP.  If the client IP is not recognized, 
potentially block these connections at the edge device.
If these are expected connections, verify the credentials are properly configured on the system, service, application or device 
that is associated with the client IP.
References:
IIS status code mapping: https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0
Win32 Status code mapping: https://msdn.microsoft.com/library/cc231199.aspx'
",Medium,"{
    ""connectorId"":  ""AzureMonitor(IIS)"",
    ""dataTypes"":  [
                      ""W3CIISLog""
                  ]
}","
let timeFrame = 1d;
let timeBin = 1m;
let failedThreshold = 20;
W3CIISLog
| where TimeGenerated >= ago(timeFrame)
| where scStatus in (""401"",""403"")
| where csUserName != ""-""
| extend scStatusFull = strcat(scStatus, ""."",scSubStatus) 
// Map common IIS codes
| extend scStatusFull_Friendly = case(
scStatusFull == ""401.0"", ""Access denied."",
scStatusFull == ""401.1"", ""Logon failed."",
scStatusFull == ""401.2"", ""Logon failed due to server configuration."",
scStatusFull == ""401.3"", ""Unauthorized due to ACL on resource."",
scStatusFull == ""401.4"", ""Authorization failed by filter."",
scStatusFull == ""401.5"", ""Authorization failed by ISAPI/CGI application."",
scStatusFull == ""403.0"", ""Forbidden."",
scStatusFull == ""403.4"", ""SSL required."",
""See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0"")
// Mapping to Hex so can be mapped using website in comments above
| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) 
// Map common win32 codes
| extend scWin32Status_Friendly = case(
scWin32Status_Hex =~ ""775"", ""The referenced account is currently locked out and cannot be logged on to."",
scWin32Status_Hex =~ ""52e"", ""Logon failure: Unknown user name or bad password."",
scWin32Status_Hex =~ ""532"", ""Logon failure: The specified account password has expired."",
scWin32Status_Hex =~ ""533"", ""Logon failure: Account currently disabled."", 
scWin32Status_Hex =~ ""2ee2"", ""The request has timed out."", 
scWin32Status_Hex =~ ""0"", ""The operation completed successfully."", 
scWin32Status_Hex =~ ""1"", ""Incorrect function."", 
scWin32Status_Hex =~ ""2"", ""The system cannot find the file specified."", 
scWin32Status_Hex =~ ""3"", ""The system cannot find the path specified."", 
scWin32Status_Hex =~ ""4"", ""The system cannot open the file."", 
scWin32Status_Hex =~ ""5"", ""Access is denied."", 
scWin32Status_Hex =~ ""8009030e"", ""SEC_E_NO_CREDENTIALS"", 
scWin32Status_Hex =~ ""8009030C"", ""SEC_E_LOGON_DENIED"", 
""See - https://msdn.microsoft.com/library/cc231199.aspx"")
// decode URI when available
| extend decodedUriQuery = url_decode(csUriQuery)
// Count of failed attempts from same client IP
| summarize makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP
| where FailedConnectionsCount >= failedThreshold
| project TimeGenerated, cIP, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount
| order by FailedConnectionsCount
| extend timestamp = TimeGenerated, HostCustomEntity = Computer, IPCustomEntity = cIP
",yes
High count of failed logons by a user,W3CIISLog,"'Identifies when 100 or more failed attempts by a given user in 10 minutes occur on the IIS Server.
This could be indicative of attempted brute force based on known account information.
This could also simply indicate a misconfigured service or device. 
References:
IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0
Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx'
",Medium,"{
    ""connectorId"":  ""AzureMonitor(IIS)"",
    ""dataTypes"":  [
                      ""W3CIISLog""
                  ]
}","
let timeFrame = 1d;
let timeBin = 10m;
let failedThreshold = 100;
W3CIISLog
| where TimeGenerated >= ago(timeFrame)
| where scStatus in (""401"",""403"")
| where csUserName != ""-""
// Handling Exchange specific items in IIS logs to remove the unique log identifier in the URI
| extend csUriQuery = iff(csUriQuery startswith ""MailboxId="", tostring(split(csUriQuery, ""&"")[0]) , csUriQuery )
| extend csUriQuery = iff(csUriQuery startswith ""X-ARR-CACHE-HIT="", strcat(tostring(split(csUriQuery, ""&"")[0]),tostring(split(csUriQuery, ""&"")[1])) , csUriQuery )
| extend scStatusFull = strcat(scStatus, ""."",scSubStatus) 
// Map common IIS codes
| extend scStatusFull_Friendly = case(
scStatusFull == ""401.0"", ""Access denied."",
scStatusFull == ""401.1"", ""Logon failed."",
scStatusFull == ""401.2"", ""Logon failed due to server configuration."",
scStatusFull == ""401.3"", ""Unauthorized due to ACL on resource."",
scStatusFull == ""401.4"", ""Authorization failed by filter."",
scStatusFull == ""401.5"", ""Authorization failed by ISAPI/CGI application."",
scStatusFull == ""403.0"", ""Forbidden."",
scStatusFull == ""403.4"", ""SSL required."",
""See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0"")
// Mapping to Hex so can be mapped using website in comments above
| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) 
// Map common win32 codes
| extend scWin32Status_Friendly = case(
scWin32Status_Hex =~ ""775"", ""The referenced account is currently locked out and cannot be logged on to."",
scWin32Status_Hex =~ ""52e"", ""Logon failure: Unknown user name or bad password."",
scWin32Status_Hex =~ ""532"", ""Logon failure: The specified account password has expired."",
scWin32Status_Hex =~ ""533"", ""Logon failure: Account currently disabled."", 
scWin32Status_Hex =~ ""2ee2"", ""The request has timed out."", 
scWin32Status_Hex =~ ""0"", ""The operation completed successfully."", 
scWin32Status_Hex =~ ""1"", ""Incorrect function."", 
scWin32Status_Hex =~ ""2"", ""The system cannot find the file specified."", 
scWin32Status_Hex =~ ""3"", ""The system cannot find the path specified."", 
scWin32Status_Hex =~ ""4"", ""The system cannot open the file."", 
scWin32Status_Hex =~ ""5"", ""Access is denied."", 
scWin32Status_Hex =~ ""8009030e"", ""SEC_E_NO_CREDENTIALS"", 
scWin32Status_Hex =~ ""8009030C"", ""SEC_E_LOGON_DENIED"", 
""See - https://msdn.microsoft.com/library/cc231199.aspx"")
// decode URI when available
| extend decodedUriQuery = url_decode(csUriQuery)
// Count of failed logons by a user
| summarize makeset(decodedUriQuery), makeset(cIP), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), FailedConnectionsCount = count() by bin(TimeGenerated, timeBin), csUserName, Computer, sIP
| where FailedConnectionsCount >= failedThreshold
| project TimeGenerated, csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_cIP, set_sPort, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, FailedConnectionsCount
| order by FailedConnectionsCount
| extend timestamp = TimeGenerated, AccountCustomEntity = csUserName, HostCustomEntity = Computer
",yes
High count of connections by client IP on many ports,W3CIISLog,"'Identifies when 30 or more ports are used for a given client IP in 10 minutes occurring on the IIS server.
This could be indicative of attempted port scanning or exploit attempt at internet facing web applications.  
This could also simply indicate a misconfigured service or device.
References:
IIS status code mapping - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0
Win32 Status code mapping - https://msdn.microsoft.com/library/cc231199.aspx'
",Medium,"{
    ""connectorId"":  ""AzureMonitor(IIS)"",
    ""dataTypes"":  [
                      ""W3CIISLog""
                  ]
}","
let timeFrame = 1d;
let timeBin = 10m;
let portThreshold = 30;
W3CIISLog
| where TimeGenerated >= ago(timeFrame)
| extend scStatusFull = strcat(scStatus, ""."",scSubStatus) 
// Map common IIS codes
| extend scStatusFull_Friendly = case(
scStatusFull == ""401.0"", ""Access denied."",
scStatusFull == ""401.1"", ""Logon failed."",
scStatusFull == ""401.2"", ""Logon failed due to server configuration."",
scStatusFull == ""401.3"", ""Unauthorized due to ACL on resource."",
scStatusFull == ""401.4"", ""Authorization failed by filter."",
scStatusFull == ""401.5"", ""Authorization failed by ISAPI/CGI application."",
scStatusFull == ""403.0"", ""Forbidden."",
scStatusFull == ""403.4"", ""SSL required."",
""See - https://support.microsoft.com/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0"")
// Mapping to Hex so can be mapped using website in comments above
| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) 
// Map common win32 codes
| extend scWin32Status_Friendly = case(
scWin32Status_Hex =~ ""775"", ""The referenced account is currently locked out and cannot be logged on to."",
scWin32Status_Hex =~ ""52e"", ""Logon failure: Unknown user name or bad password."",
scWin32Status_Hex =~ ""532"", ""Logon failure: The specified account password has expired."",
scWin32Status_Hex =~ ""533"", ""Logon failure: Account currently disabled."", 
scWin32Status_Hex =~ ""2ee2"", ""The request has timed out."", 
scWin32Status_Hex =~ ""0"", ""The operation completed successfully."", 
scWin32Status_Hex =~ ""1"", ""Incorrect function."", 
scWin32Status_Hex =~ ""2"", ""The system cannot find the file specified."", 
scWin32Status_Hex =~ ""3"", ""The system cannot find the path specified."", 
scWin32Status_Hex =~ ""4"", ""The system cannot open the file."", 
scWin32Status_Hex =~ ""5"", ""Access is denied."", 
scWin32Status_Hex =~ ""8009030e"", ""SEC_E_NO_CREDENTIALS"", 
scWin32Status_Hex =~ ""8009030C"", ""SEC_E_LOGON_DENIED"", 
""See - https://msdn.microsoft.com/library/cc231199.aspx"")
// decode URI when available
| extend decodedUriQuery = url_decode(csUriQuery)
// Count of attempts by client IP on many ports
| summarize makeset(sPort), makeset(decodedUriQuery), makeset(csUserName), makeset(sSiteName), makeset(sPort), makeset(csUserAgent), makeset(csMethod), makeset(csUriQuery), makeset(scStatusFull), makeset(scStatusFull_Friendly), makeset(scWin32Status_Hex), makeset(scWin32Status_Friendly), ConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP
| extend portCount = arraylength(set_sPort)
| where portCount >= portThreshold
| project TimeGenerated, cIP, set_sPort, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, ConnectionsCount, portCount
| order by portCount
| extend timestamp = TimeGenerated, IPCustomEntity = cIP
",yes
Malicious web application requests linked with MDATP alerts,W3CIISLog,"'Takes MDATP alerts where web scripts are present in the evidence and correlates with requests made to those scripts
in the WCSIISLog to surface new alerts for potentially malicious web request activity.
The lookback for alerts is set to 1h and the lookback for W3CIISLogs is set to 7d. A sample set of popular web script extensions
has been provided in scriptExtensions that should be tailored to your environment.'
",Medium,"[
    {
        ""connectorId"":  ""MicrosoftDefenderAdvancedThreatProtection"",
        ""dataTypes"":  [
                          ""SecurityAlert""
                      ]
    },
    {
        ""connectorId"":  ""AzureMonitor(IIS)"",
        ""dataTypes"":  [
                          ""W3CIISLog""
                      ]
    }
]","
let alertTimeWindow = 1h;
let logTimeWindow = 7d;
// Define script extensions that suit your web application environment - a sample are provided below
let scriptExtensions = dynamic(["".php"", "".jsp"", "".js"", "".aspx"", "".asmx"", "".asax"", "".cfm"", "".shtml""]); 
let alertData = materialize(SecurityAlert 
| where TimeGenerated > ago(alertTimeWindow) 
| where ProviderName == ""MDATP"" 
// Parse and expand the alert JSON 
| extend alertData = parse_json(Entities) 
| mvexpand alertData);
let fileData = alertData
// Extract web script files from MDATP alerts - our malicious web scripts - candidate webshells
| where alertData.Type =~ ""file"" 
| where alertData.Name has_any(scriptExtensions) 
| extend FileName = tostring(alertData.Name), Directory = tostring(alertData.Directory);
let hostData = alertData
// Extract server details from alerts and map to alert id
| where alertData.Type =~ ""host""
| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId
| distinct HostName, DnsDomain, SystemAlertId;
// Join the files on their impacted servers
let webshellData = fileData
| join kind=inner (hostData) on SystemAlertId 
| project TimeGenerated, FileName, Directory, HostName, DnsDomain;
webshellData
| join (  
// Find requests that were made to this file on the impacted server in the W3CIISLog table 
W3CIISLog  
| where TimeGenerated > ago(logTimeWindow) 
// Restrict to accesses to script extensions 
| where csUriStem has_any(scriptExtensions)
| extend splitUriStem = split(csUriStem, ""/"")  
| extend FileName = splitUriStem[-1], HostName = sComputerName
// Summarize potential attacker activity
| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), RequestUserAgents=make_set(csUserAgent), ReqestMethods=make_set(csMethod), RequestStatusCodes=make_set(scStatus), RequestCookies=make_set(csCookie), RequestReferers=make_set(csReferer), RequestQueryStrings=make_set(csUriQuery) by AttackerIP=cIP, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName), HostName  
) on FileName, HostName
| project StartTime, EndTime, AttackerIP, RequestUserAgents, HostName, SiteName, ShellLocation, ReqestMethods, RequestStatusCodes, RequestCookies, RequestReferers, RequestQueryStrings, RequestCount = count_
// Expose the attacker ip address as a custom entity
| extend timestamp=StartTime, IPCustomEntity = AttackerIP, HostCustomEntity = HostName
",yes
Zoom E2E Encryption Disabled,ZoomLogs,"'This alerts when end to end encryption is disabled for Zoom meetings.'
",Medium,"{
    ""connectorid"":  ""ZoomLogs"",
    ""datatypes"":  [
                      ""ZoomLogs""
                  ]
}","
let timeframe = 1d;
ZoomLogs  
| where TimeGenerated >= ago(timeframe)
| where Event =~ ""account.settings_updated""  
| extend OldE2ESetting = columnifexists(""payload_object_settings_in_meeting_e2e_encryption_b"", """")  
| extend NewE2ESetting = columnifexists(""payload_old_object_settings_in_meeting_e2e_encryption_b"", """")  
| where OldE2ESetting =~ 'false' and NewE2ESetting =~ 'true'
| extend timestamp = TimeGenerated, AccountCustomEntity = User
",no
External User Access Enabled,ZoomLogs,"'This alerts when the account setting is changed to allow either external domain access or anonymous access to meetings.'
",Low,"{
    ""connectorid"":  ""ZoomLogs"",
    ""datatypes"":  [
                      ""ZoomLogs""
                  ]
}","
let timeframe = 1d;
ZoomLogs 
| where TimeGenerated >= ago(timeframe)
| where Event =~ ""account.settings_updated"" 
| extend EnforceLogin = columnifexists(""payload_object_settings_schedule_meeting_enfore_login_b"", """") 
| extend EnforceLoginDomain = columnifexists(""payload_object_settings_schedule_meeting_enfore_login_b"", """") 
| extend GuestAlerts = columnifexists(""payload_object_settings_in_meeting_alert_guest_join_b"", """") 
| where EnforceLogin == 'false' or EnforceLoginDomain == 'false' or GuestAlerts == 'false' 
| extend SettingChanged = case(EnforceLogin == 'false' and EnforceLoginDomain == 'false' and GuestAlerts == 'false', ""All settings changed"", 
                            EnforceLogin == 'false' and EnforceLoginDomain == 'false', ""Enforced Logons and Restricted Domains Changed"", 
                            EnforceLoginDomain == 'false' and GuestAlerts == 'false', ""Enforced Domains Changed"", 
                            EnforceLoginDomain == 'false', ""Enfored Domains Changed"", 
                            GuestAlerts == 'false', ""Guest Join Alerts Changed"", 
                            EnforceLogin == 'false', ""Enforced Logins Changed"", 
                            ""No Changes"")
| extend timestamp = TimeGenerated, AccountCustomEntity = User
",no
User joining Zoom meeting from suspicious timezone,ZoomLogs,"'The alert shows users that join a Zoom meeting from a time zone other than the one the meeting was created in.
You can also whitelist known good time zones in the tz_whitelist value using the tz database name format https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'
",Low,"{
    ""connectorid"":  ""ZoomLogs"",
    ""datatypes"":  [
                      ""ZoomLogs""
                  ]
}","
let schedule_lookback = 14d; 
let join_lookback = 1d; 
// If you want to whitelist specific timezones include them in a list here
let tz_whitelist = dynamic([]);
let meetings = ( 
ZoomLogs 
| where TimeGenerated >= ago(schedule_lookback) 
| where Event =~ ""meeting.created"" 
| extend MeetingId = tostring(parse_json(MeetingEvents).MeetingId)  
| extend SchedTimezone = tostring(parse_json(MeetingEvents).Timezone)); 
ZoomLogs 
| where TimeGenerated >=W ago(join_lookback) 
| where Event =~ ""meeting.participant_joined"" 
| extend JoinedTimeZone = tostring(parse_json(MeetingEvents).Timezone) 
| extend MeetingName = tostring(parse_json(MeetingEvents).MeetingName) 
| extend MeetingId = tostring(parse_json(MeetingEvents).MeetingId) 
| where JoinedTimeZone !in (tz_whitelist)
| join (meetings) on MeetingId 
| where SchedTimezone != JoinedTimeZone 
| project TimeGenerated, MeetingName, JoiningUser=payload_object_participant_user_name_s, JoinedTimeZone, SchedTimezone, MeetingScheduler=User1 
| extend timestamp = TimeGenerated, AccountCustomEntity = JoiningUser
",no
Suspicious link sharing pattern,ZoomLogs,"'Alerts in links that have been shared across multiple Zoom chat channels by the same user in a short space if time. 
Adjust the threshold figure to change the number of channels a message needs to be posted in before an alert is raised.'
",Low,"{
    ""connectorid"":  ""ZoomLogs"",
    ""datatypes"":  [
                      ""ZoomLogs""
                  ]
}","
let threshold = 3; 
let lookback = 1d; 
ZoomLogs 
| where TimeGenerated >= ago(lookback) 
| where Event =~ ""chat_message.sent"" 
| extend Channel = tostring(parse_json(ChatEvents).Channel)  
| extend Message = tostring(parse_json(ChatEvents).Message) 
| where Message matches regex ""http(s?):\\/\\/"" 
| summarize Channels = makeset(Channel), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Message, User, UserId
| extend ChannelCount = arraylength(Channels) 
| where ChannelCount > threshold
| extend timestamp = StartTime, AccountCustomEntity = User
",no
