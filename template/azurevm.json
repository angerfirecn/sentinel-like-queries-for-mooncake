{
    "$schema":  "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymenttemplate.json#",
    "contentversion":  "1.0.0.0",
    "parameters":  {
                       "location":  {
                                        "type":  "string",
                                        "defaultvalue":  "chinaeast2"
                                    },
                       "workspacename":  {
                                             "type":  "string"
                                         },
                       "security - ASC-ComplianceandProtection_id":  {
                                                                         "defaultValue":  "[newGuid()]",
                                                                         "type":  "string"
                                                                     },
                       "security - EventAnalyzer_id":  {
                                                           "defaultValue":  "[newGuid()]",
                                                           "type":  "string"
                                                       },
                       "security - IdentityAndAccess_id":  {
                                                               "defaultValue":  "[newGuid()]",
                                                               "type":  "string"
                                                           },
                       "security - LinuxMachines_id":  {
                                                           "defaultValue":  "[newGuid()]",
                                                           "type":  "string"
                                                       },
                       "security - linuxwindows_id":  {
                                                          "defaultValue":  "[newGuid()]",
                                                          "type":  "string"
                                                      }
                   },
    "resources":  [
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Base64 encoded Windows process command-lines",
                                             "query":  "//Identifies instances of a base64 encoded PE file header seen in the process command line parameter.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName;\nprocessEvents};\nProcessCreationEvents\n| where CommandLine contains \"TVqQAAMAAAAEAAA\"\n| where StartTimeUtc \u003e= ago(timeframe)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_1')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "Excessive Windows logon failures",
                                             "query":  "//User has over 50 Windows logon failures today and at least 33% of the count of logon failures over the previous 7 days.\n//\n\nlet starttime = 8d;\nlet endtime = 1d;\nlet threshold = 0.333;\nlet countlimit = 50;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime)\n| where EventID == 4625 and AccountType =~ \"User\"\n| where IpAddress !in (\"127.0.0.1\", \"::1\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n| join kind=leftouter (\n    SecurityEvent \n    | where TimeGenerated between (ago(starttime) .. ago(endtime))\n    | where EventID == 4625 and AccountType =~ \"User\"\n    | where IpAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize CountPrev7day = count() by EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n) on EventID, Account, LogonTypeName, SubStatus, AccountType, Computer, WorkstationName, IpAddress\n| where CountToday \u003e= coalesce(CountPrev7day,0)*threshold and CountToday \u003e= countlimit\n| extend Reason = case(\nSubStatus == '0xc000005e', 'No logon servers available to service the logon request',\nSubStatus == '0xc0000062', 'Account name is not properly formatted',\nSubStatus == '0xc0000064', 'Account name does not exist',\nSubStatus == '0xc000006a', 'Incorrect password',    \nSubStatus == '0xc000006d', 'Bad user name or password',\nSubStatus == '0xc000006f', 'User logon blocked by account restriction',\nSubStatus == '0xc000006f', 'User logon outside of restricted logon hours',\nSubStatus == '0xc0000070', 'User logon blocked by workstation restriction',\nSubStatus == '0xc0000071', 'Password has expired',\nSubStatus == '0xc0000072', 'Account is disabled',\nSubStatus == '0xc0000133', 'Clocks between DC and other computer too far out of sync',\nSubStatus == '0xc000015b', 'The user has not been granted the requested logon right at this machine',\nSubStatus == '0xc0000193', 'Account has expirated',\nSubStatus == '0xc0000224', 'User is required to change password at next logon',\nSubStatus == '0xc0000234', 'Account is currently locked out',\nstrcat('Unknown reason substatus: ', SubStatus))\n| extend WorkstationName = iff(WorkstationName == \"-\" or isempty(WorkstationName), Computer , WorkstationName) \n| project StartTimeUtc, EndTimeUtc, EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, Computer, WorkstationName, IpAddress, CountToday, CountPrev7day, Avg7Day = CountPrev7day/7\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), Computer = make_set(Computer,128), IpAddressList = make_set(IpAddress,128), sum(CountToday), sum(CountPrev7day), avg(Avg7Day) \nby EventID, Account, LogonTypeName, SubStatus, Reason, AccountType, WorkstationName\n| order by sum_CountToday desc nulls last \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = WorkstationName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_2')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Process executed from binary hidden in Base64 encoded file",
                                             "query":  "//Encoding malicious software is a technique used to obfuscate files from detection. \n//The first CommandLine component is looking for Python decoding base64. \n//The second CommandLine component is looking for Bash/sh command line base64 decoding.\n//The third one is looking for Ruby decoding base64.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\nprocessEvents;\n};\nProcessCreationEvents \n| where TimeGenerated \u003e ago(timeframe) \n| where CommandLine contains \".decode('base64')\"\n        or CommandLine contains \"base64 --decode\"\n        or CommandLine contains \".decode64(\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), CountToday = count() by Computer, Account, AccountDomain, FileName, CommandLine, ParentProcessName \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_3')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Group added to built in domain local or global group",
                                             "query":  "//Identifies when a recently created Group was added to a privileged built in domain local group or global group such as the \n//Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition.\n//References: For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups.\n//\n\nlet timeframe = 1h;\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet GroupAddition = SecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\") \n| where AccountType =~ \"User\" and MemberName == \"-\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  \nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid;\nlet GroupCreated = SecurityEvent\n| where TimeGenerated \u003e ago(timeframe)\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType =~ \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, \nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid;\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid \n| extend timestamp = GroupCreateTime, AccountCustomEntity = GroupCreateSubjectUserName, HostCustomEntity = GroupCreateComputer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_4')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "Failed logon attempts within 10 mins",
                                             "query":  "//Identifies when failed logon attempts are 20 or higher during a 10 minute period (2 failed logons per minute minimum).\n//\n\nlet timeframe = 10m;\nlet threshold = 20;\nSecurityEvent \n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4625\n| where AccountType =~ \"User\"\n| summarize min(TimeGenerated), max(TimeGenerated), FailedLogonCount = count() by EventID, Activity, Computer, Account, \nTargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| where FailedLogonCount \u003e= threshold\n| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, FailedLogonCount, EventID, Activity, Computer, \nAccount, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_5')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Malware in the recycle bin",
                                             "query":  "//Identifies malware that has been hidden in the recycle bin.\n//References: https://azure.microsoft.com/blog/how-azure-security-center-helps-reveal-a-cyberattack/.\n//\n\nlet timeframe = 1d;\nlet procList = dynamic([\"cmd.exe\",\"ftp.exe\",\"schtasks.exe\",\"powershell.exe\",\"rundll32.exe\",\"regsvr32.exe\",\"msiexec.exe\"]);\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, NewProcessName,\nFileName = Process, CommandLine,  ParentProcessName;\nprocessEvents};\nProcessCreationEvents \n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName in~ (procList)\n| where CommandLine contains \":\\\\recycler\"\n| project StartTimeUtc = TimeGenerated, Computer, Account, NewProcessName, FileName, CommandLine, ParentProcessName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_6')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "SecurityEvent - Multiple authentication failures followed by a success",
                                             "query":  "//Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication\n//within a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or\n//possible mis-configuration of a service account within an environment.\n//The lookback is set to 6h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum\n//of 5 failures followed by a success for an account within 1 hour to surface an alert.\n//\n\nlet timeRange = 6h;\nlet authenticationWindow = 1h;\nlet authenticationThreshold = 5;\nSecurityEvent\n| where TimeGenerated \u003e ago(timeRange)\n| where EventID == 4624 or EventID == 4625\n| where IpAddress != \"-\" and isnotempty(Account)\n| extend Outcome = iff(EventID == 4624, \"Success\", \"Failure\")\n// bin outcomes into 5 minute windows to reduce the volume of data\n| summarize OutcomeCount=count() by Account, IpAddress, Computer, Outcome, bin(TimeGenerated, 5m)\n| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount\n// sort ready for sessionizing - by account and time of the authentication outcome\n| sort by Account asc, TimeGenerated asc\n| serialize \n// sessionize into failure groupings until either the account changes or there is a success\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == \"Success\")\n// count the failures in each session\n| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == \"Failure\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), makelist(Outcome), makeset(Computer), makeset(IpAddress) by SessionStartedUtc, Account\n// the session must not start with a success, and must end with one\n| where array_index_of(list_Outcome, \"Success\") != 0\n| where array_index_of(list_Outcome, \"Success\") == array_length(list_Outcome) - 1\n| project-away SessionStartedUtc, list_Outcome \n// where the number of failures before the success is above the threshold \n| where FailureCountBeforeSuccess \u003e= authenticationThreshold\n// expand out ip and computer for customer entity assignment\n| mvexpand set_IpAddress, set_Computer\n| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)\n| extend timestamp=StartTime, AccountCustomEntity=Account, HostCustomEntity=Computer, IPCustomEntity=IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_7')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "AD account with don't expire password - disabled",
                                             "query":  "//Identifies whenever a user account has the setting \"Password Never Expires\" in the user account properties selected.\n//This is indicated in Security event 4738 in the EventData item labeled UserAccountControl with an included value of %%2089 \n//%%2089 resolves to \"Dont Expire Password - Disabled\".\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID == 4738\n// 2089 value indicates the Don't Expire Password value has been set\n| where UserAccountControl has \"%%2089\" \n| extend Value_2089 = iff(UserAccountControl has \"%%2089\",\"'Don't Expire Password' - Disabled\", \"Not Changed\")\n// 2050 indicates that the Password Not Required value is NOT set, this often shows up at the same time as a 2089 and is the recommended value.  This value may not be in the event. \n| extend Value_2050 = iff(UserAccountControl has \"%%2050\",\"'Password Not Required' - Disabled\", \"Not Changed\")\n// If value %%2082 is present in the 4738 event, this indicates the account has been configured to logon WITHOUT a password. Generally you should only see this value when an account is created and only in Event 4720: Account Creation Event.  \n| extend Value_2082 = iff(UserAccountControl has \"%%2082\",\"'Password Not Required' - Enabled\", \"Not Changed\")\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, AccountType, UserAccountControl, Value_2089, Value_2050, Value_2082\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_8')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "AD user created password not set within 24-48 hours",
                                             "query":  "//Identifies whenever a new account is created with a default password and password is not changed within 24-48 hours.\n//Simple version, can be more precise with Windowing, but not necessary if run as an alert on a daily basis.\n//Effectively, there is an event 4722 indicating a user enabled and no event 4723 indicating a password was changed within in that day or the next day.\n//\n\nlet starttime = 2d;\nlet endtime = 1d;\nSecurityEvent\n// include yesterday and not today, so we can confirm a match occurs within the next day\n| where TimeGenerated \u003e= startofday(ago(starttime)) and TimeGenerated \u003c= startofday(ago(endtime))  \n// 4722: User Account Enabled\n| where EventID == 4722 \n// Removing Machine Accounts\n| where TargetUserName !endswith \"$\" \n| join kind= leftanti (\n  SecurityEvent\n  //verify over the last 2 days\n  | where TimeGenerated \u003e= startofday(ago(starttime))\n  // Attempt made to change password\n  | where EventID == 4723\n  // Removing Machine Accounts\n  | where TargetUserName !endswith \"$\"\n) on TargetUserName, TargetDomainName\n| project StartTimeUtc = TimeGenerated, EventID, Computer, TargetUserName, TargetDomainName, SubjectUserName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_9')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Potential Kerberoasting",
                                             "query":  "//A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment. \n//Each SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment. \n//An attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains \n//a hash of the Service account. This can then be used for offline cracking. This hunting query looks for accounts that are generating excessive \n//requests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number \n//of request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.\n//\n\nlet starttime = 1d;\nlet endtime = 1h;\nlet prev23hThreshold = 4;\nlet prev1hThreshold = 15;\nlet Kerbevent =\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime)\n| where EventID == 4769\n| parse EventData with * 'TicketEncryptionType\"\u003e' TicketEncryptionType \"\u003c\" *\n| where TicketEncryptionType == '0x17'\n| parse EventData with * 'TicketOptions\"\u003e' TicketOptions \"\u003c\" *\n| where TicketOptions == '0x40810000'\n| parse EventData with * 'Status\"\u003e' Status \"\u003c\" *\n| where Status == '0x0'\n| parse EventData with * 'ServiceName\"\u003e' ServiceName \"\u003c\" *\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\" \n| parse EventData with * 'TargetUserName\"\u003e' TargetUserName \"\u003c\" *\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| parse EventData with * 'IpAddress\"\u003e::ffff:' ClientIPAddress \"\u003c\" *;\nlet Kerbevent23h = Kerbevent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName) \nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status\n| where ServiceNameCountPrev23h \u003c prev23hThreshold;\nlet Kerbevent1h = \nKerbevent\n| where TimeGenerated \u003e= ago(endtime)\n| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName) \nby Computer, TargetUserName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;\nKerbevent1h \n| join kind=leftanti\n(\nKerbevent23h\n) on TargetUserName\n// Threshold value set above is based on testing, this value may need to be changed for your environment.\n| where ServiceNameCountPrev1h \u003e prev1hThreshold\n| project StartTimeUtc = min_TimeGenerated, EndTimeUtc = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions, \nTicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h\n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, HostCustomEntity = Computer, IPCustomEntity = ClientIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_10')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Powershell Empire cmdlets seen in command line",
                                             "query":  "//Identifies instances of PowerShell Empire cmdlets in powershell process command line data.\n//\n\nlet timeframe = 1d;\nlet regexEmpire = @\"SetDelay|GetDelay|Set-LostLimit|Get-LostLimit|Set-Killdate|Get-Killdate|Set-WorkingHours|Get-WorkingHours|Get-Sysinfo|Add-Servers|Invoke-ShellCommand|Start-AgentJob|Update-Profile|Get-FilePart|Encrypt-Bytes|Decrypt-Bytes|Encode-Packet|Decode-Packet|Send-Message|Process-Packet|Process-Tasking|Get-Task|Start-Negotiate|Invoke-DllInjection|Invoke-ReflectivePEInjection|Invoke-Shellcode|Invoke-ShellcodeMSIL|Get-ChromeDump|Get-ClipboardContents|Get-IndexedItem|Get-Keystrokes|Invoke-Inveigh|Invoke-NetRipper|local:Invoke-PatchDll|Invoke-NinjaCopy|Get-Win32Types|Get-Win32Constants|Get-Win32Functions|Sub-SignedIntAsUnsigned|Add-SignedIntAsUnsigned|Compare-Val1GreaterThanVal2AsUInt|Convert-UIntToInt|Test-MemoryRangeValid|Write-BytesToMemory|Get-DelegateType|Get-ProcAddress|Enable-SeDebugPrivilege|Invoke-CreateRemoteThread|Get-ImageNtHeaders|Get-PEBasicInfo|Get-PEDetailedInfo|Import-DllInRemoteProcess|Get-RemoteProcAddress|Copy-Sections|Update-MemoryAddresses|Import-DllImports|Get-VirtualProtectValue|Update-MemoryProtectionFlags|Update-ExeFunctions|Copy-ArrayOfMemAddresses|Get-MemoryProcAddress|Invoke-MemoryLoadLibrary|Invoke-MemoryFreeLibrary|Out-Minidump|Get-VaultCredential|Invoke-DCSync|Translate-Name|Get-NetDomain|Get-NetForest|Get-NetForestDomain|Get-DomainSearcher|Get-NetComputer|Get-NetGroupMember|Get-NetUser|Invoke-Mimikatz|Invoke-PowerDump|Invoke-TokenManipulation|Exploit-JMXConsole|Exploit-JBoss|Invoke-Thunderstruck|Invoke-VoiceTroll|Set-WallPaper|Invoke-PsExec|Invoke-SSHCommand|Invoke-PSInject|Invoke-RunAs|Invoke-SendMail|Invoke-Rule|Get-OSVersion|Select-EmailItem|View-Email|Get-OutlookFolder|Get-EmailItems|Invoke-MailSearch|Get-SubFolders|Get-GlobalAddressList|Invoke-SearchGAL|Get-SMTPAddress|Disable-SecuritySettings|Reset-SecuritySettings|Get-OutlookInstance|New-HoneyHash|Set-MacAttribute|Invoke-PatchDll|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|New-ElevatedPersistenceOption|New-UserPersistenceOption|Add-Persistence|Invoke-CallbackIEX|Add-PSFirewallRules|Invoke-EventLoop|Invoke-PortBind|Invoke-DNSLoop|Invoke-PacketKnock|Invoke-CallbackLoop|Invoke-BypassUAC|Get-DecryptedCpassword|Get-GPPInnerFields|Invoke-WScriptBypassUAC|Get-ModifiableFile|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceUserAdd|Invoke-ServiceCMD|Write-UserAddServiceBinary|Write-CMDServiceBinary|Write-ServiceEXE|Write-ServiceEXECMD|Restore-ServiceEXE|Invoke-ServiceStart|Invoke-ServiceStop|Invoke-ServiceEnable|Invoke-ServiceDisable|Get-ServiceDetail|Find-DLLHijack|Find-PathHijack|Write-HijackDll|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-Webconfig|Get-ApplicationHost|Write-UserAddMSI|Invoke-AllChecks|Invoke-ThreadedFunction|Test-Login|Get-UserAgent|Test-Password|Get-ComputerDetails|Find-4648Logons|Find-4624Logons|Find-AppLockerLogs|Find-PSScriptsInPSAppLog|Find-RDPClientConnections|Get-SystemDNSServer|Invoke-Paranoia|Invoke-WinEnum{|Get-SPN|Invoke-ARPScan|Invoke-Portscan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|New-InMemoryModule|Add-Win32Type|Export-PowerViewCSV|Get-MacAttribute|Copy-ClonedFile|Get-IPAddress|Convert-NameToSid|Convert-SidToName|Convert-NT4toCanonical|Get-Proxy|Get-PathAcl|Get-NameField|Convert-LDAPProperty|Get-NetDomainController|Add-NetUser|Add-NetGroupUser|Get-UserProperty|Find-UserField|Get-UserEvent|Get-ObjectAcl|Add-ObjectAcl|Invoke-ACLScanner|Get-GUIDMap|Get-ADObject|Set-ADObject|Get-ComputerProperty|Find-ComputerField|Get-NetOU|Get-NetSite|Get-NetSubnet|Get-DomainSID|Get-NetGroup|Get-NetFileServer|SplitPath|Get-DFSshare|Get-DFSshareV1|Get-DFSshareV2|Get-GptTmpl|Get-GroupsXML|Get-NetGPO|Get-NetGPOGroup|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Invoke-ImpersonateUser|Create-ProcessWithToken|Free-AllTokens|Enum-AllTokens|Invoke-RevertToSelf|Set-Speaker(\\$Volume){\\$wshShell|Local:Get-RandomString|Local:Invoke-PsExecCmd|Get-GPPPassword|Local:Inject-BypassStuff|Local:Invoke-CopyFile\\(\\$sSource,|ind-Fruit|New-IPv4Range|New-IPv4RangeFromCIDR|Parse-Hosts|Parse-ILHosts|Exclude-Hosts|Get-TopPort|Parse-Ports|Parse-IpPorts|Remove-Ports|Write-PortscanOut|Convert-SwitchtoBool|Get-ForeignUser|Get-ForeignGroup\";\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName;\nprocessEvents};\nlet decodedPS = ProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe) \n| where CommandLine contains \" -encodedCommand\"\n| parse kind=regex flags=i CommandLine with * \"-EncodedCommand \" encodedCommand\n| project StartTimeUtc = TimeGenerated, encodedCommand = tostring(split(encodedCommand, ' ')[0]), CommandLine\n// Note: currently the base64_decodestring function is limited to supporting UTF8\n| extend decodedCommand = translate('\\0','', base64_decodestring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, CommandLine , strlen(encodedCommand);\n(decodedPS\n| union \n(ProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName in~ (\"powershell.exe\",\"powershell_ise.exe\")\n| where CommandLine !contains \"-encodedcommand\")\n| extend StartTimeUtc = TimeGenerated\n)\n| where CommandLine matches regex regexEmpire\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_11')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "Multiple RDP connections from Single System",
                                             "query":  "//Identifies when an RDP connection is made to multiple systems and above the normal for the previous 7 days.  \n//Connections from the same system with the same account within the same day.\n//RDP connections are indicated by the EventID 4624 with LogonType = 10\n//\n\nlet endtime = 1d;\nlet starttime = 8d;\nlet threshold = 2.0;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = makeset(Computer), ProcessSet = makeset(ProcessName)  \nby Account, IpAddress, AccountType, Activity, LogonTypeName\n| join kind=inner (\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account, IpAddress\n) on Account, IpAddress\n| extend Ratio = ComputerCountToday/(ComputerCountPrev7Days*1.0)\n// Where the ratio of today to previous 7 days is more than double.\n| where Ratio \u003e threshold\n| project StartTimeUtc, EndTimeUtc, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_12')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "RDP Nesting",
                                             "query":  "//Identifies when an RDP connection is made to a first system and then an RDP connection is made from the first system \n//to another system with the same account within the 60 minutes. Additionally, if historically daily  \n//RDP connections are indicated by the logged EventID 4624 with LogonType = 10\n//\n\nlet endtime = 1d;\nlet starttime = 8d;\n// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day.  Change the threshold as needed.\nlet threshold = 5;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n// Labeling the first RDP connection time, computer and ip\n| extend FirstHop = TimeGenerated, FirstComputer = toupper(Computer), FirstIPAddress = IpAddress, Account = tolower(Account)  \n| join kind=inner (\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n// Labeling the second RDP connection time, computer and ip\n| extend SecondHop = TimeGenerated, SecondComputer = toupper(Computer), SecondIPAddress = IpAddress, Account = tolower(Account)\n) on Account\n// Make sure that the first connection is after the second connection --\u003e SecondHop \u003e FirstHop\n// Then identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match --\u003e FirstComputer != SecondComputer\n// Then make sure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers --\u003e FirstIPAddress != SecondIPAddress\n| where FirstComputer != SecondComputer and FirstIPAddress != SecondIPAddress and SecondHop \u003e FirstHop\n// where the second hop occurs within 30 minutes of the first hop\n| where SecondHop \u003c= FirstHop+30m\n| distinct Account, FirstHop, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 7 days where the Account and IP has connected 5 or more computers.\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize makeset(Computer), ComputerCount = dcount(Computer) by bin(TimeGenerated, 1d), Account = tolower(Account), IpAddress\n// Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\n| where ComputerCount \u003e= threshold\n| mvexpand set_Computer\n| extend Computer = toupper(set_Computer)\n) on Account, $left.SecondComputer == $right.Computer, $left.SecondIPAddress == $right.IpAddress\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop) by Account, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, \nSecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = FirstHopFirstSeen, AccountCustomEntity = Account, HostCustomEntity = FirstComputer, IPCustomEntity = FirstIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_13')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Rare RDP Connections",
                                             "query":  "//Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\n//RDP connections are indicated by the EventID 4624 with LogonType = 10\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(endtime) \n| where EventID == 4624 and LogonType == 10\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count() \nby Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 14 days that is not rare\n| join kind=leftanti (\nSecurityEvent\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where EventID == 4624\n| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n) on Account, Computer\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)  \nby Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_14')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Security Event log cleared",
                                             "query":  "//Checks for event id 1102 which indicates the security event log was cleared. \n//It uses Event Source Name \"Microsoft-Windows-Eventlog\" to avoid generating false positives from other sources, like AD FS servers for instance.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 1102 and EventSourceName == \"Microsoft-Windows-Eventlog\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_15')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "Process execution frequency anomaly",
                                             "query":  "//Identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors. \n//The query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns. \n//Sudden increases in execution frequency of sensitive processes should be further investigated for malicious activity.\n//Tune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 5;\nlet ExeList = dynamic([\"powershell.exe\",\"cmd.exe\",\"wmic.exe\",\"psexec.exe\",\"cacls.exe\",\"rundll.exe\"]);\nlet TimeSeriesData = \nSecurityEvent\n| where EventID == 4688 | extend Process = tolower(Process)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where Process in (ExeList)\n| project TimeGenerated, Computer, AccountType, Account, Process\n| make-series Total=count() on TimeGenerated from ago(starttime) to ago(endtime) step timeframe by Process;\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies \u003e 0\n| project Process, TimeGenerated, Total, baseline, anomalies, score\n| where Total \u003e TotalEventsThreshold;\nTimeSeriesAlerts\n| join (\nSecurityEvent\n| where EventID == 4688 | extend Process = tolower(Process)\n| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account\n) on Process, TimeGenerated \n| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score \n| extend timestamp = AnomalyHour, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_16')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "Account added and removed from privileged groups",
                                             "query":  "//Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise. \n//\n\nlet timeframe = 1d;\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nlet AC_Add = \nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n// Event ID related to member addition.\n| where EventID in (4728, 4732,4756) \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID  \n| parse EventData with * '\"MemberName\"\u003e' AccountAdded \",OU\" * \n| where isnotempty(AccountAdded)\n| extend GroupAddedTo = TargetUserName, AddingAccount = Account \n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, \"||\", GroupAddedTo, \"||\", AddingAccount )\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated;\nlet AC_Remove = \nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n// Event IDs related to member removal.\n| where EventID in (4729,4733,4757)\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID \n| parse EventData with * '\"MemberName\"\u003e' AccountRemoved \",OU\" * \n| where isnotempty(AccountRemoved)\n| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, \"||\", GroupRemovedFrom, \"||\", RemovingAccount)\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, RemovedAccountId = tolower(AccountRemoved), \nRemovedByUser = SubjectUserName, RemovedByUserLogonId = SubjectLogonId,  GroupRemovedFrom = TargetUserName, TargetDomainName; \nAC_Add \n| join kind= inner AC_Remove on $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount \n| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)\n| where DurationinSecondAfter_Removed \u003e 0\n| project-away AccountRemoved_GroupRemovedFrom_RemovingAccount\n| extend timestamp = AccountAddedTime, AccountCustomEntity = RemovedAccountId, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_17')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "User account added to built in domain local or global group",
                                             "query":  "//Identifies when a user account has been added to a privileged built in domain local group or global group \n//such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition.\n//\n\nlet timeframe = 1d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-498$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1000$\";\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// When MemberName contains '-' this indicates addition of a group to a group\n| where AccountType == \"User\" and MemberName != \"-\"\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (4728, 4732, 4756)   \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| extend SimpleMemberName = tostring(split(tostring(split(MemberName, \",\")[0]),\"CN=\")[1])\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, SimpleMemberName, MemberName, MemberSid, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid\n| extend timestamp = StartTimeUtc, AccountCustomEntity = SimpleMemberName, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_18')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "User account created and deleted within 10 mins",
                                             "query":  "//Identifies when a user account is created and then deleted within 10 minutes. This can be an indication of compromise and\n//an adversary attempting to hide in the noise.\n//\n\nlet timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n// A user account was created\n| where EventID == 4720\n| where AccountType =~ \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n  SecurityEvent\n  | where TimeGenerated \u003e ago(timeframe) \n  // A user account was deleted \n  | where EventID == 4726\n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= threshold\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_19')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Medium",
                                             "displayName":  "User account enabled and disabled within 10 mins",
                                             "query":  "//Identifies when a user account is enabled and then disabled within 10 minutes. This can be an indication of compromise and\n//an adversary attempting to hide in the noise.\n//\n\nlet timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n// A user account was enabled\n| where EventID == 4722\n| where AccountType =~ \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n  SecurityEvent\n  | where TimeGenerated \u003e ago(timeframe) \n  // A user account was disabled \n  | where EventID == 4725\n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= threshold\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, AccountCustomEntity = AccountUsedToCreate, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_20')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Detection-Low",
                                             "displayName":  "New user created and added to the built-in administrators group",
                                             "query":  "//Identifies when a user account was created and then added to the builtin Administrators group in the same day.\n//This should be monitored closely and all additions reviewed.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e ago(timeframe) \n| where EventID == 4720\n| where AccountType == \"User\"\n| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer), \nCreatedUser = tolower(TargetUserName), Domain = toupper(TargetDomainName), CreatedUserSid = TargetSid, AccountUsedToCreateUser = SubjectUserName\n|join (\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where AccountType == \"User\"\n// 4732 - A member was added to a security-enabled local group\n| where EventID == 4732\n//TargetSid is the builin Admins group: S-1-5-32-544\n| where TargetSid == \"S-1-5-32-544\"\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = TargetUserName, \nDomain = toupper(TargetDomainName), GroupSid = TargetSid, UserAdded = SubjectUserName, UserAddedSid = SubjectUserSid, CreatedUser = tolower(SubjectUserName), \nCreatedUserSid = MemberSid\n)\non CreatedUserSid\n//Create User first, then the add to the group.\n| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, Domain, GroupAddTime, GroupAddEventID, \nGroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, UserAdded, UserAddedSid \n| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_21')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Detection-Medium",
                                             "displayName":  "Failed logon attempts in authpriv",
                                             "query":  "//Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in \n//isnt provisioned on the machine. A few hits could indicate someone attempting to access a machine they arent authorized to access. \n//If there are many of hits, especially from outside your network, it could indicate a brute force attack. \n//Default threshold for logon attempts is 15.\n//\n\nlet startdate = 1d;\nlet threshold = 15;\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\n// are aggregated.\nlet authfail = Syslog\n| where TimeGenerated \u003e= ago(startdate)     \n| where Facility =~ \"authpriv\"   // looks at authpriv messages\n| where SyslogMessage contains \"authentication failure\" and SyslogMessage contains \" uid=0\"\n| parse SyslogMessage with * \"rhost=\" ExternalIP\n| project TimeGenerated, Computer, ProcessName, HostIP, ExternalIP, ProcessID;  \n// Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \nlet userfail = Syslog \n| where TimeGenerated \u003e= ago(startdate)\n| where Facility =~ \"authpriv\" \n| where SyslogMessage contains \"user unknown\"\n| project TimeGenerated, Computer, HostIP, ProcessID;\n// Join the two log messages above\nlet userauthfail = authfail | join (userfail) on Computer, HostIP, ProcessID\n| project TimeGenerated, Computer, HostIP, ExternalIP, ProcessID ;\n// Extract the EventTime of the first logon attempt\nlet firstfail = userauthfail\n| summarize arg_min(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, FirstLogonAttempt = TimeGenerated;\n// Extract the EventTime of the last logon attempt\nlet lastfail = userauthfail\n| summarize arg_max(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, LatestLogonAttempt = TimeGenerated;\n// Join first and last logon attempt data and calculate the time between them (AttemptPeriodLength).\nlet faildates = firstfail | join (lastfail) on Computer, ExternalIP\n| project ExternalIP, Computer, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt;\n// Count the number of failed logon attempts by External IP and internal machine\nlet totalfails = userauthfail\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TotalLogonAttempts = count() by ExternalIP, Computer, HostIP\n| project StartTimeUtc, EndTimeUtc, ExternalIP, Computer, HostIP, TotalLogonAttempts;\n// Combine total attempts with timing data from above\nlet finalfails = totalfails | join (faildates) on Computer, ExternalIP\n| project StartTimeUtc, EndTimeUtc, SourceAddress = ExternalIP, DestinationHost = Computer, DestinationIP = HostIP, TotalLogonAttempts, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts\n| order by DestinationHost asc nulls last;\nfinalfails \n| where TotalLogonAttempts \u003e= threshold\n| extend timestamp = StartTimeUtc, HostCustomEntity = DestinationHost, IPCustomEntity = DestinationIP\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_22')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Detection-Low",
                                             "displayName":  "Squid proxy events related to mining pools",
                                             "query":  "//Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used. \n// http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet timeframe = 1d;\nlet DomainList = dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \"xmrget.com\", \n\"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \"supportxmr.com\",\n\"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \"gntl.co.uk\", \"semipool.com\", \n\"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \"coinpoolit.webhop.me\", \"nanopool.org\", \n\"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \"extrmepool.org\", \"webcoin.me\", \n\"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \"dwarfpool.com\", \"hash-to-coins.com\", \n\"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \"moneropool.ru\", \"cryptonotepool.org.uk\",\n\"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\",\n\"shscrypto.net\"]);\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_23')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Detection-Low",
                                             "displayName":  "Squid proxy events for ToR proxies",
                                             "query":  "//Check for Squid proxy events associated with common ToR proxies. This query presumes the default squid log format is being used.\n//http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet timeframe = 1d;\nlet DomainList = dynamic([\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\", \n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\", \n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\", \n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\"]);\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == \"200\"\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP, AccountCustomEntity = User\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_24')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Detection-Medium",
                                             "displayName":  "New internet-exposed SSH endpoints",
                                             "query":  "//Looks for SSH endpoints with a history of sign-ins only from private IP addresses are accessed from a public IP address.\n//\n\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.'; \nlet avgthreshold = 0;\nlet probabilityLimit = 0.01;\nlet startime = 7d;\nlet ssh_logins = Syslog\n| where TimeGenerated \u003e= ago(startime)\n| where Facility contains \"auth\" and ProcessName =~ \"sshd\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage) \n| where isnotempty(SourceIP)\n| extend ipType = iff(SourceIP matches regex PrivateIPregex,\"private\" ,\"public\");\nssh_logins \n| summarize privatecount=countif(ipType==\"private\"), publiccount=countif(ipType==\"public\") by HostName, HostIP, bin(EventTime, 1d)\n| summarize \npublicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),\nprivateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP\n| mv-apply publicIPLoginHistory = publicIPLoginHistory on\n(\n    order by todatetime(publicIPLoginHistory['logon_time']) asc\n    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))\n)\n| mv-apply privateIPLoginHistory = privateIPLoginHistory on\n(\n    order by todatetime(privateIPLoginHistory['logon_time']) asc\n    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))\n)\n// Some logins from private IPs\n| where privateAverage \u003e avgthreshold\n// There is a non-zero number of logins from public IPs\n| where publicAverage \u003e avgthreshold\n// Approximate probability of seeing login from a public IP is \u003c 1%\n| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)\n| where probabilityPublic \u003c probabilityLimit\n// Today has the highest number of logins from public IPs that we've seen in the last week\n| extend publicLoginCountToday = publicIPLoginCountList[-1]\n| where publicLoginCountToday \u003e= maxPublicLoginCount\n| extend HostCustomEntity = HostName\n// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect\n// | join kind=rightsemi (\n//   ssh_logins\n//  | where ipType == \"public\"\n//  ) on HostName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_25')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Detection-Low",
                                             "displayName":  "SSH - Potential Brute Force",
                                             "query":  "//Identifies an IP address that had 15 failed attempts to sign in via SSH in a 4 hour block during a 24 hour time period.\n//\nlet timeframe = 1d;\nlet threshold = 15;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe)\n| where SyslogMessage contains \"Failed password for\"\n| where ProcessName =~ \"sshd\" \n| parse kind=relaxed SyslogMessage with * \"Failed password for \" user \" from \" ip \" port\" port \" ssh2\"\n| project user, ip, port, SyslogMessage, EventTime\n| summarize EventTimes = make_list(EventTime), PerHourCount = count() by ip, bin(EventTime, 4h), user\n//| where PerHourCount \u003e threshold\n| mvexpand EventTimes\n| extend EventTimes = tostring(EventTimes) \n| summarize StartTimeUtc = min(EventTimes), EndTimeUtc = max(EventTimes), UserList = makeset(user), sum(PerHourCount) by IPAddress = ip\n| extend UserList = tostring(UserList) \n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress, AccountCustomEntity = UserList\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_26')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Alerts related to IP",
                                             "query":  "//Any Alerts that fired related to a given IpAddress during the range of +6h and -3d\n//\n\nlet GetAllAlertsWithIp = (suspiciousEventTime:datetime, v_ipAddress:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n// expand JSON properties\n| where ExtendedProperties contains v_ipAddress or Entities contains v_ipAddress\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project StartTimeUtc = StartTime, EndTimeUtc = EndTime, AlertName, Computer, Account, IpAddress, ExtendedProperties, Entities\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and \u003cipaddress\u003e value below\nGetAllAlertsWithIp(datetime('2019-02-05T10:02:51.000'), (\"\u003cipaddress\u003e\"))\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_27')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Alerts related to account",
                                             "query":  "//Any Alerts that fired related to a given account during the range of +6h and -3d\n//\n\n\nlet GetAllAlertsForUser = (suspiciousEventTime:datetime, v_User:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n// expand JSON properties\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| where Account contains v_User\n| project TimeGenerated, AlertName, Computer, Account, IpAddress, ExtendedProperties \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and username value below\nGetAllAlertsForUser(datetime('2019-01-20T10:02:51.000'), toupper(\"\u003cuser_name\u003e\"))",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_28')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Alerts On Host",
                                             "query":  "//Any Alerts that fired on a given host during the range of +6h and -3d\n//\n\nlet GetAllAlertsOnHost = (suspiciousEventTime:datetime, v_Host:string){\n//-3d and +6h as some alerts fire after accumulation of events\nlet v_StartTime = suspiciousEventTime-3d;\nlet v_EndTime = suspiciousEventTime+6h;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n// expand JSON properties\n| extend Extprop = parsejson(ExtendedProperties)\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| where ExtendedProperties contains v_Host or Entities contains v_Host\n| project TimeGenerated, AlertName, Computer, Account, IpAddress, ExtendedProperties\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and hostname value below\nGetAllAlertsOnHost(datetime('2019-01-20T10:02:51.000'), toupper(\"\u003chost_name\u003e\"))",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_29')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Alerts related to File",
                                             "query":  "//Any Alerts that fired related to a given File during the range of +6h and -3d\n//\n\nlet GetAllAlertsWithFile = (suspiciousEventTime:datetime, v_File:string){\nlet v_StartTime = suspiciousEventTime-1d;\nlet v_EndTime = suspiciousEventTime+1d;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| extend Extprop = parsejson(ExtendedProperties)\n| where ExtendedProperties has v_File\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n};\n// change datetime value and \u003cfilename\u003e value below\nGetAllAlertsWithFile(datetime('2019-01-18T10:36:07Z'), \"\u003cfilename\u003e\")",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_30')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Alerts With This Process",
                                             "query":  "//Any Alerts that fired on any host with this same process in the range of +-1d\n//\n\nlet GetAllAlertsWithProcess = (suspiciousEventTime:datetime, v_Process:string){\nlet v_StartTime = suspiciousEventTime-1d;\nlet v_EndTime = suspiciousEventTime+1d;\nSecurityAlert\n| where TimeGenerated between (v_StartTime .. v_EndTime)\n| where ExtendedProperties contains v_Process or Entities contains v_Process\n| extend Extprop = parsejson(ExtendedProperties)\n| extend ProcessName = parse_json(ExtendedProperties).[\"Suspicious Process\"]\n| extend Computer = iff(isnotempty(toupper(tostring(Extprop[\"Compromised Host\"]))), toupper(tostring(Extprop[\"Compromised Host\"])), tostring(parse_json(Entities)[0].HostName))\n| extend Account = iff(isnotempty(tolower(tostring(Extprop[\"User Name\"]))), tolower(tostring(Extprop[\"User Name\"])), tolower(tostring(Extprop[\"user name\"])))\n| extend IpAddress = tostring(parse_json(ExtendedProperties).[\"Client Address\"]) \n| project TimeGenerated, AlertName, ProcessName, Computer, Account, IpAddress, ExtendedProperties \n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n| top 10 by TimeGenerated desc nulls last\n};\n// change datetime value and \u003cprocessname\u003e value below\nGetAllAlertsWithProcess(datetime('2019-01-18T10:36:07Z'), \"\u003cprocessname\u003e\")\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_31')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Web shell command alert enrichment",
                                             "query":  "//Extracts MDATP Alerts that indicate a command was executed by a web shell. Uses time window based querying to idneitfy the potential web shell location on the server, then enriches with Attacker IP and User Agent\n//\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nlet timeRange = 3d; \nlet lookupWindow = 1m;  \nlet lookupBin = lookupWindow / 2.0; \nlet distinctIpThreshold = 3; \nlet alerts = SecurityAlert  \n| where TimeGenerated \u003e ago(timeRange) \n| extend alertData = parse_json(Entities), recordGuid = new_guid(); \nlet shellAlerts = alerts \n| where ProviderName =~ \"MDATP\"  \n| mvexpand alertData \n| where alertData.Type =~ \"file\" and alertData.Name =~ \"w3wp.exe\" \n| distinct SystemAlertId \n| join kind=inner (alerts) on SystemAlertId; \nlet alldata = shellAlerts  \n| mvexpand alertData \n| extend Type = alertData.Type; \nlet filedata = alldata  \n| extend id = tostring(alertData.$id)  \n| extend ImageName = alertData.Name  \n| where Type =~ \"file\" and ImageName != \"w3wp.exe\" \n| extend imagefileref = id;  \nlet commanddata = alldata  \n| extend CommandLine = tostring(alertData.CommandLine)  \n| extend creationtime = tostring(alertData.CreationTimeUtc)  \n| where Type =~ \"process\"  \n| where isnotempty(CommandLine)  \n| extend imagefileref = tostring(alertData.ImageFile.$ref); \nlet hostdata = alldata \n| where Type =~ \"host\" \n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId \n| distinct HostName, DnsDomain, SystemAlertId; \nlet commandKeyedData = filedata \n| join kind=inner (  \ncommanddata  \n) on imagefileref \n| join kind=inner (hostdata) on SystemAlertId \n| project recordGuid, TimeGenerated, ImageName, CommandLine, TimeKey = bin(TimeGenerated, lookupBin), HostName, DnsDomain \n| extend Start = TimeGenerated; \nlet baseline = W3CIISLog  \n| where TimeGenerated \u003e ago(timeRange) \n| project-rename SourceIP=cIP, PageAccessed=csUriStem \n| summarize dcount(SourceIP) by PageAccessed \n| where dcount_SourceIP \u003c= distinctIpThreshold; \ncommandKeyedData \n| join kind=inner ( \nW3CIISLog  \n| where TimeGenerated \u003e ago(timeRange) \n| where csUriStem has_any(scriptExtensions)  \n| extend splitUriStem = split(csUriStem, \"/\")  \n| extend FileName = splitUriStem[-1] | extend firstDir = splitUriStem[-2] | extend TimeKey = range(bin(TimeGenerated-lookupWindow, lookupBin), bin(TimeGenerated, lookupBin),lookupBin)  \n| mv-expand TimeKey to typeof(datetime)  \n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Site=sSiteName, HostName=sComputerName, AttackerIP=cIP, AttackerUserAgent=csUserAgent, csUriStem, filename=tostring(FileName), tostring(firstDir), TimeKey \n) on TimeKey, HostName \n| where (StartTime - EndTime) between (0min .. lookupWindow) \n| extend IPCustomEntity = AttackerIP, timestamp = StartTime\n| extend attackerP = pack(AttackerIP, AttackerUserAgent)  \n| summarize Site=make_set(Site), Attacker=make_bag(attackerP) by csUriStem, filename, tostring(ImageName), CommandLine, HostName, IPCustomEntity, timestamp\n| project Site, ShellLocation=csUriStem, ShellName=filename, ParentProcess=ImageName, CommandLine, Attacker, HostName, IPCustomEntity, timestamp\n| join kind=inner (baseline) on $left.ShellLocation == $right.PageAccessed\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_32')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-VM-Hunting-Common",
                                             "displayName":  "Web shell file alert enrichment",
                                             "query":  "//Extracts MDATP Alert for a web shell being placed on the server and then enriches this event with information from W3CIISLog to idnetigy the Attacker that placed the shell\n//\nlet timeWindow = 3d;\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);  \nSecurityAlert  \n| where TimeGenerated \u003e ago(timeWindow)  \n| where ProviderName =~ \"MDATP\" \n| extend alertData = parse_json(Entities)  \n| mvexpand alertData  \n// Get only the file type from the JSON, this gives us the file name\n| where alertData.Type =~ \"file\"  \n// This can be expanded to include other script extensions \n| where alertData.Name has_any(scriptExtensions)\n| extend FileName = alertData.Name \n| project TimeGenerated, tostring(FileName), alertData.Directory \n| join (  \nW3CIISLog  \n| where TimeGenerated \u003e ago(timeWindow)  \n| where csUriStem has_any(scriptExtensions) \n| extend splitUriStem = split(csUriStem, \"/\")  \n| extend FileName = splitUriStem[-1] \n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by AttackerIP=cIP, AttackerUserAgent=csUserAgent, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName)  \n) on FileName \n| project StartTime, EndTime, AttackerIP, AttackerUserAgent, SiteName, ShellLocation\n| extend timestamp = StartTime, IPCustomEntity = AttackerIP  \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_33')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "AD Account Lockout",
                                             "query":  "//Detects Active Directory account lockouts\n//\nlet timeframe = 7d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4740\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LockoutsCount = count() by Activity, Account, TargetSid, TargetDomainName, SourceComputerId, SourceDomainController = Computer\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = TargetDomainName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_34')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Cscript script daily summary breakdown",
                                             "query":  "//breakdown of scripts running in the environment\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project EventTime=TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),  ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\n// Daily summary of cscript activity ? extracting script name and parameters from commandline:\nProcessCreationEvents \n| where EventTime \u003e= ago(timeframe)\n| where FileName =~ \"cscript.exe\"\n// remove commandline switches\n| project EventTime, ComputerName, AccountName, removeSwitches = replace(@\"/+[a-zA-Z0-9:]+\", \"\", ProcessCommandLine)\n// remove the leading cscript.exe process name \n| project EventTime, ComputerName, AccountName, CommandLine = trim(@\"[a-zA-Z0-9\\\\:\"\"]*cscript(.exe)?(\"\")?(\\s)+\", removeSwitches)\n// extract the script name:\n| project EventTime, ComputerName, AccountName, \n// handle case where script name is enclosed in \" characters or is not enclosed in quotes \nScriptName= iff(CommandLine startswith @\"\"\"\", \nextract(@\"([:\\\\a-zA-Z_\\-\\s0-9\\.()]+)(\"\"?)\", 0, CommandLine), \nextract(@\"([:\\\\a-zA-Z_\\-0-9\\.()]+)(\"\"?)\", 0, CommandLine)), CommandLine \n| project EventTime, ComputerName, AccountName, ScriptName=trim(@\"\"\"\", ScriptName) , ScriptNameLength=strlen(ScriptName), CommandLine \n// extract remainder of commandline as script parameters: \n| project EventTime, ComputerName, AccountName, ScriptName, ScriptParams = iff(ScriptNameLength \u003c strlen(CommandLine), substring(CommandLine, ScriptNameLength +1), \"\")\n| summarize min(EventTime), count() by ComputerName, AccountName, ScriptName, ScriptParams\n| order by count_ asc nulls last \n| extend timestamp = min_EventTime, HostCustomEntity = ComputerName, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_35')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "VIP account more than 6 failed logons in 10",
                                             "query":  "//VIP Account with more than 6 failed logon attempts in 10 minutes, include your own VIP list in the table below\n// NTSTATUS codes - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\n//\n\n// Create DataTable with your own values, example below shows dummy usernames and domain\nlet List = datatable(VIPUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\", \"administrator\", \"\"];\nlet timeframe = 10m;\nList\n| project TargetUserName = tolower(VIPUser), TargetDomainName = toupper(Domain)\n| join kind= rightsemi ( \nSecurityEvent \n| where TimeGenerated \u003e ago(2*timeframe) \n| where EventID == \"4625\"\n| where AccountType == \"User\"\n) on TargetUserName, TargetDomainName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FailedVIPLogons = count() by EventID, Activity, WorkstationName, Account, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, SubStatus\n| where FailedVIPLogons \u003e= 6\n// map the most common ntstatus codes\n| extend StatusDesc = case(\nStatus =~ \"0x80090302\", \"SEC_E_UNSUPPORTED_FUNCTION\",\nStatus =~ \"0x80090308\", \"SEC_E_INVALID_TOKEN\",\nStatus =~ \"0x8009030E\", \"SEC_E_NO_CREDENTIALS\",\nStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nStatus =~ \"0xC0000017\", \"STATUS_NO_MEMORY\",\nStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nStatus =~ \"0xC0000034\", \"STATUS_OBJECT_NAME_NOT_FOUND\",\nStatus =~ \"0xC000005E\", \"STATUS_NO_LOGON_SERVERS\",\nStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nStatus =~ \"0xC00000FE\", \"STATUS_NO_SUCH_PACKAGE\",\nStatus =~ \"0xC000009A\", \"STATUS_INSUFFICIENT_RESOURCES\",\nStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nStatus =~ \"0xC0000106\", \"STATUS_NAME_TOO_LONG\",\nStatus =~ \"0xC000010B\", \"STATUS_INVALID_LOGON_TYPE\",\nStatus =~ \"0xC000015B\", \"STATUS_LOGON_TYPE_NOT_GRANTED\",\nStatus =~ \"0xC000018B\", \"STATUS_NO_TRUST_SAM_ACCOUNT\",\nStatus =~ \"0xC0000224\", \"STATUS_PASSWORD_MUST_CHANGE\",\nStatus =~ \"0xC0000234\", \"STATUS_ACCOUNT_LOCKED_OUT\",\nStatus =~ \"0xC00002EE\", \"STATUS_UNFINISHED_CONTEXT_DELETED\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| extend SubStatusDesc = case(\nSubStatus =~ \"0x80090325\", \"SEC_E_UNTRUSTED_ROOT\",\nSubStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nSubStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nSubStatus =~ \"0xC0000064\", \"STATUS_NO_SUCH_USER\",\nSubStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nSubStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nSubStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nSubStatus =~ \"0xC000006F\", \"STATUS_INVALID_LOGON_HOURS\",\nSubStatus =~ \"0xC0000070\", \"STATUS_INVALID_WORKSTATION\",\nSubStatus =~ \"0xC0000071\", \"STATUS_PASSWORD_EXPIRED\",\nSubStatus =~ \"0xC0000072\", \"STATUS_ACCOUNT_DISABLED\",\nSubStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nSubStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nSubStatus =~ \"0xC0000133\", \"STATUS_TIME_DIFFERENCE_AT_DC\",\nSubStatus =~ \"0xC000018D\", \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\",\nSubStatus =~ \"0xC0000193\", \"STATUS_ACCOUNT_EXPIRED\",\nSubStatus =~ \"0xC0000380\", \"STATUS_SMARTCARD_WRONG_PIN\",\nSubStatus =~ \"0xC0000381\", \"STATUS_SMARTCARD_CARD_BLOCKED\",\nSubStatus =~ \"0xC0000382\", \"STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED\",\nSubStatus =~ \"0xC0000383\", \"STATUS_SMARTCARD_NO_CARD\",\nSubStatus =~ \"0xC0000384\", \"STATUS_SMARTCARD_NO_KEY_CONTAINER\",\nSubStatus =~ \"0xC0000385\", \"STATUS_SMARTCARD_NO_CERTIFICATE\",\nSubStatus =~ \"0xC0000386\", \"STATUS_SMARTCARD_NO_KEYSET\",\nSubStatus =~ \"0xC0000387\", \"STATUS_SMARTCARD_IO_ERROR\",\nSubStatus =~ \"0xC0000388\", \"STATUS_DOWNGRADE_DETECTED\",\nSubStatus =~ \"0xC0000389\", \"STATUS_SMARTCARD_CERT_REVOKED\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| project StartTimeUtc, EndTimeUtc, FailedVIPLogons, EventID, Activity, WorkstationName, Account, TargetAccount, TargetUserName, TargetDomainName, LogonType, LogonTypeName, LogonProcessName, Status, StatusDesc, SubStatus, SubStatusDesc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_36')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Enumeration of users and groups",
                                             "query":  "//Finds attempts to list users or groups using the built-in Windows net tool \n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,        AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nFolderPath = \"\",\nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe)\n| where FileName == 'net.exe' and AccountName != \"\" and ProcessCommandLine !contains '\\\\'  and ProcessCommandLine !contains '/add' \n| where (ProcessCommandLine contains ' user ' or ProcessCommandLine contains ' group ') and (ProcessCommandLine endswith ' /do' or ProcessCommandLine endswith ' /domain') \n| extend Target = extract(\"(?i)[user|group] (\\\"*[a-zA-Z0-9-_ ]+\\\"*)\", 1, ProcessCommandLine) | filter Target  != '' \n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by AccountName, Target, ProcessCommandLine, ComputerName\n| project minTimeGenerated, maxTimeGenerated, count_, AccountName, Target, ProcessCommandLine, ComputerName\n| sort by AccountName, Target\n| extend timestamp = minTimeGenerated, AccountCustomEntity = AccountName, HostCustomEntity = ComputerName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_37')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Summary of failed user logons by reason of failure",
                                             "query":  "//A summary of failed logons can be used to infer lateral movement with the intention of discovering credentials and sensitive data\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where AccountType == 'User' and EventID == 4625\n| extend Reason = case(\nSubStatus == '0xc000005e', 'No logon servers available to service the logon request',\nSubStatus == '0xc0000062', 'Account name is not properly formatted',\nSubStatus == '0xc0000064', 'Account name does not exist',\nSubStatus == '0xc000006a', 'Incorrect password',    SubStatus == '0xc000006d', 'Bad user name or password',\nSubStatus == '0xc000006f', 'User logon blocked by account restriction',\nSubStatus == '0xc000006f', 'User logon outside of restricted logon hours',\nSubStatus == '0xc0000070', 'User logon blocked by workstation restriction',\nSubStatus == '0xc0000071', 'Password has expired',\nSubStatus == '0xc0000072', 'Account is disabled',\nSubStatus == '0xc0000133', 'Clocks between DC and other computer too far out of sync',\nSubStatus == '0xc000015b', 'The user has not been granted the requested logon right at this machine',\nSubStatus == '0xc0000193', 'Account has expirated',\nSubStatus == '0xc0000224', 'User is required to change password at next logon',\nSubStatus == '0xc0000234', 'Account is currently locked out',\nstrcat('Unknown reason substatus: ', SubStatus))\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Reason\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_38')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Group added to Built in Domain Local or Global Group",
                                             "query":  "//A Group created in the last 7 days was added to a privileged built in domain local group or global group such as the \n//Enterprise Admins, Cert Publishers or DnsAdmins.  Be sure to verify this is an expected addition\n//\n\nlet timeframe = 7d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\n// The SIDs for DnsAdmins and DnsUpdateProxy can be different than *-1102 and -*1103. Check these SIDs in your domain before running the query \nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nlet GroupAddition = SecurityEvent \n| where TimeGenerated \u003e ago(timeframe)\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group  \n| where EventID in (\"4728\", \"4732\", \"4756\") \n| where AccountType == \"User\" and MemberName == \"-\"\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, GroupAddComputer = Computer, \nGroupAddTargetUserName = TargetUserName, GroupAddTargetDomainName = TargetDomainName, GroupAddTargetSid = TargetSid,  \nGroupAddSubjectUserName = SubjectUserName, GroupAddSubjectUserSid = SubjectUserSid, GroupSid = MemberSid, Account, Computer\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer;\nlet GroupCreated = SecurityEvent\n| where TimeGenerated \u003e ago(timeframe)\n// 4727 - A security-enabled global group was created\n// 4731 - A security-enabled local group was created\n// 4754 - A security-enabled universal group was created\n| where EventID in (\"4727\", \"4731\", \"4754\")\n| where AccountType == \"User\"\n| project GroupCreateTime = TimeGenerated, GroupCreateEventID = EventID, GroupCreateActivity = Activity, GroupCreateComputer = Computer, \nGroupCreateTargetUserName = TargetUserName, GroupCreateTargetDomainName = TargetDomainName, GroupCreateSubjectUserName = SubjectUserName, \nGroupCreateSubjectDomainName = SubjectDomainName, GroupCreateSubjectUserSid = SubjectUserSid, GroupSid = TargetSid, Account, Computer;\nGroupCreated\n| join (\nGroupAddition\n) on GroupSid\n| extend timestamp = GroupCreateTime, AccountCustomEntity = Account, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_39')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Hosts with new logons",
                                             "query":  "//Shows new accounts that have logged onto a host for the first time - this may clearly be benign activity but an account \n//logging onto multiple hosts for the first time can also be used to look for evidence of that account being used to move \n//laterally across a network.\n//\n\nlet starttime = 7d;\nlet endtime = 1d;\nlet LogonEvents=() { \nlet logonSuccess=SecurityEvent \n| where EventID==4624 \n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='Logon';\nlet logonFail=SecurityEvent \n| where EventID==4625 \n| project TimeGenerated, ComputerName=Computer, AccountName=TargetUserName, AccountDomain=TargetDomainName, IpAddress, ActionType='LogonFailure';\nlogonFail \n| union logonSuccess\n};\nLogonEvents \n| where TimeGenerated \u003e ago(endtime) \n| where ActionType == 'Logon' \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by ComputerName, AccountName \n| join kind=leftanti ( \nLogonEvents \n| where TimeGenerated between(ago(starttime)..ago(endtime)) \n| where ActionType == 'Logon' \n| summarize count() by ComputerName, AccountName \n) on ComputerName, AccountName \n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), HostCount=dcount(ComputerName), HostSet=makeset(ComputerName, 10)  by AccountName, ComputerName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_40')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Least Common Parent And Child Process Pairs",
                                             "query":  "//Looks across your environment for least common Parent/Child process combinations.  \n//Will possibly find some malicious activity disguised as well known process names.  \n//By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration) and isnotnull(ParentProcessName)\n| extend ProcArray = split(NewProcessName, '\\\\'), ParentProcArray = split(ParentProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray), ParentProcArrayLength = arraylength(ParentProcArray)\n| extend LastIndex = ProcArrayLength - 1, ParentLastIndex = ParentProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex], ParentProc = ParentProcArray[ParentLastIndex]\n| where Proc !in (Allowlist)\n| extend ParentChildPair = strcat(ParentProc , ' \u003e ', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by ParentChildPair\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_41')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Least Common Processes by Command Line",
                                             "query":  "//Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 5;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration) and NewProcessName !endswith 'conhost.exe'\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by CommandLine\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_42')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Least Common Processes Including Folder Depth",
                                             "query":  "//Looks across your environment for least common Process Command Lines, may be noisy and require allowlisting.  By ZanCo\n//\n\nlet Allowlist = dynamic (['foo.exe', 'baz.exe']);\nlet Sensitivity = 15;\nlet StartDate = ago(7d);\nlet Duration = 7d;\nSecurityEvent\n| where EventID == 4688 and TimeGenerated \u003e StartDate and TimeGenerated \u003c (StartDate + Duration)\n| extend ProcArray = split(NewProcessName, '\\\\')\n// ProcArrayLength is Folder Depth\n| extend ProcArrayLength = arraylength(ProcArray)\n| extend LastIndex = ProcArrayLength - 1\n| extend Proc = ProcArray[LastIndex]\n| where Proc !in (Allowlist)\n// ProcArray[0] is the proc's Drive\n| extend DriveDepthProc = strcat(ProcArray[0], '-', ProcArrayLength, '-', Proc)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TimesSeen = count(), HostCount = dcount(Computer), Hosts = makeset(Computer), UserCount = dcount(SubjectUserName), Users = makeset(SubjectUserName) by DriveDepthProc\n| where TimesSeen \u003c Sensitivity\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_43')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Masquerading files",
                                             "query":  "//Malware writers often use windows system process names for their malicious process names to make them blend \n//in with other legitimate commands that the Windows system executes.\n//An analyst can create a simple query looking for a process named svchost.exe. \n//It is recommended to filter out well-known security identifiers (SIDs) that are used to launch the legitimate svchost.exe process. \n//The query also filters out the legitimate locations from which svchost.exe is launched.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where NewProcessName endswith \"\\\\svchost.exe\"\n| where SubjectUserSid !in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\")\n| where NewProcessName !contains \":\\\\Windows\\\\System32\"\n| where NewProcessName !contains \":\\\\Windows\\\\Syswow64\"\n| summarize minTimeGenerated=min(TimeGenerated), maxTimeGenerated=max(TimeGenerated), count() by Computer, SubjectUserName, NewProcessName, CommandLine, Account\n| project minTimeGenerated , maxTimeGenerated , count_ , Computer , SubjectUserName , NewProcessName , CommandLine, Account \n| extend timestamp = minTimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_44')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "New processes observed in last 24 hours",
                                             "query":  "//These new processes could be benign new programs installed on hosts; however, especially in normally stable environments, \n//these new processes could provide an indication of an unauthorized/malicious binary that has been installed and run. \n//Reviewing the wider context of the logon sessions in which these binaries ran can provide a good starting point for identifying possible attacks.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| where TimeGenerated \u003e= ago(starttime) \n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, @'')[(-1)]), ProcessCommandLine = CommandLine, InitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine='',InitiatingProcessParentFileName='';\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n| summarize HostCount=dcount(ComputerName) by tostring(FileName)\n| join kind=rightanti (\n    ProcessCreationEvents\n    | where TimeGenerated \u003e= ago(endtime)\n    | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computers = makeset(ComputerName) , HostCount=dcount(ComputerName) by tostring(FileName)\n) on FileName\n| project StartTimeUtc, Computers, HostCount, FileName\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_45')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Summary of users created using uncommon/undocumented commandline switches",
                                             "query":  "//Summarizes uses of uncommon \u0026 undocumented commandline switches to create persistence\n//User accounts may be created to achieve persistence on a machine.\n//Read more here: https://attack.mitre.org/wiki/Technique/T1136\n//Query for users being created using \"net user\" command\n//\"net user\" commands are noisy, so needs to be joined with another signal -\n//e.g. in this example we look for some undocumented variations (e.g. /ad instead of /add)\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe) \n| where EventID==4688\n| project TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName, \n    AccountDomain=SubjectDomainName, FileName=tostring(split(NewProcessName, '\\\\')[-1]), \n    ProcessCommandLine = CommandLine, \n    FolderPath = \"\", InitiatingProcessFileName=ParentProcessName,\n    InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\"\n| where FileName in~ (\"net.exe\", \"net1.exe\")\n| parse kind=regex flags=iU ProcessCommandLine with * \"user \" CreatedUser \" \" * \"/ad\"\n| where not(FileName =~ \"net1.exe\" and InitiatingProcessFileName =~ \"net.exe\" and replace(\"net\", \"net1\", InitiatingProcessCommandLine) =~ ProcessCommandLine)\n| extend CreatedOnLocalMachine=(ProcessCommandLine !contains \"/do\")\n| where ProcessCommandLine contains \"/add\" or (CreatedOnLocalMachine == 0 and ProcessCommandLine !contains \"/domain\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), MachineCount=dcount(ComputerName) by CreatedUser, CreatedOnLocalMachine, InitiatingProcessFileName, FileName, ProcessCommandLine, InitiatingProcessCommandLine\n| extend timestamp = StartTimeUtc, AccountCustomEntity = CreatedUser\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_46')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "PowerShell downloads",
                                             "query":  "//Finds PowerShell execution events that could involve a download\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project  TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,        AccountDomain=SubjectDomainName,\n  FileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nProcessCreationEvents\n| where TimeGenerated \u003e= ago(timeframe) \n| where FileName in~ (\"powershell.exe\", \"powershell_ise.exe\")\n| where ProcessCommandLine has \"Net.WebClient\"\n   or ProcessCommandLine has \"DownloadFile\"\n   or ProcessCommandLine has \"Invoke-WebRequest\"\n   or ProcessCommandLine has \"Invoke-Shellcode\"\n   or ProcessCommandLine contains \"http:\"\n| project TimeGenerated, ComputerName, AccountName, InitiatingProcessFileName, FileName, ProcessCommandLine\n| top 100 by TimeGenerated\n| extend timestamp = TimeGenerated, HostCustomEntity = ComputerName, AccountCustomEntity = AccountName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_47')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "New PowerShell scripts encoded on the commandline",
                                             "query":  "//Identify and decode new encoded powershell scripts this week versus previous 14 days\n//\n\nlet starttime = 21d;\nlet midtime = 14d;\nlet endtime = 7d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n| project  TimeGenerated, ComputerName=Computer,AccountName=SubjectUserName,AccountDomain=SubjectDomainName,\n  FileName=tostring(split(NewProcessName, '\\\\')[-1]),\nProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName,InitiatingProcessCommandLine=\"\",InitiatingProcessParentFileName=\"\";\nprocessEvents};\nlet encodedPSScripts = \nProcessCreationEvents \n| where TimeGenerated \u003e= ago(midtime)\n| where FileName =~ \"powershell.exe\"\n| where ProcessCommandLine contains \"-encodedCommand\";\nencodedPSScripts\n| where TimeGenerated \u003e ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by ProcessCommandLine\n| parse ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n| project StartTimeUtc, EndTimeUtc, decodedCommand=base64_decodestring(substring(encodedCommand, 0, \n strlen(encodedCommand) - (strlen(encodedCommand) %8))), encodedCommand \n| join kind=anti (encodedPSScripts\n  | where TimeGenerated between(ago(starttime)..ago(endtime))\n  | summarize count() by ProcessCommandLine\n  | parse ProcessCommandLine with * \"-EncodedCommand \" encodedCommand\n  | project decodedCommand=base64_decodestring(substring(encodedCommand, 0, \n   strlen(encodedCommand) - (strlen(encodedCommand) %8))), encodedCommand \n) on encodedCommand, decodedCommand \n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_48')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Entropy for Processes for a given Host",
                                             "query":  "//Entropy calculation used to help identify Hosts where they have a high variety of processes(a high entropy process list on a given Host over time).\n//This helps us identify rare processes on a given Host. Rare here means a process shows up on the Host relatively few times in the the last 7days.\n//The Weight is calculated based on the Entropy, Process Count and Distinct Hosts with that Process. The lower the Weight/ProcessEntropy the, more interesting.\n//The Weight calculation increases the Weight if the process executes more than once on the Host or has executed on more than 1 Hosts.\n//In general, this should identify processes on a Host that are rare and rare for the environment.\n//References: https://medium.com/udacity/shannon-entropy-information-gain-and-picking-balls-from-buckets-5810d35d54b4\n//https://en.wiktionary.org/wiki/Shannon_entropy\n//\n\n// May need to reduce the number of days if the environment is very large.  Try 3-5 days, but less accuracy.\nlet end = startofday(now());\nlet start = end - 7d;\nlet Exclude = SecurityEvent\n// Timeframe is set so that results do not change during the same day (UTC time)\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID == 4688\n| summarize ExcludeCompCount = dcount(Computer),  ExcludeProcCount = count() by Process \n// Removing noisy processes for an environment, adjust as needed\n| where ExcludeProcCount \u003e= 2000 and ExcludeCompCount \u003e 2\n;\nlet AllSecEvents = SecurityEvent\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID == 4688\n// excluding well known processes\n| where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n| where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n| where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n| project Computer, Process;\n// Removing noisy process from full list\nlet Include = Exclude | join kind= rightanti (\nAllSecEvents\n) on Process;\n// Identifying prevalence for a given process in the environment\nlet DCwPC = Include | summarize DistinctComputersWithProcessCount = dcount(Computer) by Process\n| join kind=inner (\nInclude \n) on Process\n| distinct Computer, Process, DistinctComputersWithProcessCount;\n// Getting the Total process count on each host to use as the denominator in the entropy calc\nlet TPCoH = Include | summarize TotalProcessCountOnHost = count(Process) by Computer\n| join kind=inner (\nInclude \n) on Computer\n| distinct Computer, Process, TotalProcessCountOnHost\n//Getting a decimal value for later computation\n| extend TPCoHValue = todecimal(TotalProcessCountOnHost);\n// Need the count of each class in my bucket or also said as count of ProcName(Class) per Host(Bucket) for use in the entropy calc\nlet PCoH = Include | summarize ProcessCountOnHost = count(Process) by Computer, Process\n| join kind=inner (\nInclude\n) on Computer,Process\n| distinct Computer, Process, ProcessCountOnHost\n//Getting a decimal value for later computation\n| extend PCoHValue = todecimal(ProcessCountOnHost);\nlet Combined = DCwPC | join ( TPCoH ) on Computer, Process | join ( PCoH ) on Computer, Process; \nlet Results = Combined\n// Entropy calculation\n| extend ProcessEntropy = -log2(PCoHValue/TPCoHValue)*(PCoHValue/TPCoHValue)\n| extend AdjustedProcessEntropy = toreal(ProcessEntropy*10000)\n// Calculating Weight, see details in description\n| extend Weight = toreal((ProcessEntropy*10000)*ProcessCountOnHost*DistinctComputersWithProcessCount)\n// Remove or increase value to see processes with low entropy, meaning more common.\n| where Weight \u003c= 75\n| project Computer, Process, Weight , ProcessEntropy, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount, AdjustedProcessEntropy;\n// Join back full entry\nResults | join kind= inner (\n    SecurityEvent\n    | where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n    | where EventID == 4688\n    // excluding well known processes\n    | where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n    | where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n    | where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n    | where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n    | where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n    | project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName\n) on Computer, Process\n| project TimeGenerated, EventID, Computer, SubjectUserSid, Account, Weight, AdjustedProcessEntropy, FullDecimalProcessEntropy = ProcessEntropy, Process, NewProcessName, CommandLine, ParentProcessName, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount\n| sort by Weight asc, AdjustedProcessEntropy asc, NewProcessName asc\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_49')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Rare processes run by Service accounts",
                                             "query":  "//Service accounts normally are supposed to perform a limited set of tasks in a stable environment. \n//The query collects a list of service account and then joins them with rare processes in an environment to detect anomalous behaviours.\n//\n\nlet timeframe = 1d;\nlet List1 = datatable(AccountName:string)[\"MSSQLSERVER\", \"ReportServer\", \"MSDTSServer100\", \"IUSR\"];         \n// Provide a list of service account/ built-in accounts in an environment.\nlet List2 = SecurityEvent                                                                                   \n// Self generating a list of Service account using event Id :4624\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == \"4624\"\n| where Account !contains \"$\" and Account !contains \"Local SYSTEM\" and Account !contains  \"Local SERVICE\" and Account !contains  \"Network SERVICE\" and Account !contains \"NT AUTHORITY\" and Account !contains \"NT-AUTORIT??T\"\n| where LogonType == \"5\"                                                                                          \n| extend AccountName = Account \n| distinct AccountName;\nlet Accounts = List1 | union (List2 | distinct AccountName);\nlet ProcessCreationEvents=() {\n    let processEvents=SecurityEvent\n\t| where TimeGenerated \u003e= ago(timeframe)\n    | where EventID==4688\n    // filter out common randomly named files related to MSI installers and browsers\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n    | where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n    | project TimeGenerated, \n      ComputerName=Computer,\n      AccountName=SubjectUserName, \n      AccountDomain=SubjectDomainName,\n      FileName=tostring(split(NewProcessName, '\\\\')[-1]),\n      ProcessCommandLine = CommandLine, \n      InitiatingProcessFileName=ParentProcessName,\n      InitiatingProcessCommandLine=\"\",\n      InitiatingProcessParentFileName=\"\";\n    processEvents;\n    };\n    let normalizedProcesses = ProcessCreationEvents \n       // normalize guids\n       | project TimeGenerated, AccountName, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", FileName)\n       // normalize digits away\n       | project TimeGenerated, AccountName, FileName=replace(@'\\d', 'n', FileName); \nlet freqs = normalizedProcesses\n    | summarize frequency = count() by FileName\n    | join kind= leftouter (\n       normalizedProcesses\n       | summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated)  by FileName, AccountName\n    ) on FileName;\n   let Finalfreqs = freqs \n    | where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 10))\n    | order by frequency asc\n    | project FileName, frequency, Since, LastSeen , AccountName \n    // restrict results to unusual processes seen in last day \n    | where LastSeen \u003e= ago(timeframe);\nAccounts\n    | join kind= inner (\n        Finalfreqs\n) on AccountName\n| where frequency \u003c 10\n| project-away AccountName1\n| extend AccountCustomEntity = AccountName \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_50')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Rare Process Path",
                                             "query":  "//Identifies when a process is running from a rare path. This could indicate malicious or unexpected activity as attacks \n//often try to use common process names running from non-standard locations\n//\n\nlet end = startofday(now());\nlet start = end - 8d;\nlet processEvents=\nSecurityEvent\n| where TimeGenerated \u003e= start and TimeGenerated \u003c= end\n| where EventID==4688\n// excluding well known processes\n| where NewProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe' and ParentProcessName !endswith ':\\\\Windows\\\\System32\\\\conhost.exe'\n| where ParentProcessName !endswith \":\\\\Windows\\\\System32\\\\wuauclt.exe\" and NewProcessName !startswith \"C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\AM_Delta_Patch_\"\n| where NewProcessName !has \":\\\\Windows\\\\WinSxS\\\\amd64_microsoft-windows-servicingstack_\" and ParentProcessName !has \":\\\\Windows\\\\WinSxS\\\\amd64_microsoft-windows-servicingstack_\"\n| where NewProcessName !endswith \":\\\\WindowsAzure\\\\SecAgent\\\\WaSecAgentProv.exe\" \n| where ParentProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\GuestAgent_\"\n| where ParentProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\" and NewProcessName !has \":\\\\WindowsAzure\\\\WindowsAzureNetAgent_\"\n| where ParentProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and ParentProcessName !endswith \"\\\\MpCmdRun.exe\" \n| where NewProcessName !has \":\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\\" and NewProcessName !endswith \"\\\\MpCmdRun.exe\" \n| where NewProcessName !has ':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\'\n// filter out common randomly named paths and files\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Temp\\\\[0-9A-Za-z-]*\\\\DismHost\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\Users\\\\[0-9A-Za-z-_~\\.]*\\\\AppData\\\\Local\\\\Temp\\\\[0-9A-Za-z-]*\\\\DismHost\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Temp\\\\[0-9A-Za-z-]*\\\\MpSigStub\\.exe\")\n| where not(NewProcessName matches regex @\"\\\\[0-9A-Za-z]*\\\\amd64\\\\setup\\.exe\") and (ParentProcessName !has \":\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\Install\\\\\" \nor ParentProcessName !has \"\\\\AppData\\\\Local\\\\Temp\\\\mpam-\")\n| where not(NewProcessName matches regex @\"\\\\Windows\\\\Microsoft.NET\\\\(Framework|Framework64)\\\\v[0-9].[0-9].[0-9]*\\\\(csc\\.exe|cvtres\\.exe|mscorsvw\\.exe|ngentask\\.exe|ngen\\.exe)\")\n| where not(NewProcessName matches regex @\"\\\\WindowsAzure\\\\GuestAgent_[0-9].[0-9].[0-9]*.[0-9]*_[0-9]*-[0-9]*-[0-9]*_[0-9]*\\\\\") \nand not(ParentProcessName matches regex @\"\\\\WindowsAzure\\\\GuestAgent_[0-9].[0-9].[0-9]*.[0-9]*_[0-9]*-[0-9]*-[0-9]*_[0-9]*\\\\\")\n| where not(NewProcessName matches regex @\"\\\\[0-9A-Za-z]*\\\\epplauncher.exe\")\n| where not(NewProcessName matches regex @\"\\\\Packages\\\\Plugins\\\\Microsoft\\.\")\n| extend path_parts = parse_path(NewProcessName)\n| extend ProcessPath = tostring(path_parts.DirectoryPath)\n;\nlet normalizedProcessPath = processEvents\n| extend NormalizedProcessPath = ProcessPath\n// normalize guids\n| project TimeGenerated, Computer, Account, Process, ProcessPath, \nNormalizedProcessPath = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", NormalizedProcessPath)\n// normalize digits away\n| project TimeGenerated, Computer, Account, Process, ProcessPath, NormalizedProcessPath = replace(@'\\d', '#', NormalizedProcessPath)\n; \nlet freqs = normalizedProcessPath\n| summarize makelist(Computer), makelist(Account), makelist(ProcessPath), frequency=count() by NormalizedProcessPath, Process\n| join kind= leftouter (\nnormalizedProcessPath\n| summarize StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated) by NormalizedProcessPath, Process\n) on NormalizedProcessPath, Process;\nfreqs\n| where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))\n| order by frequency asc  \n| mvexpand Computer = list_Computer, Account = list_Account, ProcessPath = list_ProcessPath\n| project StartTimeUtc, EndTimeUtc, frequency, Process, NormalizedProcessPath, tostring(ProcessPath), tostring(Computer), tostring(Account)\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_51')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Hosts running a rare process with commandline",
                                             "query":  "//Looking for hosts running a rare process. Less than 1% of the average for 30 days and less than a count of 100 on a given host or less than a 14 count on a given host from the last 7 days\n//\nlet v_StartTime = ago(7d);\nlet v_EndTime = ago(1m);\nlet basic=materialize(\n  SecurityEvent\n    | where TimeGenerated \u003e= ago(30d)\n    | where EventID == 4688\n    | where isnotempty(CommandLine) and NewProcessName !endswith \":\\\\windows\\\\system32\\\\conhost.exe\" and CommandLine !~ NewProcessName and CommandLine !~ strcat('\\\"',NewProcessName,'\\\"',\" \"))\n    | extend CommandLine=tolower(CommandLine)\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (v_StartTime .. v_EndTime))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, NewProcessName, CommandLine\n    | where Count \u003e 0 and Count \u003c 100);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  NewProcessName, CommandLine;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on NewProcessName, CommandLine | project-away NewProcessName1, CommandLine1\n  | where Count \u003c 7 or (Count \u003c= Avg*0.01 and Count \u003c 100) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_52')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Hosts running a rare process",
                                             "query":  "//Looking for hosts running a rare process. Less than 1% of the average for 30 days and less than a count of 100 on a given host or less than a 14 count on a given host from the last 7 days\n//\nlet v_StartTime = ago(1d);\nlet v_EndTime = ago(1m);\nlet basic=materialize(\n  SecurityEvent\n    | where TimeGenerated \u003e= ago(30d)\n    | where EventID == 4688\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (v_StartTime .. v_EndTime))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, NewProcessName\n    | where Count \u003e 0 and Count \u003c 100);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  NewProcessName;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on NewProcessName | project-away NewProcessName1\n  | where Count \u003c 14 or (Count \u003c= Avg*0.01 and Count \u003c 100) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_53')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Suspicious Windows Login outside normal hours",
                                             "query":  "//Looking for suspiciopus interactive logon events which are outside normal logon hours for the user. Current day logon events are comapred with last 14 days activity \n//and filtered for events which are above or below of historical logon hour range seen for the user.\n//\nlet v_StartTime = 14d;\nlet v_EndTime = 2d;\nlet lookback = 1d;\nlet AllLogonEvents = materialize(\nSecurityEvent\n| where TimeGenerated  between (ago(v_StartTime)..ago(v_EndTime))\n| where EventID in (4624, 4625)\n| where LogonTypeName in~ ('2 - Interactive','10 - RemoteInteractive')\n| where AccountType =~ 'User'\n| extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)\n| extend DayofWeek = case(\nDayNumberofWeek == \"00:00:00\", \"Sunday\", \nDayNumberofWeek == \"1.00:00:00\", \"Monday\", \nDayNumberofWeek == \"2.00:00:00\", \"Tuesday\", \nDayNumberofWeek == \"3.00:00:00\", \"Wednesday\", \nDayNumberofWeek == \"4.00:00:00\", \"Thursday\", \nDayNumberofWeek == \"5.00:00:00\", \"Friday\", \nDayNumberofWeek == \"6.00:00:00\", \"Saturday\",\"InvalidTimeStamp\")\n// map the most common ntstatus codes\n| extend StatusDesc = case(\nStatus =~ \"0x80090302\", \"SEC_E_UNSUPPORTED_FUNCTION\",\nStatus =~ \"0x80090308\", \"SEC_E_INVALID_TOKEN\",\nStatus =~ \"0x8009030E\", \"SEC_E_NO_CREDENTIALS\",\nStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nStatus =~ \"0xC0000017\", \"STATUS_NO_MEMORY\",\nStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nStatus =~ \"0xC0000034\", \"STATUS_OBJECT_NAME_NOT_FOUND\",\nStatus =~ \"0xC000005E\", \"STATUS_NO_LOGON_SERVERS\",\nStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nStatus =~ \"0xC00000FE\", \"STATUS_NO_SUCH_PACKAGE\",\nStatus =~ \"0xC000009A\", \"STATUS_INSUFFICIENT_RESOURCES\",\nStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nStatus =~ \"0xC0000106\", \"STATUS_NAME_TOO_LONG\",\nStatus =~ \"0xC000010B\", \"STATUS_INVALID_LOGON_TYPE\",\nStatus =~ \"0xC000015B\", \"STATUS_LOGON_TYPE_NOT_GRANTED\",\nStatus =~ \"0xC000018B\", \"STATUS_NO_TRUST_SAM_ACCOUNT\",\nStatus =~ \"0xC0000224\", \"STATUS_PASSWORD_MUST_CHANGE\",\nStatus =~ \"0xC0000234\", \"STATUS_ACCOUNT_LOCKED_OUT\",\nStatus =~ \"0xC00002EE\", \"STATUS_UNFINISHED_CONTEXT_DELETED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| extend SubStatusDesc = case(\nSubStatus =~ \"0x80090325\", \"SEC_E_UNTRUSTED_ROOT\",\nSubStatus =~ \"0xC0000008\", \"STATUS_INVALID_HANDLE\",\nSubStatus =~ \"0xC0000022\", \"STATUS_ACCESS_DENIED\",\nSubStatus =~ \"0xC0000064\", \"STATUS_NO_SUCH_USER\",\nSubStatus =~ \"0xC000006A\", \"STATUS_WRONG_PASSWORD\",\nSubStatus =~ \"0xC000006D\", \"STATUS_LOGON_FAILURE\",\nSubStatus =~ \"0xC000006E\", \"STATUS_ACCOUNT_RESTRICTION\",\nSubStatus =~ \"0xC000006F\", \"STATUS_INVALID_LOGON_HOURS\",\nSubStatus =~ \"0xC0000070\", \"STATUS_INVALID_WORKSTATION\",\nSubStatus =~ \"0xC0000071\", \"STATUS_PASSWORD_EXPIRED\",\nSubStatus =~ \"0xC0000072\", \"STATUS_ACCOUNT_DISABLED\",\nSubStatus =~ \"0xC0000073\", \"STATUS_NONE_MAPPED\",\nSubStatus =~ \"0xC00000DC\", \"STATUS_INVALID_SERVER_STATE\",\nSubStatus =~ \"0xC0000133\", \"STATUS_TIME_DIFFERENCE_AT_DC\",\nSubStatus =~ \"0xC000018D\", \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\",\nSubStatus =~ \"0xC0000193\", \"STATUS_ACCOUNT_EXPIRED\",\nSubStatus =~ \"0xC0000380\", \"STATUS_SMARTCARD_WRONG_PIN\",\nSubStatus =~ \"0xC0000381\", \"STATUS_SMARTCARD_CARD_BLOCKED\",\nSubStatus =~ \"0xC0000382\", \"STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED\",\nSubStatus =~ \"0xC0000383\", \"STATUS_SMARTCARD_NO_CARD\",\nSubStatus =~ \"0xC0000384\", \"STATUS_SMARTCARD_NO_KEY_CONTAINER\",\nSubStatus =~ \"0xC0000385\", \"STATUS_SMARTCARD_NO_CERTIFICATE\",\nSubStatus =~ \"0xC0000386\", \"STATUS_SMARTCARD_NO_KEYSET\",\nSubStatus =~ \"0xC0000387\", \"STATUS_SMARTCARD_IO_ERROR\",\nSubStatus =~ \"0xC0000388\", \"STATUS_DOWNGRADE_DETECTED\",\nSubStatus =~ \"0xC0000389\", \"STATUS_SMARTCARD_CERT_REVOKED\",\nEventID == 4624, \"Success\",\n\"See - https://docs.microsoft.com/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\"\n)\n| project StartTime = TimeGenerated, DayofWeek, HourOfLogin, EventID, Activity, IpAddress, WorkstationName, Computer, TargetUserName, TargetDomainName, ProcessName, SubjectUserName, PrivilegeList, LogonTypeName, StatusDesc, SubStatusDesc\n);\nAllLogonEvents\n| where TargetDomainName !in (\"Window Manager\",\"Font Driver Host\")\n| summarize max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek) by TargetUserName\n| join kind= inner\n(\n    AllLogonEvents\n    | where StartTime \u003e ago(lookback)\n)\non TargetUserName\n// Filtering for logon events based on range of max and min of historical logon hour values seen\n| where HourOfLogin \u003e max_HourOfLogin or HourOfLogin \u003c min_HourOfLogin\n// Also populating additional column showing historical days of week when logon was seen\n| extend historical_DayofWeek = tostring(historical_DayofWeek)\n| summarize Total= count(), max(HourOfLogin), min(HourOfLogin), current_DayofWeek =make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, StatusDesc, SubStatusDesc, historical_DayofWeek\n| extend historical_DayofWeek = todynamic(historical_DayofWeek) \n| extend timestamp = StartTime, AccountCustomEntity = TargetUserName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_54')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Uncommon processes - bottom 5%",
                                             "query":  "//Shows the rarest processes seen running for the first time. (Performs best over longer time ranges - eg 3+ days rather than 24 hours!)\n//These new processes could be benign new programs installed on hosts; \n//However, especially in normally stable environments, these new processes could provide an indication of an unauthorized/malicious binary that has been installed and run. \n//Reviewing the wider context of the logon sessions in which these binaries ran can provide a good starting point for identifying possible attacks.\n//\n\nlet timeframe = 1d;\nlet ProcessCreationEvents=() {\nlet processEvents=SecurityEvent\n| where EventID==4688\n// filter out common randomly named files related to MSI installers and browsers\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"\\\\TRA[0-9A-Fa-f]{4}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{3}\\.tmp\")\n| where not(NewProcessName matches regex @\"Installer\\\\MSI[0-9A-Fa-f]{4}\\.tmp\")\n| project TimeGenerated, ComputerName=Computer, AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, '\\\\')[-1]), ProcessCommandLine = CommandLine, \nInitiatingProcessFileName=ParentProcessName, InitiatingProcessCommandLine=\"\", InitiatingProcessParentFileName=\"\";\nprocessEvents;\n};\nlet normalizedProcesses = ProcessCreationEvents \n| where TimeGenerated \u003e= ago(timeframe)\n// normalize guids\n| project TimeGenerated, FileName = replace(\"[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}\", \"\u003cguid\u003e\", FileName)\n// normalize digits away\n| project TimeGenerated, FileName=replace(@'\\d', 'n', FileName); \nlet freqs = normalizedProcesses\n| summarize frequency=count() by FileName\n| join kind= leftouter (\nnormalizedProcesses\n| summarize Since=min(TimeGenerated), LastSeen=max(TimeGenerated) by FileName\n) on FileName;\nfreqs \n| where frequency \u003c= toscalar( freqs | serialize | project frequency | summarize percentiles(frequency, 5))\n| order by frequency asc\n| project FileName, frequency, Since, LastSeen \n// restrict results to unusual processes seen in last day \n| where LastSeen \u003e= ago(1d)\n| extend timestamp = LastSeen \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_55')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Summary of user logons by logon type",
                                             "query":  "//Comparing succesful and nonsuccessful logon attempts can be used to identify attempts to move laterally within the \n//environment with the intention of discovering credentials and sensitive data.\n//\n\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID in (4624, 4625)\n| where AccountType == 'User' \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Amount = count() by LogonTypeName\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_56')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "User Account added to Built in Domain Local or Global Group",
                                             "query":  "//User account was added to a privileged built in domain local group or global group such as the Enterprise Adminis, Cert Publishers or DnsAdmins\n//Be sure to verify this is an expected addition.\n//\n\nlet timeframe = 10d;\n// For AD SID mappings - https://docs.microsoft.com/windows/security/identity-protection/access-control/active-directory-security-groups\nlet WellKnownLocalSID = \"S-1-5-32-5[0-9][0-9]$\";\nlet WellKnownGroupSID = \"S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103$\";\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where AccountType == \"User\"\n// 4728 - A member was added to a security-enabled global group\n// 4732 - A member was added to a security-enabled local group\n// 4756 - A member was added to a security-enabled universal group\n| where EventID in (\"4728\", \"4732\", \"4756\")   \n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n// Exclude Remote Desktop Users group: S-1-5-32-555\n| where TargetSid !in (\"S-1-5-32-555\")\n| project StartTimeUtc = TimeGenerated, EventID, Activity, Computer, TargetUserName, TargetDomainName, TargetSid, UserPrincipalName, SubjectUserName, SubjectUserSid \n| extend timestamp = StartTimeUtc, HostCustomEntity = Computer, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_57')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "Long lookback User Account Created and Deleted within 10mins",
                                             "query":  "//User account created and then deleted within 10 minutes across last 14 days\n//\n\n// TimeFrame is the number of lookback days, default is last 14 days\nlet timeframe = 14d;\n// TimeDelta is the difference between when the account was created and when it was deleted, default is set to 10min or less\nlet timedelta = 10m;\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n// A user account was created\n| where EventID == \"4720\"\n| where AccountType == \"User\"\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n   SecurityEvent\n   | where TimeGenerated \u003e ago(timeframe) \n   // A user account was deleted \n   | where EventID == \"4726\" \n| where AccountType == \"User\"\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime \u003c timedelta\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) \u003e= 0\n| project TimeDelta, creationTime, CreateEventID, Computer, TargetUserName, UserPrincipalName, AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete\n| extend timestamp = creationTime, HostCustomEntity = Computer, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_58')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "User account added or removed from a security group by an unauthorized user",
                                             "query":  "//User account added or removed from a security group by an unauthorized user, pass in a list\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID in (4728, 4729, 4732, 4733, 4746, 4747, 4751, 4752, 4756, 4757, 4761, 4762)\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_59')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "User created by unauthorized user",
                                             "query":  "//User account created by an unauthorized user, pass in a list\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(AuthorizedUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 1d;\nSecurityEvent\n| where TimeGenerated \u003e= ago(timeframe)\n| where EventID == 4720\n| where AccountType == \"User\"\n| join kind= leftanti (\n    List\n    | project SubjectUserName = tolower(AuthorizedUser), SubjectDomainName = toupper(Domain)\n) on SubjectUserName, SubjectDomainName\n| project TimeGenerated, Computer, Account, SubjectUserName, SubjectDomainName, TargetAccount, EventID, Activity\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_60')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Windows-Hunting-Common",
                                             "displayName":  "VIP account more than 6 failed logons in 10",
                                             "query":  "//VIP Account with more than 6 failed logon attempts in 10 minutes, include your own VIP list in the table below\n//\n\n// Create DataTable with your own values, example below shows dummy usernames that are authorized and for what domain\nlet List = datatable(VIPUser:string, Domain:string)[\"Bob\", \"Domain\", \"joe\", \"domain\", \"MATT\", \"DOMAIN\"];\nlet timeframe = 10m;\nList | extend Account = strcat(Domain,\"\\\\\",VIPUser) | join kind= inner (\nSecurityEvent \n| where TimeGenerated \u003e ago(timeframe) \n| where EventID == \"4625\"\n| where AccountType == \"User\"\n| where LogonType == \"2\" or LogonType == \"3\"\n) on Account \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), FailedVIPLogons = count() by LogonType, Account\n| where FailedVIPLogons \u003e= 6\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_61')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Crypto currency miners EXECVE",
                                             "query":  "//This query hunts through EXECVE syslog data generated by AUOMS to find instances of crypto currency miners being\n//downloaded.  It returns a table of suspicious command lines.\n//Find more details on collecting EXECVE data into Azure Sentinel - https://techcommunity.microsoft.com/t5/azure-sentinel/hunting-threats-on-linux-with-azure-sentinel/ba-p/1344431\n//\n// Extract EventType and EventData from AUOMS Syslog message\nSyslog\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| project TimeGenerated, EventType, Computer, EventData \n// Extract AUOMS_EXECVE details from EventData\n| where EventType =~ \"AUOMS_EXECVE\"\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\\\"\" cmdline \"\\\" containerid=\" containerid\n// Find wget and curl commands\n| where comm in (\"wget\", \"curl\")\n// Find command lines featuring known crypto currency miner names\n| where cmdline contains \"nicehashminer\" or cmdline contains \"ethminer\" or cmdline contains \"equihash\" or cmdline contains \"NsCpuCNMiner64\" or cmdline contains \"minergate\" or cmdline contains \"minerd\" or cmdline contains \"cpuminer\" or cmdline contains \"xmr-stak-cpu\" or cmdline contains \"xmrig\" or cmdline contains \"stratum+tcp\" or cmdline contains \"cryptonight\" or cmdline contains \"monero\" or cmdline contains \"oceanhole\" or cmdline contains \"dockerminer\" or cmdline contains \"xmrdemo\"\n| project TimeGenerated, Computer, audit_user, user, cmdline\n| extend AccountCustomEntity = user, HostCustomEntity = Computer, timestamp = TimeGenerated\n| sort by TimeGenerated desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_62')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Disabled accounts using Squid proxy",
                                             "query":  "//Look for accounts that have a been recorded as disabled by AD in the previous week but are still using the proxy during \n//the current week. This query presumes the default squid log format is being used. http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet starttime = 14d;\nlet endtime = 7d;\nlet disabledAccounts = (){\nSigninLogs \n| where TimeGenerated between(ago(starttime) .. ago(endtime))\n| where ResultType == 50057\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\" \n};\nlet proxyEvents = (){\nSyslog\n| where TimeGenerated \u003e ago(endtime)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n};\nproxyEvents \n| where Status !contains 'DENIED'\n| join kind=inner disabledAccounts on $left.User == $right.UserPrincipalName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_63')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Rare process running on a Linux host",
                                             "query":  "//Looks for rare processes that are running on Linux hosts. Looks for process seen less than 14 times in last 7 days, \n// or observed rate is less than 1% of of the average for the environment and fewer than 100.\n//\nlet starttime = 7d;\nlet endtime = 1m;\nlet lookback = 30d;\nlet count_threshold = 100;\nlet perc_threshold = 0.01;\nlet host_threshold = 14;\nlet basic=materialize(\n  Syslog\n    | where TimeGenerated \u003e= ago(lookback)\n    | summarize FullCount = count()\n                , Count= countif(TimeGenerated between (ago(starttime) .. ago(endtime)))\n                , min_TimeGenerated=min(TimeGenerated)\n                , max_TimeGenerated=max(TimeGenerated) \n                      by Computer, ProcessName\n    | where Count \u003e 0 and Count \u003c count_threshold);\nlet basic_avg = basic\n    | summarize Avg = avg(FullCount) by  ProcessName;\nbasic | project-away FullCount\n  | join kind=inner \nbasic_avg \n  on ProcessName | project-away ProcessName1\n  | where Count \u003c host_threshold or (Count \u003c= Avg*perc_threshold and Count \u003c count_threshold) \n  | extend HostCustomEntity=Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_64')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Linux scheduled task Aggregation",
                                             "query":  "//This query aggregates information about all of the scheduled tasks (Cron jobs) and presents the data in a chart.\n//The aggregation is done based on unique user-commandline pairs. It returns how many times a command line has\n//been run from a particular user, how many computers that pair has run on, and what percentage that is of the\n//total number of computers in the tenant.\n//\n\n// Change startdate below if you want a different timespan\nlet startdate = 7d;\n// Pull messages from Syslog-cron where the process name is \"CRON\" or \"CROND\", the severity level is info, and the SyslogMessage contains \"CMD\".\n// It also parses out the user and commandline from the message.\nlet RawCommands = Syslog \n| where TimeGenerated \u003e= ago(startdate)\n| where Facility =~ \"cron\" \n| where SeverityLevel =~ \"info\" \n| where ProcessName =~ \"CRON\" or ProcessName =~ \"CROND\"  \n| where SyslogMessage contains \"CMD \" \n| project TenantId, TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| extend TrimmedSyslogMsg = trim_end(@\"\\)\", SyslogMessage)\n| parse TrimmedSyslogMsg with * \"(\" user  \") CMD (\" cmdline \n| project TenantId, TimeGenerated, Computer, user, cmdline; \n// Count how many times a particular commandline has been seen based on unique Computer, User, and cmdline sets\nlet CommandCount = RawCommands\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(cmdline) by Computer, user, cmdline\n| project StartTimeUtc, EndTimeUtc, Computer, user, cmdline, CmdlineCount = count_cmdline ; \n// Count how many computers have run a particular user and cmdline pair\nlet DistComputerCount = RawCommands\n| summarize dcount(Computer) by TenantId, user, cmdline\n| project TenantId, user, cmdline, ComputerCount = dcount_Computer ; \n// Join above counts based on user and commandline pair\nlet CommandSummary = CommandCount | join (DistComputerCount) on user, cmdline\n| project StartTimeUtc, EndTimeUtc, TenantId, user, CmdlineCount, ComputerCount, cmdline ;\n// Count the total number of computers reporting cron messages in the tenant\nlet TotalComputers = Syslog\n| where Facility =~ \"cron\"\n| summarize dcount(Computer) by TenantId ;\n// Join the previous counts with the total computers count. Calculate the percentage of total computers value.\nlet FinalSummary = CommandSummary | join kind= leftouter (TotalComputers) on TenantId\n| project StartTimeUtc, EndTimeUtc, user, TimesCmdlineSeen = CmdlineCount, CompsThatHaveRunCmdline = ComputerCount, \nAsPercentOfTotalComps = round(100 * (toreal(ComputerCount)/toreal(dcount_Computer)),2), cmdline\n| order by user asc, TimesCmdlineSeen desc;\nFinalSummary \n| extend timestamp = StartTimeUtc, AccountCustomEntity = user\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_65')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Editing Linux scheduled tasks through Crontab",
                                             "query":  "//This query shows when users have edited or replaced the scheduled tasks using crontab. The events are bucketed into 10 minute intervals \n//and all the actions that a particular used took are collected into the List of Actions. Default query is for seven days.\n//\n\n// Change startdate below if you want a different timespan\nlet startdate = 14d;\n// Pull messages from Syslog-cron logs where the process is crontab and the severity level is \"info\". Extract the User and Action information from the SyslogMessage\nSyslog \n| where TimeGenerated  \u003e= ago(startdate)\n| where Facility =~ \"cron\" \n| where ProcessName =~ \"crontab\" \n| where SeverityLevel =~ \"info\" \n| project TimeGenerated, Computer, SeverityLevel, ProcessName, SyslogMessage\n| parse SyslogMessage with * \"(\" user  \") \" Action \" (\" *\n// Only look for messages that contain edit or replace\n| where Action contains \"EDIT\" or Action contains \"REPLACE\"\n//| summarize all the actions into a single set based on 10 minute time intervals\n| summarize makeset(Action) by bin(TimeGenerated, 10m), Computer, user  \n| project EventTime10MinInterval = TimeGenerated, Computer, user, ListOfActions = set_Action \n| order by Computer asc nulls last, EventTime10MinInterval asc\n| extend timestamp = EventTime10MinInterval, AccountCustomEntity = user, HostCustomEntity = Computer\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_66')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Squid commonly abused TLDs",
                                             "query":  "//Some top level domains (TLDs) are more commonly associated with malware for a range of reasons - including how easy domains on these TLDs are to obtain. \n//Many of these may be undesirable from an enterprise policy perspective. The clientCount column provides an initial insight into how widespread the domain \n//usage is across the estate. This query presumes the default squid log format is being used. http://www.squid-cache.org/Doc/config/access_log/\n//\n\nlet suspicious_tlds = dynamic([ \".click\", \".club\", \".download\",  \".xxx\", \".xyz\"]);\nlet timeframe = 14d;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe) \n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where TLD in (suspicious_tlds)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), clientCount = dcount(SourceIP) by TLD, User, URL\n| order by TLD asc, clientCount desc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_67')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Squid malformed requests",
                                             "query":  "//Malformed web requests are sometimes used for reconnaissance to detect the presence of network security devices.\n//Hunting for a large number of requests from a single source may assist in locating compromised hosts. Note: internal sites may\n//be detected by this query and may need excluding on a individual basis. This query presumes the default squid log format is\n//being used.\n//\n\nlet timeframe = 14d;\nSyslog\n| where TimeGenerated \u003e= ago(timeframe) \n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where Domain !contains '.' and isnotempty(Domain)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), badRequestCount = count() by Domain, SourceIP, User, URL\n| order by badRequestCount desc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = User, IPCustomEntity = SourceIP, URLCustomEntity = URL\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_68')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-Linux-Hunting-Common",
                                             "displayName":  "Squid data volume timeseries anomalies",
                                             "query":  "//Malware infections or data exfiltration activity often leads to anomalies in network data volume\n//this hunting query looks for anomalies in the volume of bytes traversing a squid proxy. Anomalies require further \n//investigation to determine cause. This query presumes the default squid log format is being used.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TimeSeriesData = \nSyslog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n         SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n         Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n         HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n         User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n         RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n         Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n         Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n         contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where isnotempty(Bytes)\n| make-series TotalBytesSent=sum(Bytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by ProcessName;\nTimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent,3, -1, 'linefit')\n| extend timestamp = TimeGenerated\n| render timechart with (title=\"Squid Time Series anomalies\")\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_vm_query_69')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - ASC-ComplianceandProtection_id')]",
                          "properties":  {
                                             "displayName":  "security - Compliance and Protection",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 11,       \"content\": {         \"version\": \"LinkItem/1.0\",         \"style\": \"tabs\",         \"links\": [           {             \"id\": \"fda9132a-a0f0-41a5-93aa-3175ef6af042\",             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"General\",             \"subTarget\": \"General\",             \"style\": \"link\"           },           {             \"id\": \"6edfd262-86d3-460e-969e-ca86fbce5e47\",             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Alerts and Incidents\",             \"subTarget\": \"Alerts\",             \"style\": \"link\"           },           {             \"id\": \"eca75291-bcda-4b4a-9326-8d4d01fea325\",             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Compliance and Posture\",             \"subTarget\": \"Compliance\",             \"style\": \"link\"           },           {             \"id\": \"d3b14d0b-a1d6-4435-9642-f61c52c46417\",             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Endpoint Updates and Protection\",             \"subTarget\": \"EP\",             \"style\": \"link\"           },           {             \"id\": \"97426d19-7644-44cb-98f3-61716422531e\",             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Qualys\",             \"subTarget\": \"Qualys\",             \"style\": \"link\"           }         ]       },       \"name\": \"links - 9\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"crossComponentResources\": [           \"value::selected\"         ],         \"parameters\": [           {             \"id\": \"3218e2b0-1bcc-46d4-affa-d298e0cf90f6\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"DefaultSubscription_Internal\",             \"type\": 1,             \"isRequired\": true,             \"query\": \"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| take 1\\r\\n| project subscriptionId\",             \"crossComponentResources\": [               \"value::selected\"             ],             \"isHiddenWhenLocked\": true,             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           },           {             \"id\": \"e6ded9a1-a83c-4762-938d-5bf8ff3d3d38\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Subscription\",             \"type\": 6,             \"isRequired\": true,             \"query\": \"summarize by subscriptionId\\r\\n| project value = strcat(\\\"/subscriptions/\\\", subscriptionId), label = subscriptionId, selected = iff(subscriptionId =~ '{DefaultSubscription_Internal}', true, false)\",             \"crossComponentResources\": [               \"value::selected\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": []             },             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           }         ],         \"style\": \"above\",         \"queryType\": 1,         \"resourceType\": \"microsoft.resourcegraph/resources\"       },       \"customWidth\": \"33\",       \"name\": \"parameters - 10\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"parameters\": [           {             \"id\": \"6d2d5f84-767c-4d51-82d5-6981e96bacdc\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Workspace\",             \"type\": 5,             \"query\": \"resources\\r\\n| where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| order by name asc\\r\\n| summarize Selected = makelist(id, 10), All = makelist(id, 1000)\\r\\n| mvexpand All limit 100\\r\\n| project value = tostring(All), label = tostring(All), selected = iff(Selected contains All, true, false)\",             \"crossComponentResources\": [               \"{Subscription}\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": []             },             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           },           {             \"id\": \"befbf593-c171-4129-b890-7e642265ed0c\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 1209600000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ]             }           }         ],         \"style\": \"above\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"customWidth\": \"50\",       \"name\": \"parameters - 8\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"search *\\r\\n| summarize count() by Type\\r\\n| render barchart\",         \"size\": 0,         \"timeContext\": {           \"durationMs\": 1209600000         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"crossComponentResources\": [           \"{Workspace}\"         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"General\"       },       \"name\": \"General\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"items\": [           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityAlert \\r\\n| summarize AlertCount = count() by AlertSeverity\",               \"size\": 1,               \"title\": \"Alerts by Severity\",               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"visualization\": \"piechart\"             },             \"customWidth\": \"50\",             \"name\": \"query - 0\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityAlert \\r\\n| summarize AlertCount = count() by ProviderName, IsIncident\",               \"size\": 1,               \"title\": \"Alerts by Provider\",               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeContextFromParameter\": \"TimeRange\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"visualization\": \"piechart\"             },             \"customWidth\": \"50\",             \"name\": \"query - 9\"           },           {             \"type\": 9,             \"content\": {               \"version\": \"KqlParameterItem/1.0\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"parameters\": [                 {                   \"id\": \"43415fb7-83e4-4b71-9e69-59c3acb598e3\",                   \"version\": \"KqlParameterItem/1.0\",                   \"name\": \"ProductSelection\",                   \"type\": 5,                   \"isRequired\": true,                   \"multiSelect\": true,                   \"quote\": \"'\",                   \"delimiter\": \",\",                   \"query\": \"SecurityAlert \\r\\n| where isnotempty(ProductName)\\r\\n| summarize count() by  ProductName\\r\\n| order by count_ desc\",                   \"crossComponentResources\": [                     \"{Workspace}\"                   ],                   \"value\": [                     \"value::all\"                   ],                   \"typeSettings\": {                     \"additionalResourceOptions\": [                       \"value::all\"                     ]                   },                   \"timeContext\": {                     \"durationMs\": 0                   },                   \"timeContextFromParameter\": \"TimeRange\",                   \"queryType\": 0,                   \"resourceType\": \"microsoft.operationalinsights/workspaces\"                 },                 {                   \"id\": \"903503cc-f549-4d2c-bd6e-adebb0d91799\",                   \"version\": \"KqlParameterItem/1.0\",                   \"name\": \"SeveritySelect\",                   \"type\": 2,                   \"isRequired\": true,                   \"multiSelect\": true,                   \"quote\": \"'\",                   \"delimiter\": \",\",                   \"query\": \"SecurityAlert \\r\\n| where isnotempty(AlertSeverity)\\r\\n| summarize by AlertSeverity\",                   \"crossComponentResources\": [                     \"{Workspace}\"                   ],                   \"value\": [                     \"value::all\"                   ],                   \"typeSettings\": {                     \"additionalResourceOptions\": [                       \"value::all\"                     ]                   },                   \"timeContext\": {                     \"durationMs\": 0                   },                   \"timeContextFromParameter\": \"TimeRange\",                   \"queryType\": 0,                   \"resourceType\": \"microsoft.operationalinsights/workspaces\"                 }               ],               \"style\": \"above\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\"             },             \"customWidth\": \"30\",             \"name\": \"parameters - 10\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityAlert\\r\\n| where ProductName in ( {ProductSelection} )\\r\\n| where AlertSeverity in ({SeveritySelect})\\r\\n| extend HostName = tostring(parse_json(Entities)[0].HostName) \\r\\n| summarize AlertCount = count() by AlertSeverity, VendorName, ProductName, SystemAlertId, ResourceId, AlertType, StartTime, EndTime, RemediationSteps\",               \"size\": 0,               \"title\": \"Alert Details for {TimeRange:label}\",               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeContextFromParameter\": \"TimeRange\",               \"showExportToExcel\": true,               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"visualization\": \"table\",               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"AlertSeverity\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"High\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Medium\",                           \"representation\": \"orange\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Low\",                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"filter\": true               }             },             \"name\": \"query - 11\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityAlert\\r\\n| make-series count() default=0 on StartTime from {TimeRange:start} to {TimeRange:end} step 1d by ProductName\",               \"size\": 0,               \"title\": \"Alert Count by Product Over '{TimeRange:label}'\",               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"visualization\": \"timechart\"             },             \"name\": \"query - 4\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityAlert\\r\\n| project TimeGenerated, DisplayName, AlertSeverity, ProductName, ResourceId, Entities, RemediationSteps\\r\\n| sort by TimeGenerated\",               \"size\": 0,               \"title\": \"Alerts Between '{TimeBrush:label}'\",               \"timeContext\": {                 \"durationMs\": 86400000               },               \"showExportToExcel\": true,               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"AlertSeverity\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"High\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Medium\",                           \"representation\": \"yellow\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Low\",                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Informational\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\"                   },                   {                     \"columnId\": \"DisplayName\",                     \"label\": \"Alert Name\"                   },                   {                     \"columnId\": \"AlertSeverity\",                     \"label\": \"Severity\"                   },                   {                     \"columnId\": \"ProductName\",                     \"label\": \"Product\"                   },                   {                     \"columnId\": \"ResourceId\",                     \"label\": \"Resource\"                   },                   {                     \"columnId\": \"Entities\"                   },                   {                     \"columnId\": \"RemediationSteps\",                     \"label\": \"Remediation Steps\"                   }                 ]               }             },             \"name\": \"query - 5\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"Alerts\"       },       \"name\": \"Alerts\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"items\": [           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"securityresources\\r\\n | where type == \\\"microsoft.security/assessments\\\"\\r\\n | where * contains \\\"Remediate vulnerabilities\\\"\\r\\n | summarize by assessmentKey=name //the ID of the assessment\\r\\n | join kind=inner (\\r\\n    securityresources\\r\\n     | where type == \\\"microsoft.security/assessments\\\"\\r\\n\\t | extend assessmentKey = substring(properties.links.azurePortal,indexof(properties.links.azurePortal,\\\"assessmentKey/\\\")+14,36)\\r\\n ) on assessmentKey\\r\\n| parse id with * \\\"/virtualMachines/\\\" vmname \\\"/providers\\\" * \\r\\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId, vmname\\r\\n| extend resourceSource = properties.resourceDetails.Source\\r\\n| extend strCompName = iff(resourceSource==\\\"Azure\\\",vmname,properties.resourceDetails.MachineName)\\r\\n| extend severity = properties.metadata.severity,\\r\\n         category = properties.metadata.categories[0],\\r\\n         description = properties.metadata.description,\\r\\n         displayName = properties.metadata.displayName,\\r\\n\\t\\t resourceId = iff(resourceSource==\\\"Azure\\\",properties.resourceDetails.Id,properties.resourceDetails.WorkspaceId),\\r\\n         code = properties.status.code,\\r\\n         timeGenerated = properties.additionalData.[\\\"Last scan time\\\"],\\r\\n\\t\\t ostype = properties.additionalData.[\\\"OS Type\\\"],\\r\\n         impact = properties.metadata.userImpact,\\r\\n         additionalData = properties.additionalData,\\r\\n\\t\\t threat  = properties.metadata.threats      \\r\\n| summarize count() by  tostring(severity),tostring(category)\",               \"size\": 0,               \"title\": \"Severity\",               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"visualization\": \"piechart\"             },             \"customWidth\": \"50\",             \"name\": \"query - 0\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"securityresources\\r\\n | where type == \\\"microsoft.security/assessments\\\"\\r\\n | where * contains \\\"Remediate vulnerabilities\\\"\\r\\n | summarize by assessmentKey=name //the ID of the assessment\\r\\n | join kind=inner (\\r\\n    securityresources\\r\\n     | where type == \\\"microsoft.security/assessments\\\"\\r\\n\\t | extend assessmentKey = substring(properties.links.azurePortal,indexof(properties.links.azurePortal,\\\"assessmentKey/\\\")+14,36)\\r\\n ) on assessmentKey\\r\\n| parse id with * \\\"/virtualMachines/\\\" vmname \\\"/providers\\\" * \\r\\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId, vmname\\r\\n| extend resourceSource = properties.resourceDetails.Source\\r\\n| extend strCompName = iff(resourceSource==\\\"Azure\\\",vmname,properties.resourceDetails.MachineName)\\r\\n| extend severity = properties.metadata.severity,\\r\\n         category = properties.metadata.categories[0],\\r\\n         description = properties.metadata.description,\\r\\n         displayName = properties.metadata.displayName,\\r\\n\\t\\t resourceId = iff(resourceSource==\\\"Azure\\\",properties.resourceDetails.Id,properties.resourceDetails.WorkspaceId),\\r\\n         code = properties.status.code,\\r\\n         timeGenerated = properties.additionalData.[\\\"Last scan time\\\"],\\r\\n\\t\\t ostype = properties.additionalData.[\\\"OS Type\\\"],\\r\\n         impact = properties.metadata.userImpact,\\r\\n         additionalData = properties.additionalData,\\r\\n\\t\\t threat  = properties.metadata.threats\\r\\n| summarize count() by  tostring(category)\",               \"size\": 0,               \"title\": \"Category\",               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"visualization\": \"piechart\"             },             \"customWidth\": \"50\",             \"name\": \"query - 2\"           },           {             \"type\": 9,             \"content\": {               \"version\": \"KqlParameterItem/1.0\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"parameters\": [                 {                   \"id\": \"7f84ceda-dbeb-48da-b90e-e595824197cf\",                   \"version\": \"KqlParameterItem/1.0\",                   \"name\": \"Severity\",                   \"label\": \"severity\",                   \"type\": 5,                   \"isRequired\": true,                   \"multiSelect\": true,                   \"quote\": \"'\",                   \"delimiter\": \",\",                   \"query\": \"securityresources\\r\\n | where type == \\\"microsoft.security/assessments\\\"\\r\\n | where * contains \\\"Remediate vulnerabilities\\\"\\r\\n | summarize by assessmentKey=name //the ID of the assessment\\r\\n | join kind=inner (\\r\\n    securityresources\\r\\n     | where type == \\\"microsoft.security/assessments\\\"\\r\\n | extend assessmentKey = substring(properties.links.azurePortal,indexof(properties.links.azurePortal,\\\"assessmentKey/\\\")+14,36)\\r\\n ) on assessmentKey\\r\\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId\\r\\n| extend severity = tostring(properties.metadata.severity)\\r\\n| distinct severity\\r\\n| order by severity asc\\r\\n\",                   \"crossComponentResources\": [                     \"{Subscription}\"                   ],                   \"value\": [                     \"Low\"                   ],                   \"typeSettings\": {                     \"additionalResourceOptions\": [],                     \"showDefault\": false                   },                   \"queryType\": 1,                   \"resourceType\": \"microsoft.resourcegraph/resources\"                 }               ],               \"style\": \"above\",               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\"             },             \"name\": \"parameters - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"securityresources\\r\\n | where type == \\\"microsoft.security/assessments\\\"\\r\\n | where * contains \\\"Remediate vulnerabilities\\\"\\r\\n | summarize by assessmentKey=name //the ID of the assessment\\r\\n | join kind=inner (\\r\\n    securityresources\\r\\n     | where type == \\\"microsoft.security/assessments\\\"\\r\\n\\t | extend assessmentKey = substring(properties.links.azurePortal,indexof(properties.links.azurePortal,\\\"assessmentKey/\\\")+14,36)\\r\\n ) on assessmentKey\\r\\n| parse id with * \\\"/virtualMachines/\\\" vmname \\\"/providers\\\" * \\r\\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId, vmname\\r\\n| extend resourceSource = properties.resourceDetails.Source\\r\\n| extend strCompName = iff(resourceSource==\\\"Azure\\\",vmname,properties.resourceDetails.MachineName)\\r\\n| extend severity = properties.metadata.severity,\\r\\n         category = properties.metadata.categories[0],\\r\\n         description = properties.metadata.description,\\r\\n         displayName = properties.metadata.displayName,\\r\\n\\t\\t resourceId = iff(resourceSource==\\\"Azure\\\",properties.resourceDetails.Id,properties.resourceDetails.WorkspaceId),\\r\\n         code = properties.status.code,\\r\\n         timeGenerated = properties.additionalData.[\\\"Last scan time\\\"],\\r\\n\\t\\t ostype = properties.additionalData.[\\\"OS Type\\\"],\\r\\n         impact = properties.metadata.userImpact,\\r\\n         additionalData = properties.additionalData,\\r\\n\\t\\t threat  = properties.metadata.threats\\r\\n| project severity, '{Severity:name}', strCompName, displayName, category, impact, ostype, threat\\r\\n| where severity in ({Severity})\\r\\n| summarize by Severity = tostring(severity), ['Computer Name']=strCompName, Description = tostring(displayName) , Category = tostring(category), tostring(impact), ['OS type']=tostring(ostype), ['User Impact']=tostring(impact)\\r\\n\\r\\n\",               \"size\": 0,               \"showExportToExcel\": true,               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Severity\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"High\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Medium\",                           \"representation\": \"orange\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Low\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   },                   {                     \"columnMatch\": \"patchable\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"true\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"false\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"filter\": true               }             },             \"name\": \"query - 3\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"Qualys\"       },       \"name\": \"Qualys\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"items\": [           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"securityresources\\r\\n| where type == \\\"microsoft.security/regulatorycompliancestandards\\\"\\r\\n| extend \\r\\n\\tpassedControls = trim (' ', tostring(properties.passedControls)), \\r\\n\\tfailedControls = trim(' ',tostring(properties.failedControls)), \\r\\n\\tstate \\t\\t   = trim(' ', tostring(properties.state)), \\r\\n\\tunsupportedControls = trim(' ', tostring(properties.unsupportedControls)), \\r\\n\\tskippedControls     = trim(' ', tostring(properties.skippedControls))\\r\\n| project name, passedControls, failedControls, unsupportedControls, skippedControls , subscriptionId\\r\\n| order by passedControls desc\",               \"size\": 0,               \"title\": \"Current Compliance Details\",               \"showExportToExcel\": true,               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"passedControls\",                     \"formatter\": 3,                     \"formatOptions\": {                       \"palette\": \"hotCold\",                       \"showIcon\": true                     },                     \"numberFormat\": {                       \"unit\": 0,                       \"options\": {                         \"style\": \"decimal\",                         \"useGrouping\": false                       }                     }                   },                   {                     \"columnMatch\": \"failedControls\",                     \"formatter\": 3,                     \"formatOptions\": {                       \"palette\": \"coldHot\",                       \"showIcon\": true                     }                   },                   {                     \"columnMatch\": \"unsupportedControls\",                     \"formatter\": 3,                     \"formatOptions\": {                       \"palette\": \"coldHot\",                       \"showIcon\": true                     }                   },                   {                     \"columnMatch\": \"skippedControls\",                     \"formatter\": 3,                     \"formatOptions\": {                       \"palette\": \"coldHot\",                       \"showIcon\": true                     }                   }                 ],                 \"filter\": true               }             },             \"name\": \"query - 12\"           },           {             \"type\": 9,             \"content\": {               \"version\": \"KqlParameterItem/1.0\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"parameters\": [                 {                   \"id\": \"dd8f4188-2076-4696-ba56-8418a3fcc6f5\",                   \"version\": \"KqlParameterItem/1.0\",                   \"name\": \"SelectCompliance\",                   \"type\": 5,                   \"query\": \"securityresources\\r\\n| where type == \\\"microsoft.security/regulatorycompliancestandards\\\"\\r\\n| project name\\r\\n\",                   \"crossComponentResources\": [                     \"{Subscription}\"                   ],                   \"value\": \"ISO-27001\",                   \"typeSettings\": {                     \"additionalResourceOptions\": []                   },                   \"timeContextFromParameter\": \"TimeRange\",                   \"queryType\": 1,                   \"resourceType\": \"microsoft.resourcegraph/resources\"                 },                 {                   \"id\": \"bd9c3eae-84af-42b5-8c93-e281788948d7\",                   \"version\": \"KqlParameterItem/1.0\",                   \"name\": \"selectState\",                   \"type\": 5,                   \"query\": \"securityresources\\r\\n| where type == \\\"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols\\\"\\r\\n | extend  state \\t\\t   = trim(' ', tostring(properties.state))\\r\\n| summarize by state\",                   \"crossComponentResources\": [                     \"{Subscription}\"                   ],                   \"value\": \"Failed\",                   \"typeSettings\": {                     \"additionalResourceOptions\": []                   },                   \"timeContext\": {                     \"durationMs\": 0                   },                   \"timeContextFromParameter\": \"TimeRange\",                   \"queryType\": 1,                   \"resourceType\": \"microsoft.resourcegraph/resources\"                 }               ],               \"style\": \"above\",               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\"             },             \"name\": \"parameters - 13\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"securityresources\\r\\n| where type == \\\"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols\\\"\\r\\n| parse id with *\\\"/regulatoryComplianceStandards/\\\" strControlName \\\"/regulatory\\\"*\\r\\n | extend \\r\\n\\t state \\t\\t   = trim(' ', tostring(properties.state))\\r\\n\\t,description    = trim(' ', tostring(properties.description))\\r\\n| where  strControlName startswith '{SelectCompliance}'\\r\\n| extend isState = iif(isempty('{selectState}'),\\\"All states\\\",'{selectState}')\\r\\n//| where isSstate == '{selectState}'\\r\\n| summarize by  ControlName = strControlName, name, Status = isState, description\\r\\n\",               \"size\": 0,               \"showExportToExcel\": true,               \"queryType\": 1,               \"resourceType\": \"microsoft.resourcegraph/resources\",               \"crossComponentResources\": [                 \"{Subscription}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Status\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"failed\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Failed\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Passed\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Unsupported\",                           \"representation\": \"orange\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     },                     \"numberFormat\": {                       \"unit\": 0,                       \"options\": {                         \"style\": \"decimal\"                       }                     }                   }                 ],                 \"filter\": true               }             },             \"name\": \"query - 14\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"let Resource_ = dynamic({Resource});\\r\\nSecurityAlert\\r\\n| where ResourceId contains tostring(Resource_)\\r\\n| project TimeGenerated, Resource_, AlertName, AlertSeverity, ProductName\\r\\n| summarize arg_max(TimeGenerated, *) by TimeGenerated\\r\\n| project-away TimeGenerated1\",               \"size\": 0,               \"title\": \"Related Alerts to Resource in '{TimeBrush:label})\",               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Resource_\",                     \"formatter\": 13,                     \"formatOptions\": {                       \"linkTarget\": \"Resource\",                       \"showIcon\": true                     }                   },                   {                     \"columnMatch\": \"AlertSeverity\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"High\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Medium\",                           \"representation\": \"yellow\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"low\",                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Informational\",                           \"representation\": \"gray\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   },                   {                     \"columnMatch\": \"ResourceId\",                     \"formatter\": 1,                     \"formatOptions\": {                       \"showIcon\": true                     }                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\"                   },                   {                     \"columnId\": \"Resource_\",                     \"label\": \"Resource Impacted\"                   },                   {                     \"columnId\": \"AlertName\",                     \"label\": \"Alert Title\"                   },                   {                     \"columnId\": \"AlertSeverity\",                     \"label\": \"Severity\"                   },                   {                     \"columnId\": \"ProductName\",                     \"label\": \"Product\"                   }                 ]               },               \"sortBy\": [],               \"graphSettings\": {                 \"type\": 0               }             },             \"name\": \"query - 6\",             \"styleSettings\": {               \"showBorder\": true             }           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"Compliance\"       },       \"name\": \"Compliance\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"items\": [           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"ProtectionStatus\\r\\n| extend Protection = iff(ThreatStatusRank == 150, \\\"Protected\\\", \\\"Security Event Should Be Addressed\\\")\\r\\n| extend Resource = Computer\\r\\n| project TimeGenerated, Resource, TypeofProtection, Protection, ThreatStatus ,ProtectionStatus, SignatureVersion\\r\\n| summarize arg_max(TimeGenerated,*) by Resource\\r\\n\",               \"size\": 1,               \"showAnalytics\": true,               \"title\": \"Endpoint Protection Status\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"exportMultipleValues\": true,               \"exportedParameters\": [                 {                   \"fieldName\": \"Resource\",                   \"parameterName\": \"Resource\",                   \"parameterType\": 1,                   \"delimiter\": \"\"                 }               ],               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"filter\": true,                 \"sortBy\": [                   {                     \"itemKey\": \"ThreatStatus\",                     \"sortOrder\": 1                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\",                     \"label\": \"Time Generated\"                   },                   {                     \"columnId\": \"TypeofProtection\",                     \"label\": \"Endpoint Protection\"                   },                   {                     \"columnId\": \"Protection\",                     \"label\": \"Protection Status\"                   },                   {                     \"columnId\": \"ThreatStatus\",                     \"label\": \"Threat Status\"                   },                   {                     \"columnId\": \"ProtectionStatus\",                     \"label\": \"Protection Status\"                   },                   {                     \"columnId\": \"SignatureVersion\",                     \"label\": \"Signature Version\"                   }                 ]               },               \"sortBy\": [                 {                   \"itemKey\": \"ThreatStatus\",                   \"sortOrder\": 1                 }               ]             },             \"name\": \"query - 6\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"let Resource_ = dynamic({Resource});\\r\\nProtectionStatus\\r\\n| where ThreatStatusRank != 150\\r\\n| where Computer contains tostring(Resource_)\\r\\n| project TimeGenerated, Resource_, ThreatStatus, ProtectionStatus, Threat, ThreatStatusDetails\",               \"size\": 1,               \"title\": \"Threats Over Last '{TimeRange:label}'\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"sortBy\": [                   {                     \"itemKey\": \"ThreatStatusDetails\",                     \"sortOrder\": 1                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\",                     \"label\": \"Time Generated\"                   },                   {                     \"columnId\": \"Resource_\",                     \"label\": \"Resource\"                   },                   {                     \"columnId\": \"ThreatStatus\",                     \"label\": \"Action Taken\"                   },                   {                     \"columnId\": \"ProtectionStatus\",                     \"label\": \"Event Summary\"                   },                   {                     \"columnId\": \"Threat\",                     \"label\": \"Malicious Artifact\",                     \"comment\": \"File or Process\"                   },                   {                     \"columnId\": \"ThreatStatusDetails\",                     \"label\": \"Details\"                   }                 ]               },               \"sortBy\": [                 {                   \"itemKey\": \"ThreatStatusDetails\",                   \"sortOrder\": 1                 }               ]             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"ProtectionStatus\\r\\n| where ProtectionStatusRank != 150\\r\\n| extend Protection = case( ProtectionStatusRank == 250, \\\"Signatures out of date\\\"\\r\\n                            , ProtectionStatusRank == 270, \\\"No real-time protction detected\\\"\\r\\n                            , ProtectionStatusRank == 470, \\\"No endpoint protection detected\\\"\\r\\n                            , ProtectionStatusRank == 550, \\\"Threat detected\\\"\\r\\n                            , \\\"No threats detected\\\"\\r\\n                            )\\r\\n| summarize count() by DeviceName, Protection\\r\\n| sort by count_ desc \",               \"size\": 0,               \"title\": \"Most Vulnerable Machines\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"filter\": true,                 \"labelSettings\": [                   {                     \"columnId\": \"DeviceName\",                     \"label\": \"Device\"                   },                   {                     \"columnId\": \"Protection\",                     \"label\": \"Endpoint Protection\"                   },                   {                     \"columnId\": \"count_\",                     \"label\": \"Trend Over Last 30 Days\"                   }                 ]               }             },             \"name\": \"query - 1\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityBaseline\\r\\n| where AnalyzeResult != 'Passed'\\r\\n| extend Resource = ResourceId\\r\\n| summarize count() by Resource\\r\\n| sort by count_ desc\",               \"size\": 0,               \"title\": \"Resources with Failed Baselines Within '{TimeRange:label}'\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"exportMultipleValues\": true,               \"exportedParameters\": [                 {                   \"fieldName\": \"Resource\",                   \"parameterName\": \"Resource\",                   \"parameterType\": 1,                   \"delimiter\": \"\"                 }               ],               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"filter\": true,                 \"labelSettings\": [                   {                     \"columnId\": \"Resource\"                   },                   {                     \"columnId\": \"count_\",                     \"label\": \"Number of Logs\"                   }                 ]               }             },             \"customWidth\": \"25\",             \"name\": \"query - 0\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"let Resource_ = dynamic({Resource});\\r\\nSecurityBaseline\\r\\n| where AnalyzeResult != 'Passed'\\r\\n| where ResourceId contains tostring(Resource_)\\r\\n| project TimeGenerated, Description, BaselineType, CceId, RuleSeverity, Resource_, AnalyzeResult\",               \"size\": 0,               \"title\": \"Failed Security Baselines for Machine\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"showExportToExcel\": true,               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Resource_\",                     \"formatter\": 13,                     \"formatOptions\": {                       \"linkTarget\": null,                       \"showIcon\": true                     }                   },                   {                     \"columnMatch\": \"RuleSeverity\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Critical\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Warning\",                           \"representation\": \"yellow\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Informational\",                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"filter\": true,                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\",                     \"label\": \"Time Generated\"                   },                   {                     \"columnId\": \"Description\"                   },                   {                     \"columnId\": \"BaselineType\",                     \"label\": \"OS\"                   },                   {                     \"columnId\": \"CceId\"                   },                   {                     \"columnId\": \"RuleSeverity\",                     \"label\": \"Severity\"                   },                   {                     \"columnId\": \"Resource_\",                     \"label\": \"Resource\"                   },                   {                     \"columnId\": \"AnalyzeResult\",                     \"label\": \"Status\"                   }                 ]               }             },             \"customWidth\": \"75\",             \"name\": \"query - 1\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"let Resource_ = dynamic({Resource});\\r\\nSecurityBaselineSummary\\r\\n| project TimeGenerated, Resource_, OSName, TotalAssessedRules, PercentageOfPassedRules, CriticalFailedRules, WarningFailedRules, InformationalFailedRules\\r\\n| summarize arg_max(TimeGenerated, *)\",               \"size\": 4,               \"title\": \"Resource Security Baselines Summary\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Resource_\",                     \"formatter\": 13,                     \"formatOptions\": {                       \"linkTarget\": null,                       \"showIcon\": true                     }                   },                   {                     \"columnMatch\": \"PercentageOfPassedRules\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"\u003c\",                           \"thresholdValue\": \"90\",                           \"representation\": \"yellow\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"\u003c\",                           \"thresholdValue\": \"80\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"\u003e\",                           \"thresholdValue\": \"90\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     },                     \"numberFormat\": {                       \"unit\": 1,                       \"options\": {                         \"style\": \"decimal\"                       }                     }                   },                   {                     \"columnMatch\": \"CriticalFailedRules\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"\u003e\",                           \"thresholdValue\": \"5\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"\u003c\",                           \"thresholdValue\": \"5\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   },                   {                     \"columnMatch\": \"WarningFailedRules\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"\u003e\",                           \"thresholdValue\": \"10\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"\u003c\",                           \"thresholdValue\": \"10\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   },                   {                     \"columnMatch\": \"InformationalFailedRules\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"\u003c\",                           \"thresholdValue\": \"10\",                           \"representation\": \"green\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"\u003e\",                           \"thresholdValue\": \"10\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\",                     \"label\": \"Time Generated\"                   },                   {                     \"columnId\": \"Resource_\",                     \"label\": \"Resource\"                   },                   {                     \"columnId\": \"OSName\",                     \"label\": \"OS\"                   },                   {                     \"columnId\": \"TotalAssessedRules\",                     \"label\": \"Total Assessed Rules\"                   },                   {                     \"columnId\": \"PercentageOfPassedRules\",                     \"label\": \"Percent Passed\"                   },                   {                     \"columnId\": \"CriticalFailedRules\",                     \"label\": \"Critical Failed\"                   },                   {                     \"columnId\": \"WarningFailedRules\",                     \"label\": \"Warning Failed\"                   },                   {                     \"columnId\": \"InformationalFailedRules\",                     \"label\": \"Informational Failed\"                   }                 ]               }             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"Update\\r\\n| where UpdateState != 'Installed'\\r\\n| extend Resource = Computer\\r\\n| summarize count() by Resource\\r\\n| sort by count_ desc\",               \"size\": 0,               \"title\": \"Resources with Updates within '{TimeRange:label}'\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"exportMultipleValues\": true,               \"exportedParameters\": [                 {                   \"fieldName\": \"Resource\",                   \"parameterName\": \"Resource\",                   \"parameterType\": 1,                   \"delimiter\": \"\"                 }               ],               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"sortBy\": [                   {                     \"itemKey\": \"Resource\",                     \"sortOrder\": 2                   }                 ],                 \"labelSettings\": [                   {                     \"columnId\": \"Resource\"                   },                   {                     \"columnId\": \"count_\",                     \"label\": \"Number of Logs\"                   }                 ]               },               \"sortBy\": [                 {                   \"itemKey\": \"Resource\",                   \"sortOrder\": 2                 }               ]             },             \"customWidth\": \"25\",             \"name\": \"query - 8\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"let Resource_ = dynamic({Resource});\\r\\nUpdate\\r\\n| where UpdateState != 'Installed'\\r\\n| where Computer contains tostring(Resource_)\\r\\n| project TimeGenerated, Product, Classification, Title, KBID, Resource_, UpdateState\\r\\n\",               \"size\": 0,               \"title\": \"Updates Needed for Resource\",               \"timeContext\": {                 \"durationMs\": 1209600000               },               \"timeContextFromParameter\": \"TimeRange\",               \"showExportToExcel\": true,               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"crossComponentResources\": [                 \"{Workspace}\"               ],               \"gridSettings\": {                 \"formatters\": [                   {                     \"columnMatch\": \"Classification\",                     \"formatter\": 18,                     \"formatOptions\": {                       \"showIcon\": true,                       \"thresholdsOptions\": \"colors\",                       \"thresholdsGrid\": [                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Updates\",                           \"representation\": \"orange\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Feature Packs\",                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Definition Packs\",                           \"representation\": \"yellow\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"contains\",                           \"thresholdValue\": \"Security\",                           \"representation\": \"redBright\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"==\",                           \"thresholdValue\": \"Others\",                           \"representation\": \"gray\",                           \"text\": \"{0}{1}\"                         },                         {                           \"operator\": \"Default\",                           \"thresholdValue\": null,                           \"representation\": \"blue\",                           \"text\": \"{0}{1}\"                         }                       ]                     }                   }                 ],                 \"filter\": true,                 \"labelSettings\": [                   {                     \"columnId\": \"TimeGenerated\",                     \"label\": \"Time Generated\"                   },                   {                     \"columnId\": \"Product\"                   },                   {                     \"columnId\": \"Classification\"                   },                   {                     \"columnId\": \"Resource_\",                     \"label\": \"Resouce\"                   },                   {                     \"columnId\": \"UpdateState\",                     \"label\": \"Update Status\"                   }                 ]               }             },             \"customWidth\": \"75\",             \"name\": \"query - 9\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"EP\"       },       \"name\": \"Endpoint\"     }   ],   \"fallbackResourceIds\": [     \"/subscriptions/0f2daa80-6b16-44ee-8016-4ad888e059ac/resourceGroups/omsdemo/providers/Microsoft.OperationalInsights/workspaces/somscndemo\"   ],   \"fromTemplateId\": \"ASC-ComplianceandProtection\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - EventAnalyzer_id')]",
                          "properties":  {
                                             "displayName":  "security - Event Analyzer for Windows VM",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"## Event Analyzer\\n---\\n\\nEvent Analyzer is a visualizing workbook to explore and audit Windows Event Log and explore all events details and attributes for viewing, analyzing and monitoring events recorded in Microsoft Windows event logs. The analyzer speeds up the analysis of event logs (security, application, system, setup, directory service, DNS and others).\"       },       \"name\": \"text - 2\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"crossComponentResources\": [           \"value::all\"         ],         \"parameters\": [           {             \"id\": \"6bdfb4ab-a58b-4035-bfca-4b4bdb67aa60\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"DefaultWorkspace\",             \"type\": 5,             \"isRequired\": true,             \"value\": \"/subscriptions/\u003csubs_ID\u003e/resourcegroups/\u003crg_name\u003e/providers/microsoft.operationalinsights/workspaces/\u003cworkspace_name\u003e\",             \"isHiddenWhenLocked\": true,             \"typeSettings\": {               \"resourceTypeFilter\": {                 \"microsoft.operationalinsights/workspaces\": true               },               \"additionalResourceOptions\": []             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"resourceType\": \"microsoft.insights/components\"           },           {             \"id\": \"66c96524-06de-4fb2-be22-3314ff7f96b0\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"ContextFree\",             \"type\": 1,             \"query\": \"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"\\\\\\\"{DefaultWorkspace}\\\\\\\"\\\",\\\"transformers\\\":null}\",             \"isHiddenWhenLocked\": true,             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 8           },           {             \"id\": \"9ecea5c4-8730-4503-a052-95a2418ddd70\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Selection\",             \"type\": 1,             \"query\": \"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| extend match = strcat(\\\"'\\\", id, \\\"'\\\") =~ \\\"{DefaultWorkspace:value}\\\"\\r\\n| order by match desc, name asc\\r\\n| take 1\\r\\n| project value = tostring(pack('sub', subscriptionId, 'rg', resourceGroup, 'ws', id))\",             \"crossComponentResources\": [               \"value::all\"             ],             \"isHiddenWhenLocked\": true,             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           }         ],         \"style\": \"above\",         \"queryType\": 1,         \"resourceType\": \"microsoft.resourcegraph/resources\"       },       \"conditionalVisibility\": {         \"parameterName\": \"_\",         \"comparison\": \"isEqualTo\",         \"value\": \"_\"       },       \"name\": \"parameters - 3\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"crossComponentResources\": [           \"{Subscriptions}\"         ],         \"parameters\": [           {             \"id\": \"401c9381-d3bc-4594-be03-c322c0c6a135\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Subscriptions\",             \"type\": 6,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"summarize by subscriptionId\\r\\n| project value = strcat('/subscriptions/', subscriptionId), label = subscriptionId, selected = iff(subscriptionId =~ todynamic('{Selection}').sub, true, false)\",             \"crossComponentResources\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ]             },             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           },           {             \"id\": \"8f5a2b0e-71bf-49f4-b570-c3d84c7cc7f6\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Workspaces\",             \"type\": 7,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| summarize by id, name\\r\\n| project id, selected = iff(id =~ todynamic('{Selection}').ws, true, false)\",             \"crossComponentResources\": [               \"{Subscriptions}\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"*\"             },             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           },           {             \"id\": \"bcb5eb6b-b6a8-47c4-95a2-87753cb10ea8\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"value\": {               \"durationMs\": 86400000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ]             },             \"resourceType\": \"microsoft.insights/components\"           },           {             \"id\": \"1c1b8f51-b434-468a-b256-29826c15d9e1\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TestConnectivity\",             \"type\": 1,             \"query\": \"InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| take 1\",             \"isHiddenWhenLocked\": true,             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           }         ],         \"style\": \"above\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 2\"     },     {       \"type\": 11,       \"content\": {         \"version\": \"LinkItem/1.0\",         \"style\": \"tabs\",         \"links\": [           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit File Share\",             \"subTarget\": \"1\",             \"preText\": \"\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit File System\",             \"subTarget\": \"2\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Filtering Platform Connection\",             \"subTarget\": \"3\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Handle Manipulation\",             \"subTarget\": \"4\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Kernel Object\",             \"subTarget\": \"5\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Other Object Access Events\",             \"subTarget\": \"6\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Registry\",             \"subTarget\": \"7\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Removable Storage\",             \"subTarget\": \"8\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit SAM\",             \"subTarget\": \"9\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Policy Change\",             \"subTarget\": \"10\",             \"style\": \"link\"           },           {             \"cellValue\": \"Tab\",             \"linkTarget\": \"parameter\",             \"linkLabel\": \"Audit Sensitive Privilege Use\",             \"subTarget\": \"11\",             \"style\": \"link\"           }         ]       },       \"name\": \"links - 4\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- A network share object was accessed\\r\\n- A network share object was added\\r\\n- A network share object was modified\\r\\n- A network share object was deleted\\r\\n- SPN check for SMB/SMB2 failed\"             },             \"name\": \"text - 1\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (5140, 5142, 5143, 5144, 5168)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\",               \"tileSettings\": {                 \"showBorder\": false,                 \"titleContent\": {                   \"columnMatch\": \"Account\",                   \"formatter\": 1                 },                 \"leftContent\": {                   \"columnMatch\": \"Task\",                   \"formatter\": 12,                   \"formatOptions\": {                     \"palette\": \"auto\"                   },                   \"numberFormat\": {                     \"unit\": 17,                     \"options\": {                       \"maximumSignificantDigits\": 3,                       \"maximumFractionDigits\": 2                     }                   }                 }               },               \"graphSettings\": {                 \"type\": 0,                 \"topContent\": {                   \"columnMatch\": \"Account\",                   \"formatter\": 1                 },                 \"centerContent\": {                   \"columnMatch\": \"Task\",                   \"formatter\": 1,                   \"numberFormat\": {                     \"unit\": 17,                     \"options\": {                       \"maximumSignificantDigits\": 3,                       \"maximumFractionDigits\": 2                     }                   }                 }               },               \"chartSettings\": {                 \"xAxis\": \"TimeGenerated\",                 \"yAxis\": [                   \"EventID\"                 ],                 \"showLegend\": true,                 \"xSettings\": {},                 \"ySettings\": {}               }             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (5140, 5142, 5143, 5144, 5168)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 86400000               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"table\",               \"gridSettings\": {                 \"filter\": true               }             },             \"showPin\": false,             \"name\": \"query - 0\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"1\"       },       \"name\": \"AuditFileShare\"     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:  \\r\\n- A handle to an object was requested \\r\\n- The handle to an object was closed \\r\\n- An object was deleted- An attempt was made to access an object\\r\\n- An attempt was made to create a hard link- The state of a transaction has changed \\r\\n- A file was virtualized\\r\\n- Permissions on an object were changed\"             },             \"name\": \"text - 1\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4660, 4663, 4664, 4985, 5051, 4670)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\",               \"chartSettings\": {                 \"showLegend\": true,                 \"xSettings\": {},                 \"ySettings\": {}               }             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4660, 4663, 4664, 4985, 5051, 4670)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 86400000               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 0\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"2\"       },       \"name\": \"AuditFileSystem\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n - The handle to an object was closed\\r\\n - An attempt was made to duplicate a handle to an object\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4658, 4690)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4658, 4690)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"4\"       },       \"name\": \"AuditHandleManipulation\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- The Windows Firewall Service blocked an application from accepting incoming connections on the network\\r\\n- The Windows Filtering Platform blocked a packet\\r\\n- A more restrictive Windows Filtering Platform filter has blocked a packet\\r\\n- The Windows Filtering Platform has permitted an application or service to listen on a port for incoming connections\\r\\n- The Windows Filtering Platform has blocked an application or service from listening on a port for incoming connections\\r\\n- The Windows Filtering Platform has permitted a connection\\r\\n- The Windows Filtering Platform has blocked a connection\\r\\n- The Windows Filtering Platform has permitted a bind to a local port\\r\\n- The Windows Filtering Platform has blocked a bind to a local port\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (5031, 5150, 5151, 5154, 5155, 5156, 5157, 5158, 5159)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity\",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (5031, 5150, 5151, 5154, 5155, 5156, 5157, 5158, 5159)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity\",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"3\"       },       \"name\": \"AuditFilterPlatformConnection\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- A handle to an object was requested\\r\\n- The handle to an object was closed\\r\\n- An object was deleted\\r\\n- An attempt was made to access an object\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4660, 4663)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4660, 4663)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"5\"       },       \"name\": \"AuditKernelObject\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n-  An application attempted to access a blocked ordinal through the TBS\\r\\n- Indirect access to an object was requested\\r\\n- The Windows Filtering Platform has detected a DoS attack and entered a defensive mode; packets associated with this attack will be discarded\\r\\n- The DoS attack has subsided and normal processing is being resumed\\r\\n- A scheduled task was created\\r\\n- A scheduled task was deleted\\r\\n- A scheduled task was enabled\\r\\n- A scheduled task was disabled\\r\\n- A scheduled task was updated\\r\\n- An object in the COM+ Catalog was modified\\r\\n- An object was deleted from the COM+ Catalog\\r\\n- An object was added to the COM+ Catalog\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4671, 4691, 5148, 5149, 4698, 4699, 4700, 4701, 4702, 5888, 5889, 5890)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \\r\\n| top 1000 by TimeGenerated desc\",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TImeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\",               \"tileSettings\": {                 \"showBorder\": false,                 \"titleContent\": {                   \"columnMatch\": \"Account\",                   \"formatter\": 1                 },                 \"leftContent\": {                   \"columnMatch\": \"EventID\",                   \"formatter\": 12,                   \"formatOptions\": {                     \"palette\": \"auto\"                   },                   \"numberFormat\": {                     \"unit\": 17,                     \"options\": {                       \"maximumSignificantDigits\": 3,                       \"maximumFractionDigits\": 2                     }                   }                 }               }             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4671, 4691, 5148, 5149, 4698, 4699, 4700, 4701, 4702, 5888, 5889, 5890)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TImeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"6\"       },       \"name\": \"AuditOtherObject\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- An attempt was made to access an object\\r\\n- A handle to an object was requested\\r\\n- The handle to an object was closed\\r\\n- An object was deleted\\r\\n- A registry value was modified\\r\\n- A registry key was virtualized\\r\\n- Permissions on an object were changed\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4663, 4656, 4658, 4660, 4657, 5039, 4670)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \\r\\n| top 1000 by TimeGenerated desc\",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4663, 4656, 4658, 4660, 4657, 5039, 4670)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"7\"       },       \"name\": \"AuditRegistry\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- A handle to an object was requested\\r\\n- The handle to an object was closed\\r\\n- An attempt was made to access an object\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4663)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \\r\\n| top 1000 by TimeGenerated desc\",               \"size\": 4,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeRange\",               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4656, 4658, 4663)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"8\"       },       \"name\": \"AuditRemovable\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- A handle to an object was requested\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID == 4661\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID == 4661\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"9\"       },       \"name\": \"AuditSAM\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- The audit policy (SACL) on an object was changed\\r\\n- System audit policy was changed\\r\\n- Auditing settings on object were changed\\r\\n- The Per-user audit policy table was created\\r\\n- The CrashOnAuditFail value has changed\\r\\n- Auditing settings on object were changed\\r\\n- Special Groups Logon table modified\\r\\n- Per User Audit Policy was changed\\r\\n- An attempt was made to register a security event source\\r\\n- An attempt was made to unregister a security event source\"             },             \"name\": \"text - 0\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4715, 4719, 4817, 4902, 4906, 4907, 4908, 4912, 4904, 4905)\\r\\n| project TimeGenerated, Account , AccountType , Computer , EventSourceName , Channel , Task , EventData , EventID , Activity \\r\\n| top 1000 by TimeGenerated desc\",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4715, 4719, 4817, 4902, 4906, 4907, 4908, 4912, 4904, 4905)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 0,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"10\"       },       \"name\": \"AuditPolicyChange\",       \"styleSettings\": {         \"showBorder\": true       }     },     {       \"type\": 12,       \"content\": {         \"version\": \"NotebookGroup/1.0\",         \"groupType\": \"editable\",         \"loadType\": \"always\",         \"items\": [           {             \"type\": 1,             \"content\": {               \"json\": \"Events:\\r\\n- A privileged service was called\\r\\n- An operation was attempted on a privileged object\\r\\n-  The state of a transaction has changed\"             },             \"name\": \"text - 0\",             \"styleSettings\": {               \"showBorder\": true             }           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4673, 4674, 4985)\\r\\n| project TimeGenerated, Account , Computer , EventData , EventID , Activity \",               \"size\": 1,               \"showAnnotations\": true,               \"timeContext\": {                 \"durationMs\": 2592000000               },               \"timeBrushParameterName\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"visualization\": \"timechart\"             },             \"name\": \"query - 2\"           },           {             \"type\": 3,             \"content\": {               \"version\": \"KqlItem/1.0\",               \"query\": \"SecurityEvent\\r\\n| where EventID in (4673, 4674, 4985)\\r\\n| project Account , Computer , EventData , EventID , Activity \",               \"size\": 1,               \"timeContext\": {                 \"durationMs\": 0               },               \"timeContextFromParameter\": \"TimeBrush\",               \"queryType\": 0,               \"resourceType\": \"microsoft.operationalinsights/workspaces\",               \"gridSettings\": {                 \"filter\": true               }             },             \"name\": \"query - 1\"           }         ]       },       \"conditionalVisibility\": {         \"parameterName\": \"Tab\",         \"comparison\": \"isEqualTo\",         \"value\": \"11\"       },       \"name\": \"AuditSensitive\",       \"styleSettings\": {         \"showBorder\": true       }     }   ],   \"styleSettings\": {     \"progressStyle\": \"loader\"   },   \"fromTemplateId\": \"sentinel-EventAnalyzerWorkbook\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - IdentityAndAccess_id')]",
                          "properties":  {
                                             "displayName":  "security - Identity And Access Analyzer for Windows VM",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"\"       },       \"name\": \"text - 1\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"query\": \"\",         \"crossComponentResources\": [],         \"parameters\": [           {             \"id\": \"80e332f7-8176-461f-b27a-0a52242fe6c9\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 86400000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ],               \"allowCustom\": true             }           },           {             \"id\": \"5a93ede8-361d-4cc6-93f8-967dfc355143\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Activity\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"SecurityEvent\\r\\n| summarize Count = count() by Activity\\r\\n| order by Count desc, Activity asc\\r\\n| project Value = Activity, Label = strcat(Activity, ' - ', Count)\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           }         ],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SecurityEvent\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity});\\r\\ndata\\r\\n| summarize Count = count() by Activity\\r\\n| join kind = fullouter (datatable(Activity:string)['Medium', 'high', 'low']) on Activity\\r\\n| project Activity = iff(Activity == '', Activity1, Activity), Count = iff(Activity == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by Activity)\\r\\n on Activity\\r\\n| project-away Activity1, TimeGenerated\\r\\n| extend Activitys = Activity\\r\\n| union (\\r\\n data \\r\\n | summarize Count = count() \\r\\n | extend jkey = 1\\r\\n | join kind=inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n | extend jkey = 1) on jkey\\r\\n | extend Activity = 'All', Activitys = '*' \\r\\n)\\r\\n| order by Count desc\\r\\n| take 10\",         \"size\": 4,         \"exportFieldName\": \"Activity\",         \"exportParameterName\": \"ActivityPiker\",         \"exportDefaultValue\": \"All\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Top 10 activities - click to filter by activity\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"Activity\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"auto\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"maximumSignificantDigits\": 3,                 \"maximumFractionDigits\": 2               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 9,             \"formatOptions\": {               \"palette\": \"lightBlue\",               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 2\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SecurityEvent\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\" and AccountType == 'User'\\r\\n| extend Name = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account));\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Name\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Name\\r\\n    | project-away TimeGenerated) on Name\\r\\n| order by TotalCount desc, Name asc\\r\\n| project Name, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by Activity , Name\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Name, Activity\\r\\n    | project-away TimeGenerated) on Name, Activity\\r\\n| order by TotalCount desc, Name asc\\r\\n| project Name, Activity, TotalCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Name\\r\\n| project Id, Name = Activity, Type = 'Activity', ['Activity Count'] = TotalCount, Trend, ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = Name, Type = 'Computer', ['Activity Count'] = TotalCount, Trend )\\r\\n| order by ['Activity Count'] desc, Name asc\",         \"size\": 0,         \"exportParameterName\": \"Userinfo\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"User activities\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Activity Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blueGreen\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"palette\": \"greenDark\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"IpAddress\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Account\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Names Count\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\"           },           \"labelSettings\": []         }       },       \"customWidth\": \"50\",       \"name\": \"query - 3\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"//let Users = dynamic({Userinfo});\\r\\nlet data = SecurityEvent\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\" and AccountType == 'Machine'\\r\\n| extend user = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account))\\r\\n| where dynamic({Userinfo}).Type == '*' or (dynamic({Userinfo}).Type == 'Computer' and user == dynamic({Userinfo}).Name);\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Computer\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Computer\\r\\n    | project-away TimeGenerated) on Computer\\r\\n| order by TotalCount desc, Computer asc\\r\\n| project Computer, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by Activity , Computer\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Computer, Activity\\r\\n    | project-away TimeGenerated) on Computer, Activity\\r\\n| order by TotalCount desc, Computer asc\\r\\n| project Computer, Activity, TotalCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Computer\\r\\n| project Id, Name = Activity, Type = 'Activity', ['Activity Count'] = TotalCount, Trend, ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = Computer, Type = 'Computer', ['Activity Count'] = TotalCount, Trend )\\r\\n| order by ['Activity Count'] desc, Name asc\",         \"size\": 0,         \"exportFieldName\": \"\",         \"exportParameterName\": \"MachineInfo\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Machine activities\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Activity Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\"           },           \"labelSettings\": []         }       },       \"customWidth\": \"50\",       \"name\": \"query - 4\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let Users = dynamic({Userinfo});\\r\\nlet Machines = dynamic({MachineInfo});\\r\\nSecurityEvent\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\"\\r\\n| extend Name = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account))\\r\\n| where (Users.Type == '*' or (Users.Type == 'Computer' and Name == Users.Name)) and (Machines.Type == '*' or (Machines.Type == 'Computer' and Computer == Machines.Name))\\r\\n| extend Status = iif(Activity contains \\\"success\\\",\\\"?? Success\\\" , iif(Activity contains \\\"faile\\\", \\\"?Faile\\\", \\\"none\\\"))\\r\\n| summarize Count = count() by Name, Computer,AccountType, Activity, IpAddress , Process, CallerProcessId, CallerProcessName, CommandLine, FilePath, IpPort,GroupMembership, Status, bin(TimeGenerated, 1d), Detalis=\\\"more details\\\"\\r\\n| project  Name, Computer,AccountType, Activity, IpAddress, CallerProcessId, CallerProcessName, CommandLine, FilePath, IpPort, Process, GroupMembership, Status, TimeGenerated, Count, Detalis\\r\\n| order by Count\\r\\n\",         \"size\": 0,         \"exportParameterName\": \"Info\",         \"exportDefaultValue\": \"\\\"*\\\"\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Full details\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Computer\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"AccountType\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Activity\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"IpAddress\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CallerProcessId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CallerProcessName\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CommandLine\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"FilePath\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"IpPort\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Process\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"GroupMembership\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Status\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"TimeGenerated\",               \"formatter\": 6,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"greenBlue\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Detalis\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"GenericDetails\",                 \"linkIsContextBlade\": true,                 \"showIcon\": true               }             },             {               \"columnMatch\": \"NumberOfProcess\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"detalis\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"GenericDetails\",                 \"linkIsContextBlade\": true,                 \"showIcon\": true               }             },             {               \"columnMatch\": \"count_\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"rowLimit\": 1000,           \"filter\": true,           \"labelSettings\": []         }       },       \"name\": \"query - 5\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let Users = dynamic({Userinfo});\\r\\nlet Info = dynamic({Info});\\r\\nlet Machines = dynamic({MachineInfo});\\r\\nSecurityEvent\\r\\n| where Info == \\\"*\\\" or Process == Info.Process\\r\\n| where Process != \\\"\\\" and Process != \\\"-\\\"\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\"\\r\\n| extend Name = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account))\\r\\n| where (Users.Type == '*' or (Users.Type == 'Computer' and Name == Users.Name)) and (Machines.Type == '*' or (Machines.Type == 'Computer' and Computer == Machines.Name))\\r\\n| summarize Count = count() by Process, bin(TimeGenerated, 1h)\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Processes\",         \"color\": \"lightBlue\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"areachart\"       },       \"customWidth\": \"30\",       \"name\": \"query - 6\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let Users = dynamic({Userinfo});\\r\\nlet Info = dynamic({Info});\\r\\nlet Machines = dynamic({MachineInfo});\\r\\nSecurityEvent\\r\\n| where Process != \\\"\\\" and Process != \\\"-\\\"\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\"\\r\\n| where Info == \\\"*\\\" or Process == Info.Process\\r\\n| extend user = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account))\\r\\n| where (Users.Type == '*' or (Users.Type == 'Computer' and user == Users.Name)) and (Machines.Type == '*' or (Machines.Type == 'Computer' and Computer == Machines.Name))\\r\\n| summarize Count = count() by Process, Activity, user, Computer, bin(TimeGenerated, 1h)\\r\\n| order by TimeGenerated, Count\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Processes details\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"70\",       \"name\": \"query - 8\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let Users = dynamic({Userinfo});\\r\\nlet Info = dynamic({Info});\\r\\nlet Machines = dynamic({MachineInfo});\\r\\nSecurityEvent\\r\\n| where LogonTypeName != \\\"\\\"\\r\\n| where \\\"{Activity:lable}\\\" == \\\"All\\\" or Activity in ({Activity})\\r\\n| where Activity == '{ActivityPiker}' or '{ActivityPiker}' == \\\"All\\\"\\r\\n| where Info == \\\"*\\\" or Activity == Info.Activity\\r\\n| extend user = extract(@'^(.*\\\\\\\\)?([^@]*)(@.*)?$', 2, tolower(Account))\\r\\n| where (Users.Type == '*' or (Users.Type == 'Computer' and user == Users.Name)) and (Machines.Type == '*' or (Machines.Type == 'Computer' and Computer == Machines.Name))\\r\\n| summarize Count = count() by LogonTypeName = strcat( \\\"Logon type: \\\", LogonTypeName), Activity, user\\r\\n| order by Count\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Logon activity types\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"LogonTypeName\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Activity\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"user\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"green\",                 \"showIcon\": true,                 \"aggregation\": \"Sum\"               }             },             {               \"columnMatch\": \"$gen_group\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"hierarchySettings\": {             \"treeType\": 1,             \"groupBy\": [               \"LogonTypeName\",               \"Activity\"             ],             \"expandTopLevel\": false           },           \"labelSettings\": []         }       },       \"customWidth\": \"70\",       \"name\": \"query - 7\"     }   ],   \"styleSettings\": {},   \"fromTemplateId\": \"sentinel-IdentityAndAccess\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - LinuxMachines_id')]",
                          "properties":  {
                                             "displayName":  "security - Event Analyzer for Linux VM",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"## Linux Machines\"       },       \"name\": \"text - 0\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"query\": \"\",         \"crossComponentResources\": [],         \"parameters\": [           {             \"id\": \"1025a43d-241c-4e40-95dc-c9eb9c789bc5\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 1209600000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ],               \"allowCustom\": true             }           },           {             \"id\": \"bc241870-7874-4927-8c74-d17e747522b1\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Computer\",             \"type\": 5,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"Syslog\\r\\n| summarize syslogEventsCount = count() by Computer\\r\\n| sort by syslogEventsCount desc\\r\\n| project Computer\\r\\n\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           },           {             \"id\": \"e073f36e-2fb5-421d-9099-217205b247f5\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Severity\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"*\"             },             \"jsonData\": \"[\\\"Emergency\\\", \\\"Alert\\\", \\\"Critical\\\", \\\"Error\\\", \\\"Warning\\\", \\\"Notice\\\", \\\"Informational\\\", \\\"Debug\\\"]\",             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\"           }         ],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| summarize count() by SeverityLevel\\r\\n| extend severityNumber = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 0, iif(SeverityLevel == 'alert', 1, iif(SeverityLevel == 'crit', 2, iif(SeverityLevel == 'err' or SeverityLevel == 'error', 3, iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 4, iif(SeverityLevel == 'notice', 5, iif(SeverityLevel == 'info', 6, iif(SeverityLevel == 'debug', 7, 8))))))))\\r\\n| sort by severityNumber asc\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| project-away severityNumber\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n\",         \"size\": 4,         \"exportToExcelOptions\": \"visible\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"SeverityLevel\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"count_\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"hotCold\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"style\": \"decimal\",                 \"maximumFractionDigits\": 2,                 \"maximumSignificantDigits\": 3               }             }           },           \"showBorder\": false,           \"sortOrderField\": 2         }       },       \"name\": \"query - 2\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| where SeverityLevel in (\\\"emerg\\\")\\r\\n| summarize count() by Computer, TimeGenerated\\r\\n\",         \"size\": 1,         \"exportToExcelOptions\": \"visible\",         \"title\": \"\\\"Emergency\\\" level events, by computer\",         \"noDataMessage\": \"No emergency events within the defined scope\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"timechart\"       },       \"customWidth\": \"33\",       \"name\": \"query - 2 - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| where SeverityLevel in (\\\"crit\\\")\\r\\n| summarize count() by Computer, TimeGenerated\\r\\n\",         \"size\": 1,         \"exportToExcelOptions\": \"visible\",         \"title\": \"\\\"Critical\\\" level events, by computer\",         \"noDataMessage\": \"No critical events within the defined scope\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"timechart\"       },       \"customWidth\": \"33\",       \"name\": \"query - 2 - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| where SeverityLevel in (\\\"alert\\\")\\r\\n| summarize count() by Computer, TimeGenerated\\r\\n\",         \"size\": 1,         \"exportToExcelOptions\": \"visible\",         \"title\": \"\\\"Alert\\\" level events, by computer\",         \"noDataMessage\": \"No alert events within the defined scope\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"timechart\"       },       \"customWidth\": \"33\",       \"name\": \"query - 2 - Copy - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| extend SeverityNumber = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 0, iif(SeverityLevel == 'alert', 1, iif(SeverityLevel == 'crit', 2, iif(SeverityLevel == 'err' or SeverityLevel == 'error', 3, iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 4, iif(SeverityLevel == 'notice', 5, iif(SeverityLevel == 'info', 6, iif(SeverityLevel == 'debug', 7, 8))))))))\\r\\n| where Severity in ({Severity})\\r\\n|extend Computer = iif(isempty(_ResourceId), Computer, _ResourceId)\\r\\n| project TimeGenerated, Computer, SeverityLevel, SeverityNumber, Facility, HostIP, ProcessNameAndID = strcat(ProcessName, ' (', iff(isempty(ProcessID), \\\"-\\\", tostring(ProcessID)), ')')  \\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Events\",         \"noDataMessage\": \"No events\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"TimeGenerated\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Computer\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"SeverityLevel\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"SeverityNumber\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 7,                 \"max\": 0,                 \"palette\": \"redDark\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Facility\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"HostIP\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"ProcessNameAndID\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"labelSettings\": []         }       },       \"name\": \"query - 2 - Copy - Copy - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| summarize count() by SyslogMessage\\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Syslog messages of events\",         \"noDataMessage\": \"No messages\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"piechart\"       },       \"customWidth\": \"50\",       \"name\": \"query - 7\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| summarize count() by Facility, ProcessName\\r\\n| project Process = strcat(ProcessName, ' (', Facility, ')'), Count = count_  \\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Process names of events\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"piechart\"       },       \"customWidth\": \"50\",       \"name\": \"query - 11\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| summarize count() by Facility, SeverityLevel\\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Event distribution, by facility\",         \"noDataMessage\": \"No events\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"piechart\"       },       \"customWidth\": \"50\",       \"name\": \"query - 7 - Copy - Copy - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Syslog\\r\\n| where \\\"{Computer:lable}\\\" == \\\"All\\\" or Computer in ({Computer})\\r\\n| extend Severity = iif(SeverityLevel == 'emerg' or SeverityLevel == 'panic', 'Emergency', iif(SeverityLevel == 'alert', 'Alert', iif(SeverityLevel == 'crit', 'Critical', iif(SeverityLevel == 'err' or SeverityLevel == 'error', 'Error', iif(SeverityLevel == 'warning' or SeverityLevel == 'warn', 'Warning', iif(SeverityLevel == 'notice', 'Notice', iif(SeverityLevel == 'info', 'Informational', iif(SeverityLevel == 'debug', 'Debug', 'Unknown'))))))))\\r\\n| where \\\"*\\\" in ({Severity}) or Severity in ({Severity})\\r\\n| summarize count() by Facility, SeverityLevel\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Severity levels, by facility\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"categoricalbar\"       },       \"customWidth\": \"50\",       \"name\": \"query - 11 - Copy\"     }   ],   \"styleSettings\": {},   \"fromTemplateId\": \"sentinel-LinuxMachines\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - linuxwindows_id')]",
                          "properties":  {
                                             "displayName":  "security - Virtual Machine Update Status",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"\"       },       \"customWidth\": \"100\",       \"name\": \"text - 5\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"crossComponentResources\": [           \"value::all\"         ],         \"parameters\": [           {             \"id\": \"f8d6705a-e284-4077-8113-aae1038a6b7c\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Workspaces\",             \"type\": 5,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| summarize by id, name\",             \"crossComponentResources\": [               \"value::all\"             ],             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::1\",                 \"value::all\"               ]             },             \"queryType\": 1,             \"resourceType\": \"microsoft.resourcegraph/resources\"           }         ],         \"style\": \"pills\",         \"queryType\": 1,         \"resourceType\": \"microsoft.resourcegraph/resources\"       },       \"name\": \"parameters - 11\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"# Azure Automation Windows and Linux Update Summary for All Subscriptions\\r\\n\\r\\nThis workbook can query multiple Log Analytics Workspaces. The Azure Automation Update Management solution needs to be linked to every Log Analytics Workspaces you wish to use it with.\"       },       \"name\": \"text - 6\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Windows Updates Needed by Classification\"       },       \"customWidth\": \"50\",       \"name\": \"text - 7\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Linux Updates Needed by Classification\"       },       \"customWidth\": \"50\",       \"name\": \"text - 8\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Update\\r\\n| where TimeGenerated\u003eago(14h) and OSType!=\\\"Linux\\\" and (Optional==false or Classification has \\\"Critical\\\" or Classification has \\\"Security\\\") and SourceComputerId in ((Heartbeat\\r\\n| where TimeGenerated\u003eago(12h) and OSType=~\\\"Windows\\\" and notempty(Computer)\\r\\n| summarize arg_max(TimeGenerated, Solutions) by SourceComputerId\\r\\n| where Solutions has \\\"updates\\\" | distinct SourceComputerId))\\r\\n| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer, SourceComputerId, UpdateID\\r\\n| where UpdateState=~\\\"Needed\\\" and Approved!=false\\r\\n| summarize UpdatesNeeded=count(Classification) by Classification\",         \"size\": 2,         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"crossComponentResources\": [           \"{Workspaces}\"         ],         \"visualization\": \"piechart\",         \"tileSettings\": {           \"showBorder\": false,           \"titleContent\": {             \"columnMatch\": \"Classification\",             \"formatter\": 1           },           \"leftContent\": {             \"columnMatch\": \"UpdatesNeeded\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"auto\"             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"maximumSignificantDigits\": 3,                 \"maximumFractionDigits\": 2               }             }           }         },         \"chartSettings\": {           \"seriesLabelSettings\": [             {               \"seriesName\": \"Security Updates\",               \"color\": \"redBright\"             },             {               \"seriesName\": \"Updates\",               \"color\": \"orange\"             },             {               \"seriesName\": \"Definition Updates\",               \"color\": \"yellow\"             },             {               \"seriesName\": \"Update Rollups\",               \"color\": \"purple\"             },             {               \"seriesName\": \"Critical Updates\",               \"color\": \"red\"             }           ]         }       },       \"customWidth\": \"50\",       \"name\": \"query - 0\",       \"styleSettings\": {         \"maxWidth\": \"50\"       }     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Update\\r\\n| where TimeGenerated\u003eago(5h) and OSType==\\\"Linux\\\"\\r\\n| summarize hint.strategy=partitioned arg_max(TimeGenerated, UpdateState, Classification) by Computer, SourceComputerId, Product, ProductArch\\r\\n| where UpdateState=~\\\"Needed\\\"\\r\\n| summarize by Product, ProductArch, Classification, Computer\\r\\n| summarize count(Classification) by Classification\",         \"size\": 2,         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"crossComponentResources\": [           \"{Workspaces}\"         ],         \"visualization\": \"piechart\",         \"chartSettings\": {           \"seriesLabelSettings\": [             {               \"seriesName\": \"Others\",               \"color\": \"purple\"             },             {               \"seriesName\": \"Security Updates\",               \"color\": \"redBright\"             }           ]         }       },       \"customWidth\": \"50\",       \"name\": \"top five Computers Needing Updates\",       \"styleSettings\": {         \"maxWidth\": \"50\"       }     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Heatmap of Update Summary by Computer\\r\\n\\r\\nThis section is dynamic, by selecting a row that row's Computer name will be exported to populate Updates needed by Server\"       },       \"name\": \"text - 9\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Heartbeat\\r\\n| where TimeGenerated\u003eago(12h) and OSType==\\\"Linux\\\" and notempty(Computer)\\r\\n| summarize arg_max(TimeGenerated, Solutions, Computer, ResourceId, ComputerEnvironment, VMUUID) by SourceComputerId\\r\\n| where Solutions has \\\"updates\\\"\\r\\n| extend vmuuId=VMUUID, azureResourceId=ResourceId, osType=1, environment=iff(ComputerEnvironment=~\\\"Azure\\\", 1, 2), scopedToUpdatesSolution=true, lastUpdateAgentSeenTime=\\\"\\\"\\r\\n| join kind=leftouter\\r\\n(\\r\\n    Update\\r\\n    | where TimeGenerated\u003eago(5h) and OSType==\\\"Linux\\\" and SourceComputerId in ((Heartbeat\\r\\n    | where TimeGenerated\u003eago(12h) and OSType==\\\"Linux\\\" and notempty(Computer)\\r\\n    | summarize arg_max(TimeGenerated, Solutions) by SourceComputerId\\r\\n    | where Solutions has \\\"updates\\\"\\r\\n    | distinct SourceComputerId))\\r\\n    | summarize hint.strategy=partitioned arg_max(TimeGenerated, UpdateState, Classification, Product, Computer, ComputerEnvironment) by SourceComputerId, Product, ProductArch\\r\\n    | summarize Computer=any(Computer), ComputerEnvironment=any(ComputerEnvironment), missingCriticalUpdatesCount=countif(Classification has \\\"Critical\\\" and UpdateState=~\\\"Needed\\\"), missingSecurityUpdatesCount=countif(Classification has \\\"Security\\\" and UpdateState=~\\\"Needed\\\"), missingOtherUpdatesCount=countif(Classification !has \\\"Critical\\\" and Classification !has \\\"Security\\\" and UpdateState=~\\\"Needed\\\"), lastAssessedTime=max(TimeGenerated), lastUpdateAgentSeenTime=\\\"\\\" by SourceComputerId\\r\\n    | extend compliance=iff(missingCriticalUpdatesCount \u003e 0 or missingSecurityUpdatesCount \u003e 0, 2, 1)\\r\\n    | extend ComplianceOrder=iff(missingCriticalUpdatesCount \u003e 0 or missingSecurityUpdatesCount \u003e 0 or missingOtherUpdatesCount \u003e 0, 1, 3)\\r\\n)\\r\\non SourceComputerId\\r\\n| project id=SourceComputerId, displayName=Computer, sourceComputerId=SourceComputerId, scopedToUpdatesSolution=true, missingCriticalUpdatesCount=coalesce(missingCriticalUpdatesCount, -1), missingSecurityUpdatesCount=coalesce(missingSecurityUpdatesCount, -1), missingOtherUpdatesCount=coalesce(missingOtherUpdatesCount, -1), compliance=coalesce(compliance, 4), lastAssessedTime, lastUpdateAgentSeenTime, osType=1, environment=iff(ComputerEnvironment=~\\\"Azure\\\", 1, 2), ComplianceOrder=coalesce(ComplianceOrder, 2)\\r\\n| union(Heartbeat\\r\\n| where TimeGenerated\u003eago(12h) and OSType=~\\\"Windows\\\" and notempty(Computer)\\r\\n| summarize arg_max(TimeGenerated, Solutions, Computer, ResourceId, ComputerEnvironment, VMUUID) by SourceComputerId\\r\\n| where Solutions has \\\"updates\\\"\\r\\n| extend vmuuId=VMUUID, azureResourceId=ResourceId, osType=2, environment=iff(ComputerEnvironment=~\\\"Azure\\\", 1, 2), scopedToUpdatesSolution=true, lastUpdateAgentSeenTime=\\\"\\\"\\r\\n| join kind=leftouter\\r\\n(\\r\\n    Update\\r\\n    | where TimeGenerated\u003eago(14h) and OSType!=\\\"Linux\\\" and SourceComputerId in ((Heartbeat\\r\\n    | where TimeGenerated\u003eago(12h) and OSType=~\\\"Windows\\\" and notempty(Computer)\\r\\n    | summarize arg_max(TimeGenerated, Solutions) by SourceComputerId\\r\\n    | where Solutions has \\\"updates\\\"\\r\\n    | distinct SourceComputerId))\\r\\n    | summarize hint.strategy=partitioned arg_max(TimeGenerated, UpdateState, Classification, Title, Optional, Approved, Computer, ComputerEnvironment) by Computer, SourceComputerId, UpdateID\\r\\n    | summarize Computer=any(Computer), ComputerEnvironment=any(ComputerEnvironment), missingCriticalUpdatesCount=countif(Classification has \\\"Critical\\\" and UpdateState=~\\\"Needed\\\" and Approved!=false), missingSecurityUpdatesCount=countif(Classification has \\\"Security\\\" and UpdateState=~\\\"Needed\\\" and Approved!=false), missingOtherUpdatesCount=countif(Classification !has \\\"Critical\\\" and Classification !has \\\"Security\\\" and UpdateState=~\\\"Needed\\\" and Optional==false and Approved!=false), lastAssessedTime=max(TimeGenerated), lastUpdateAgentSeenTime=\\\"\\\" by SourceComputerId\\r\\n    | extend compliance=iff(missingCriticalUpdatesCount \u003e 0 or missingSecurityUpdatesCount \u003e 0, 2, 1)\\r\\n    | extend ComplianceOrder=iff(missingCriticalUpdatesCount \u003e 0 or missingSecurityUpdatesCount \u003e 0 or missingOtherUpdatesCount \u003e 0, 1, 3)\\r\\n)\\r\\non SourceComputerId\\r\\n| project id=SourceComputerId, displayName=Computer, sourceComputerId=SourceComputerId, scopedToUpdatesSolution=true, missingCriticalUpdatesCount=coalesce(missingCriticalUpdatesCount, -1), missingSecurityUpdatesCount=coalesce(missingSecurityUpdatesCount, -1), missingOtherUpdatesCount=coalesce(missingOtherUpdatesCount, -1), compliance=coalesce(compliance, 4), lastAssessedTime, lastUpdateAgentSeenTime, osType=2, environment=iff(ComputerEnvironment=~\\\"Azure\\\", 1, 2), ComplianceOrder=coalesce(ComplianceOrder, 2) )\\r\\n| order by ComplianceOrder asc, missingCriticalUpdatesCount desc, missingSecurityUpdatesCount desc, missingOtherUpdatesCount desc, displayName asc\\r\\n| project displayName, scopedToUpdatesSolution, CriticalUpdates=missingCriticalUpdatesCount, SecurityUpdates=missingSecurityUpdatesCount, OtherUpdates=missingOtherUpdatesCount, compliance, osType, Environment=environment, lastAssessedTime, lastUpdateAgentSeenTime\\r\\n| extend osType = replace(@\\\"2\\\", @\\\"Windows\\\", tostring(osType))\\r\\n| extend osType = replace(@\\\"1\\\", @\\\"Linux\\\", tostring(osType))\\r\\n| extend Environment = replace(@\\\"2\\\", @\\\"Non-Azure\\\", tostring(Environment))\\r\\n| extend Environment = replace(@\\\"1\\\", @\\\"Azure\\\", tostring(Environment))\",         \"size\": 0,         \"exportFieldName\": \"displayName\",         \"exportParameterName\": \"Computer\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"crossComponentResources\": [           \"{Workspaces}\"         ],         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"displayName\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"scopedToUpdatesSolution\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CriticalUpdates\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"max\": 1,                 \"palette\": \"greenRed\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"SecurityUpdates\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"max\": 5,                 \"palette\": \"greenRed\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"OtherUpdates\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"max\": 5,                 \"palette\": \"greenRed\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"compliance\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 1,                 \"max\": 2,                 \"palette\": \"greenRed\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"osType\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Environment\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"lastAssessedTime\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"lastUpdateAgentSeenTime\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ]         }       },       \"name\": \"query - 2\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Updates Needed by {Computer}\"       },       \"name\": \"text - 10\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"parameters\": [],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.insights/components\"       },       \"name\": \"parameters - 3\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"Update\\r\\n| where TimeGenerated\u003eago(14h) and OSType!=\\\"Linux\\\" and (Optional==false or Classification has \\\"Critical\\\" or Classification has \\\"Security\\\") and SourceComputerId in ((Heartbeat\\r\\n| where TimeGenerated\u003eago(12h) and OSType=~\\\"Windows\\\" and notempty(Computer)\\r\\n| summarize arg_max(TimeGenerated, Solutions) by SourceComputerId\\r\\n| where Solutions has \\\"updates\\\" | distinct SourceComputerId))\\r\\n| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer, SourceComputerId, UpdateID\\r\\n| where UpdateState=~\\\"Needed\\\" and Approved!=false and Computer=='{Computer}'\\r\\n| project Computer, Title, Classification, PublishedDate, UpdateState, Product\\r\\n| union( Update\\r\\n| where TimeGenerated\u003eago(5h) and OSType==\\\"Linux\\\" and Computer == \\\"{Computer}\\\"\\r\\n| summarize hint.strategy=partitioned arg_max(TimeGenerated, UpdateState, Classification, BulletinUrl, BulletinID) by Computer, SourceComputerId, Product, ProductArch\\r\\n| where UpdateState=~\\\"Needed\\\"\\r\\n| project-away UpdateState, TimeGenerated\\r\\n| summarize computersCount=dcount(SourceComputerId, 2), ClassificationWeight=max(iff(Classification has \\\"Critical\\\", 4, iff(Classification has \\\"Security\\\", 2, 1))) by Computer, id=strcat(Product, \\\"_\\\", ProductArch), displayName=Product, productArch=ProductArch, classification=Classification, InformationId=BulletinID, InformationUrl=tostring(split(BulletinUrl, \\\";\\\", 0)[0]), osType=1\\r\\n| sort by ClassificationWeight desc, computersCount desc, displayName asc\\r\\n| extend informationLink=(iff(isnotempty(InformationId) and isnotempty(InformationUrl), toobject(strcat('{ \\\"uri\\\": \\\"', InformationUrl, '\\\", \\\"text\\\": \\\"', InformationId, '\\\", \\\"target\\\": \\\"blank\\\" }')), toobject('')))\\r\\n| project-away ClassificationWeight, InformationId, InformationUrl)\\r\\n\",         \"size\": 0,         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"crossComponentResources\": [           \"{Workspaces}\"         ],         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Computer\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Title\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Classification\",               \"formatter\": 18,               \"formatOptions\": {                 \"palette\": \"greenRed\",                 \"showIcon\": true,                 \"thresholdsOptions\": \"colors\",                 \"thresholdsGrid\": [                   {                     \"operator\": \"==\",                     \"thresholdValue\": \"Critical Updates\",                     \"representation\": \"redDark\",                     \"text\": \"{0}{1}\"                   },                   {                     \"operator\": \"==\",                     \"thresholdValue\": \"Security Updates\",                     \"representation\": \"redBright\",                     \"text\": \"{0}{1}\"                   },                   {                     \"operator\": \"==\",                     \"thresholdValue\": \"Definition Updates\",                     \"representation\": \"yellow\",                     \"text\": \"{0}{1}\"                   },                   {                     \"operator\": \"==\",                     \"thresholdValue\": \"Update Rollups\",                     \"representation\": \"purple\",                     \"text\": \"{0}{1}\"                   },                   {                     \"operator\": \"==\",                     \"thresholdValue\": \"Updates\",                     \"representation\": \"orange\",                     \"text\": \"{0}{1}\"                   },                   {                     \"operator\": \"Default\",                     \"thresholdValue\": null,                     \"representation\": \"blue\",                     \"text\": \"{0}{1}\"                   }                 ]               }             },             {               \"columnMatch\": \"PublishedDate\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"UpdateState\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Product\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"id\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"displayName\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"productArch\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"classification\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"osType\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"computersCount\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"informationLink\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ]         },         \"sortBy\": []       },       \"name\": \"query - 4\"     }   ],   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      }
                  ]
}
