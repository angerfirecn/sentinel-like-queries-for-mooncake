{
    "$schema":  "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymenttemplate.json#",
    "contentversion":  "1.0.0.0",
    "parameters":  {
                       "location":  {
                                        "type":  "string",
                                        "defaultvalue":  "chinaeast2"
                                    },
                       "workspacename":  {
                                             "type":  "string"
                                         },
                       "security - AzureActiveDirectoryAuditLogs_id":  {
                                                                           "defaultValue":  "[newGuid()]",
                                                                           "type":  "string"
                                                                       },
                       "security - AzureActiveDirectorySignins_id":  {
                                                                         "defaultValue":  "[newGuid()]",
                                                                         "type":  "string"
                                                                     },
                       "security - AzureActivity_id":  {
                                                           "defaultValue":  "[newGuid()]",
                                                           "type":  "string"
                                                       }
                   },
    "resources":  [
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Suspicious application consent similar to PwnAuth",
                                             "query":  "//This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the FireEye PwnAuth toolkit (https://github.com/fireeye/PwnAuth).\n//The default permissions/scope for the PwnAuth toolkit are user.read, offline_access, mail.readwrite, mail.send, and files.read.all.\n//Consent to applications with these permissions should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\nlet detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated \u003e ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull contains \"user.read\" and ConsentFull contains \"offline_access\" and ConsentFull contains \"mail.readwrite\" and ConsentFull contains \"mail.send\" and ConsentFull contains \"files.read.all\"\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \"User-Agent\", AdditionalDetails[0].value, \"\")\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \"AddressType\", TargetResources[0].modifiedProperties[1].newValue, \"\")\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_1')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Rare application consent",
                                             "query":  "//This will alert when the \"Consent to application\" operation occurs by a user that has not done this operation before or rarely does this.\n//This could indicate that permissions to access the listed Azure App were provided to a malicious actor. \n//Consent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events. \n//This may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\n\nlet current = 1d;\nlet auditLookback = 7d;\n// Setting threshold to 3 as a default, change as needed.  \n// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded\nlet threshold = 3;\n// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results\nlet AuditTrail = AuditLogs | where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current)\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", extend the filter below to capture these too\n| where OperationName == \"Consent to application\"\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName\n// only including operations by initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days\n| where OperationCount \u003e threshold\n;\n// Gather current period of audit data\nlet RecentConsent = AuditLogs | where TimeGenerated \u003e= ago(current)\n| where OperationName == \"Consent to application\"\n| extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \ntostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \ntostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| parse TargetResources.[0].modifiedProperties with * \"ConsentType: \" ConsentType \"]\" *\n| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType , CorrelationId, Type;\n// Exclude previously seen audit activity for \"Consent to application\" that was seen in the lookback period\n// First for rare InitiatedBy\nlet RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy \n| extend Reason = \"Previously unseen user consenting\";\n// Second for rare TargetResourceName\nlet RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName\n| extend Reason = \"Previously unseen app granted consent\";\nRareConsentBy | union RareConsentApp\n| summarize Reason = makeset(Reason) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, CorrelationId, Type\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_2')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Suspicious application consent for offline access",
                                             "query":  "//This will alert when a user consents to provide a previously-unknown Azure application with offline access via OAuth.\n//Offline access will provide the Azure App with access to the listed resources without requiring two-factor authentication.\n//Consent to applications with offline access and read capabilities should be rare, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//\nlet detectionTime = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated \u003e ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| where TargetResources has \"offline\"\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\")))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \"]\" *\n| where ConsentFull contains \"offline_access\" and ConsentFull contains \"Files.Read\" or ConsentFull contains \"Mail.Read\" or ConsentFull contains \"Notes.Read\" or ConsentFull contains \"ChannelMessage.Read\" or ConsentFull contains \"Chat.Read\" or ConsentFull contains \"TeamsActivity.Read\" or ConsentFull contains \"Group.Read\" or ConsentFull contains \"EWS.AccessAsUser.All\" or ConsentFull contains \"EAS.AccessAsUser.All\"\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ \"User-Agent\", AdditionalDetails[0].value, \"\")\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add service principal\"\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has \"AddressType\", TargetResources[0].modifiedProperties[1].newValue, \"\")\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated \u003e ago(joinLookback)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_3')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "User added to Azure Active Directory Privileged Groups",
                                             "query":  "//This will alert when a user is added to any of the Privileged Groups.\n//For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\n//For Administrator role permissions in Azure Active Directory please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles\n//\nlet timeframe = 1h;\nlet OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n| where TimeGenerated \u003e= ago(timeframe)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend DisplayName = tostring(parse_json(modifiedProperties).displayName), GroupName =  trim(@'\"',tostring(parse_json(modifiedProperties).newValue))\n| extend AppId = tostring(parse_json(parse_json(InitiatedBy).app).appId), InitiatedByDisplayName = tostring(parse_json(parse_json(InitiatedBy).app).displayName), ServicePrincipalId = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalId), ServicePrincipalName = tostring(parse_json(parse_json(InitiatedBy).app).servicePrincipalName)\n| where DisplayName =~ \"Role.WellKnownObjectName\"\n| where GroupName in~ (PrivilegedGroups)\n// If you want to still alert for operations from PIM, remove below filtering for MS-PIM.\n| where InitiatedByDisplayName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, AppId, InitiatedByDisplayName, ServicePrincipalId, ServicePrincipalName, DisplayName, GroupName\n| extend timestamp = TimeGenerated, AccountCustomEntity = ServicePrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_4')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Suspicious number of resource creation or deployment activities",
                                             "query":  "//Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log.\n//The anomaly detection identifies activities that have occured both since the start of the day 1 day ago and the start of the day 7 days ago.\n//The start of the day is considered 12am UTC time.\n//\n\nlet szOperationNames = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nlet starttime = 7d;\nlet endtime = 1d;\nAzureActivity\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(7d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope \u003e 0.2\n| join kind=leftsemi (\n// Last day's activity is anomalous\nAzureActivity\n| where TimeGenerated \u003e= startofday(ago(endtime))\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(1d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatus), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationName, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope \u003e 0.2    \n) on Caller, CallerIpAddress        \n| mvexpand todynamic(ActivityTimeStamp), todynamic(ActivityStatus), todynamic(OperationIds), todynamic(CorrelationId)\n| extend timestamp = ActivityTimeStamp, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_5')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Creation of expensive computes in Azure",
                                             "query":  "//Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure.\n//Adversary may create new or update existing virtual machines sizes to evade defenses \n//or use it for cryptomining purposes.\n//For Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes \n//Azure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions\n//\nlet timeframe = 1d;\nlet tokens = dynamic([\"416\",\"208\",\"128\",\"120\",\"96\",\"80\",\"72\",\"64\",\"48\",\"44\",\"40\",\"g5\",\"gs5\",\"g4\",\"gs4\",\"nc12\",\"nc24\",\"nv12\"]);\nlet operationList = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName in (operationList)\n| where ActivityStatus == \"Accepted\" \n| where isnotempty(Properties)\n| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))\n| where isnotempty(vmSize)\n| where vmSize has_any (tokens) \n| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)\n| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)\n| project TimeGenerated, OperationName, ActivityStatus, Caller, CallerIpAddress, ComputerName, vmSize\n| extend timestamp = TimeGenerated, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_6')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Suspicious granting of permissions to an account",
                                             "query":  "//Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet createRoleAssignmentActivity = AzureActivity\n| where OperationName == \"Create role assignment\";\ncreateRoleAssignmentActivity \n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller\n| where count_ \u003e= alertOperationThreshold\n| join kind = rightanti ( \ncreateRoleAssignmentActivity\n| where TimeGenerated \u003e ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CorrelationId = makelist(CorrelationId), ActivityCountByCallerIPAddress = count()  \nby ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_7')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Suspicious Resource deployment",
                                             "query":  "//Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen Caller.\n//\n\nlet szOperationNames = dynamic([\"Create or Update Virtual Machine\", \"Create Deployment\"]);\nlet starttime = 14d;\nlet endtime = 1d;\nlet RareCaller = AzureActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where OperationName in~ (szOperationNames)\n| project ResourceGroup, Caller, OperationName, CallerIpAddress\n| join kind=rightantisemi (\nAzureActivity\n| where TimeGenerated \u003e ago(endtime)\n| where OperationName in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatus = makeset(ActivityStatus), OperationIds = makeset(OperationId), CallerIpAddress = makeset(CallerIpAddress) \nby ResourceId, Caller, OperationName, Resource, ResourceGroup\n) on Caller, ResourceGroup \n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress);\nlet Counts = RareCaller | summarize ActivityCountByCaller = count() by Caller;\nRareCaller | join kind= inner (Counts) on Caller | project-away Caller1\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = tostring(CallerIpAddress)\n| sort by ActivityCountByCaller desc nulls last \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_8')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Rare subscription-level operations in Azure",
                                             "query":  "//This query looks for a few sensitive subscription-level events based on Azure Activity Logs. \n// For example this monitors for the operation name Create or Update Snapshot which is used for creating backups but could be misused by attackers \n// to dump hashes or extract sensitive information from the disk.\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\n// The number of operations below which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet SensitiveOperationList = dynamic(\n[\"List keys\", \"List Storage Account Keys\", \"Register Subscription\", \"Create or Update Snapshot\", \"Create or Update Network Security Group\"]);\nlet SensitiveActivity = AzureActivity\n| where OperationName in~ (SensitiveOperationList)\n| where ActivityStatus =~ \"Succeeded\";\nSensitiveActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller\n| where count_ \u003e= alertOperationThreshold\n| join kind = rightanti ( \nSensitiveActivity\n| where TimeGenerated \u003e= ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatus = makelist(ActivityStatus), \nOperationIds = makelist(OperationId), CorrelationIds = makelist(CorrelationId), Resources = makelist(Resource), ResourceGroups = makelist(ResourceGroup), ResourceIds = makelist(ResourceId), ActivityCountByCallerIPAddress = count()  \nby CallerIpAddress, Caller, OperationName\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_9')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. An alert is generated for recent sign-ins that have location counts that are anomalous\n//over last day but also over the last 7-day and 14-day periods.\n//\n\nlet lookBack_long = 14d;\nlet lookBack_med = 7d;\nlet lookBack = 1d;\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack_long))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_long)),now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| where Slope \u003e 0.3\n| top 50 by Slope desc\n| join kind = leftsemi (\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack_med))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack_med)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n| top 50 by Slope desc\n| where Slope \u003e 0.3\n) on UserPrincipalName, AppDisplayName\n| join kind = leftsemi (\nSigninLogs\n| where TimeGenerated \u003e= startofday(ago(lookBack))\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(startofday(ago(lookBack)) ,now(), 1d) \nby UserPrincipalName, AppDisplayName \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n| top 50 by Slope desc\n// Higher threshold requirement on last day anomaly\n| where Slope \u003e 5\n) on UserPrincipalName, AppDisplayName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_10')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Brute Force Attack against GitHub Account",
                                             "query":  "//Attackers who are trying to guess your users passwords or use brute-force methods to get in. If your organization is using SSO with Azure Active Directory, authentication logs to GitHub.com will be generated. Using the following query can help you identify a sudden increase in failed logon attempt of users.\n//\n\nlet LearningPeriod = 7d; \nlet BinTime = 1h; \nlet RunTime = 1h; \nlet StartTime = 1h; \nlet NumberOfStds = 3; \nlet MinThreshold = 10.0; \nlet EndRunTime = StartTime - RunTime; \nlet EndLearningTime = StartTime + LearningPeriod; \nlet GitHubFailedSSOLogins = (SigninLogs \n| where AppDisplayName == \"GitHub.com\" \n| where ResultType == 50056); \nGitHubFailedSSOLogins \n| where TimeGenerated between (ago(EndLearningTime) .. ago(StartTime)) \n| summarize FailedLoginsCountInBinTime = count() by User = Identity, bin(TimeGenerated, BinTime) \n| summarize AvgOfFailedLoginsInLearning = avg(FailedLoginsCountInBinTime), StdOfFailedLoginsInLearning = stdev(FailedLoginsCountInBinTime) by User \n| extend LearningThreshold = max_of(AvgOfFailedLoginsInLearning + StdOfFailedLoginsInLearning * NumberOfStds, MinThreshold) \n| join kind=innerunique ( \n  GitHubFailedSSOLogins \n  | where TimeGenerated between (ago(StartTime) .. ago(EndRunTime)) \n  | summarize FailedLoginsCountInRunTime = count() by User = Identity \n) on User \n| where FailedLoginsCountInRunTime \u003e LearningThreshold\n//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_11')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Attempt to bypass conditional access rule in Azure AD",
                                             "query":  "//Identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory.\n//The ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access\n//or if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\n//References: \n//https://docs.microsoft.com/azure/active-directory/conditional-access/overview\n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//ConditionalAccessStatus == 0 // Success\n//ConditionalAccessStatus == 1 // Failure\n//ConditionalAccessStatus == 2 // Not Applied\n//ConditionalAccessStatus == 3 // unknown\n//\n\nlet timeRange = ago(1d);\nlet threshold = 1;\nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, \": \", ResultDescription) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name\n| where IPAddressCount \u003e threshold and StatusDetails !has \"MFA successfully completed\"\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = makeset(IPAddresses), Status = makeset(Status), CorrelationIds = makeset(CorrelationIds) by StartTimeUtc, EndTimeUtc, UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = tostring(IPAddresses)\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_12')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Attempts to sign in to disabled accounts",
                                             "query":  "//Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\n//Default threshold for Azure Applications attempted to sign in to is 3.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator.\n//\n\nlet timeframe = 1d;\nlet threshold = 3;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeframe)\n| where ResultType == \"50057\"\n| where ResultDescription contains \"User account is disabled\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count(), applicationCount = dcount(AppDisplayName), \napplicationSet = makeset(AppDisplayName) by UserPrincipalName, IPAddress\n| where applicationCount \u003e= threshold\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_13')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Distributed Password cracking attempts in AzureAD",
                                             "query":  "//Identifies distributed password cracking attempts from the Azure Active Directory SigninLogs.\n//The query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n//50055   Invalid password, entered expired password.\n//50056   Invalid or null password - Password does not exist in store for this user.\n//50126   Invalid username or password, or invalid on-premises username or password.\n//\n\nlet timeRange = 1d;\nlet s_threshold = 30;\nlet l_threshold = 3;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| where OperationName =~ \"Sign-in activity\"\n// Error codes that we want to look at as they are related to the use of incorrect password.\n| where ResultType in (\"50126\", \"50053\" , \"50055\", \"50056\")\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend LocationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),LocationCount=dcount(LocationString), Location = make_set(LocationString), \nIPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), \nBrowser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName                               \n// Setting a generic threshold - Can be different for different environment\n| where SigninCount \u003e s_threshold and LocationCount \u003e= l_threshold\n| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)\n| distinct *\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_14')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Low",
                                             "displayName":  "Failed login attempts to Azure Portal",
                                             "query":  "//Identifies failed login attempts in the Azure Active Directory SigninLogs to the Azure Portal.  Many failed logon \n//attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.  \n//The following are excluded due to success and non-failure results:\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//0 - successful logon\n//50125 - Sign-in was interrupted due to a password reset or password registration entry.\n//50140 - This error occurred due to Keep me signed in interrupt when the user was signing-in.\n//\n\nlet timeRange = 1d;\nlet lookBack = 7d;\nlet threshold_Failed = 5;\nlet threshold_FailedwithSingleIP = 20;\nlet threshold_IPAddressCount = 2;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet azPortalSignins = materialize(SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n// Azure Portal only\n| where AppDisplayName =~ \"Azure Portal\")\n;\nlet successPortalSignins = azPortalSignins\n| where TimeGenerated \u003e= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n//| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n| distinct TimeGenerated, UserPrincipalName, Id, ResultType\n;\nlet failPortalSignins = azPortalSignins\n| where TimeGenerated \u003e= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n;\n// Verify there is no success for the same connection attempt after the fail\nlet failnoSuccess = failPortalSignins | join kind= leftouter (\n   successPortalSignins \n) on UserPrincipalName, Id\n| where TimeGenerated \u003e TimeGenerated1\n| project-away TimeGenerated1, UserPrincipalName1, Id1, ResultType1\n;\n// Lookup up resolved identities from last 7 days\nlet identityLookup = azPortalSignins\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from portal signins\nlet unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (\n   identityLookup \n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;\nu_azPortalSignins\n| extend Status = strcat(ResultType, \": \", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation\n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\n| where (IPAddressCount \u003e= threshold_IPAddressCount and FailedLogonCount \u003e= threshold_Failed) or FailedLogonCount \u003e= threshold_FailedwithSingleIP\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_15')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "GitHub Signin Burst from Multiple Locations",
                                             "query":  "//This alerts when there Signin burst from multiple locations in GitHub (AAD SSO).\n//\n\nlet RunTime = 1h;\nSigninLogs\n| where TimeGenerated \u003e ago(RunTime)\n| where AppDisplayName == \"GitHub.com\"\n| where ResultType == 0\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location) by User = Identity\n| where CountOfLocations \u003e 1\n//| extend AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_16')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Sign-ins from IPs that attempt sign-ins to disabled accounts",
                                             "query":  "//Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator.\n//\n\nlet lookBack = 1d;\nSigninLogs \n| where TimeGenerated \u003e= ago(lookBack)\n| where ResultType == \"50057\" \n| where ResultDescription contains \"User account is disabled\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), disabledAccountLoginAttempts = count(), \ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), \napplicationSet = makeset(AppDisplayName) by IPAddress\n| order by disabledAccountLoginAttempts desc\n| join kind= leftouter (\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\n    SigninLogs\n    | where TimeGenerated \u003e= ago(lookBack)\n    | where ResultType == 0\n    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount \u003c 100\n) on IPAddress  \n// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\n| where successfulAccountSigninCount != 0\n| project StartTimeUtc, EndTimeUtc, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet\n| order by disabledAccountLoginAttempts\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_17')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Brute force attack against Azure Portal",
                                             "query":  "//Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures \n//and by a successful authentication within a given time window. \n//(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)\n//Default Failure count is 5, Default Success count is 1 and default Time Window is 20 minutes.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n//\n\nlet failureCountThreshold = 5;\nlet successCountThreshold = 1;\nlet timeRange = 1d;\nlet authenticationWindow = 20m;\nSigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| where AppDisplayName contains \"Azure Portal\"\n// Split out failure versus non-failure types\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddress = makeset(IPAddress), makeset(OS), makeset(Browser), makeset(City), \nmakeset(ResultType), FailureCount = countif(FailureOrSuccess==\"Failure\"), SuccessCount = countif(FailureOrSuccess==\"Success\") \nby bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName, AppDisplayName\n| where FailureCount \u003e= failureCountThreshold and SuccessCount \u003e= successCountThreshold\n| mvexpand IPAddress\n| extend IPAddress = tostring(IPAddress)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_18')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Password spray attack against Azure AD application",
                                             "query":  "//Identifies evidence of password spray activity against Azure AD applications by looking for failures from multiple accounts from the same\n//IP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range\n//are bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\n//This can be an indicator that an attack was successful.\n//The default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 3 days\n//Note: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.\n//\n\nlet timeRange = 3d;\nlet lookBack = 7d;\nlet authenticationWindow = 20m;\nlet authenticationThreshold = 5;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n// Lookup up resolved identities from last 7 days\nlet identityLookup = SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| where isnotempty(UserId)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// collect window threshold breaches\nSigninLogs\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(failureCodes)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), count() by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, UserPrincipalName\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName\n| where FailedPrincipalCount \u003e= authenticationThreshold\n| summarize WindowThresholdBreaches = count() by IPAddress\n| join kind= inner (\n// where we breached a threshold, join the details back on all failure data\n SigninLogs\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(failureCodes)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed), make_set(FullLocation), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId\n// lookup any unresolved identities\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\n| join kind= leftouter (\n identityLookup \n) on $left.UnresolvedUserId==$right.UserId\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName), make_set(UserDisplayName), make_set(set_ClientAppUsed), make_set(set_FullLocation), make_list(FailureCount) by IPAddress, AppDisplayName\n| extend FailedPrincipalCount = arraylength(set_UserPrincipalName)\n) on IPAddress\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches\n| join kind= inner (\nSigninLogs // get data on success vs. failure history for each IP\n| where TimeGenerated \u003e ago(timeRange)\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in(successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in(successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in(failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in(failureCodes))) by IPAddress\n| where GlobalFailPrincipalCount \u003e GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\n) on IPAddress\n| project-away IPAddress1\n| extend timestamp=StartTime, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_19')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Detection-Medium",
                                             "displayName":  "Successful logon from IP and failure from a different IP",
                                             "query":  "//Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP.\n//This may indicate a malicious attempt at password guessing based on knowledge of the users account.\n//\n\nlet timeFrame = 1d;\nlet logonDiff = 10m;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeFrame) \n| where ResultType == \"0\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])\n| join kind= inner (\n    SigninLogs \n    | where TimeGenerated \u003e= ago(timeFrame) \n    | where ResultType !in (\"0\", \"50140\") \n    | where ResultDescription !~ \"Other\"  \n    | where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription\n) on UserPrincipalName, AppDisplayName \n| where SuccessLogonTime \u003c FailedLogonTime and FailedLogonTime - SuccessLogonTime \u003c= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription \n| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_20')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Consent to Application discovery",
                                             "query":  "//This query looks at the last 14 days for any \"Consent to application\" operation\n//occurs by a user or app. This could indicate that permissions to access the listed AzureApp\n//was provided to a malicious actor. Consent to appliction, Add service principal and \n//Add OAuth2PermissionGrant events should be rare. If available, additional context is added \n//from the AuditLogs based on CorrleationId from the same account that performed \"Consent to \n//application\".\n//For further information on AuditLogs please see \n//https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities\n//This may help detect the Oauth2 attack that can be initiated by this publicly available tool\n//https://github.com/fireeye/PwnAuth\n//\n\nlet auditLookback = 14d;\n// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 30 days will be exluded\nlet threshold = 3;\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | extend ModProps = TargetResources.[0].modifiedProperties\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\n// Get just the InitiatedBy and CorrleationId so we can look at associated audit activity\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", replace the below if you are interested in those as starting points for OperationName\nlet HistoricalConsent = auditLogEvents(auditLookback)  \n| where OperationName == \"Consent to application\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \nby Type, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n// Remove comment below to only include operations initiated by a user or app that is above the threshold for the last 30 days\n//| where OperationCount \u003e threshold\n;\nlet Correlate = HistoricalConsent \n| summarize by InitiatedBy, CorrelationId;\n// 2 other operations that can be part of malicious activity in this situation are \n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", replace the below if you changed the starting OperationName above\nlet allOtherEvents = auditLogEvents(auditLookback) \n| where OperationName != \"Consent to application\";\n// Gather associated activity based on audit activity for \"Consent to application\" and InitiatedBy and CorrleationId\nlet CorrelatedEvents = Correlate \n| join allOtherEvents on InitiatedBy, CorrelationId\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \nby Type, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n;\n// Union the results\nlet Results = union isfuzzy=true HistoricalConsent,CorrelatedEvents;\n// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)\nResults\n| extend newValue = split(newValue, \";\")\n| extend PropertyUpdate = pack(PropertyName, newValue, \"Id\", Id)\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) \nby InitiatedBy, IpAddress, TargetResourceName, OperationName, CorrelationId\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_21')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Rare Audit activity initiated by App",
                                             "query":  "//Compares the current day to the last 14 days of audits to identify new audit activities by \n//OperationName, InitiatedByApp, UserPrincipalName, PropertyName, newValue\n//This can be useful when attempting to track down malicious activity related to additions of new users,\n//additions to groups, removal from groups by Azure Apps and automated approvals.\n//\n\nlet current = 1d;\nlet auditLookback = 14d;\nlet AuditTrail = AuditLogs \n| where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current) \n| extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| where isnotempty(InitiatedByApp)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend IpAddress = tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where isnotempty(newValue) and newValue != \"\\\"\\\"\"\n| summarize  by OperationName, InitiatedByApp, UserPrincipalName, IpAddress, TargetResourceName, PropertyName, newValue;\nlet AccountMods = AuditLogs \n| where TimeGenerated \u003e= ago(current)\n| extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| where isnotempty(InitiatedByApp)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend IpAddress = tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where isnotempty(newValue) and newValue != \"\\\"\\\"\"\n| where PropertyName != \"TargetId.UserType\"\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"newValue\",newValue, \"Id\", Id, \"CorrelationId\", CorrelationId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedByApp, UserPrincipalName, IpAddress, TargetResourceName, Category, OperationName, PropertyName, newValue;\nlet RareAudits = AccountMods | join kind= leftanti (\n   AuditTrail \n) on OperationName, InitiatedByApp, UserPrincipalName, PropertyName, newValue;\nRareAudits\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc),Activity = make_set(Activity) by InitiatedByApp, OperationName, UserPrincipalName, IpAddress, TargetResourceName\n| order by UserPrincipalName asc, StartTimeUtc asc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_22')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Rare Audit activity initiated by User",
                                             "query":  "//Compares the current day to the last 14 days of audits to identify new audit activities by \n//OperationName, InitiatedByUser, UserPrincipalName, PropertyName, newValue\n//This can be useful when attempting to track down malicious activity related to additions of \n//new users, additions to groups, removal from groups by specific users.\n//\n\nlet current = 1d;\nlet auditLookback = 14d;\nlet AuditTrail = AuditLogs \n| where TimeGenerated \u003e= ago(auditLookback) and TimeGenerated \u003c ago(current) \n| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(InitiatedByUser)\n| extend InitiatedByIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| summarize count() by OperationName, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, PropertyName, newValue, TargetResourceName;\nlet AccountMods = AuditLogs \n| where TimeGenerated \u003e= ago(current)\n| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| where isnotempty(InitiatedByUser)\n| extend InitiatedByIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue))\n| where PropertyName !in (\"TargetId.UserType\", \"StsRefreshTokensValidFrom\", \"LastDirSyncTime\") and (PropertyName != \"Action Client Name\" and newValue != \"\\\"DirectorySync\\\"\") and (PropertyName != \"Included Updated Properties\" and newValue != \"\\\"LastDirSyncTime\\\"\")\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"newValue\",newValue, \"Id\", Id, \"CorrelationId\", CorrelationId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, Category, OperationName, PropertyName, newValue, TargetResourceName;\nlet RareAudits = AccountMods | join kind= leftanti (\n   AuditTrail \n) on OperationName, InitiatedByUser, InitiatedByIPAddress, UserPrincipalName, PropertyName, newValue;\nRareAudits \n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), make_set(Activity) by InitiatedByUser, InitiatedByIPAddress, OperationName, UserPrincipalName, TargetResourceName\n| order by UserPrincipalName asc, StartTimeUtc asc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedByUser, HostCustomEntity = TargetResourceName, IPCustomEntity = InitiatedByIPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_23')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "User Granted Access and associated audit activity",
                                             "query":  "//Identifies when a new user is granted access and any subsequent audit related activity.  This can help you identify rogue or malicious user behavior.\n//\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Setting threshold to 3 as a default, change as needed.  Any operation that has been initiated by a user or app more than 3 times in the past 14 days will be excluded\nlet threshold = 3;\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\nlet HistoricalAdd = auditLogEvents(auditLookback)\n| where OperationName in~ (opName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() \nby Type, InitiatedBy, IpAddress, TargetUserName, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n// Remove comment below to only include operations initiated by a user or app that is above the threshold for the last 14 days\n| where OperationCount \u003e threshold\n;\n// Get list of new added users to correlate with all other events\nlet Correlate = HistoricalAdd \n| summarize by InitiatedBy, TargetUserName, CorrelationId;\n// Get all other events related to list of newly added users\nlet allOtherEvents = auditLogEvents(auditLookback);\n// Join the new added user list to get the list of associated events\nlet CorrelatedEvents = Correlate \n| join allOtherEvents on InitiatedBy, TargetUserName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) \nby Type, InitiatedBy, IpAddress, TargetUserName, TargetResourceName, Category, OperationName, PropertyName, newValue, CorrelationId, Id\n;\n// Union the results so we can see when the user was added and any associated events that occurred during the same time.\nlet Results = union isfuzzy=true HistoricalAdd,CorrelatedEvents;\n// newValues that are simple semi-colon separated, make those dynamic for easy viewing and Aggregate into the PropertyUpdate set based on CorrelationId and Id(DirectoryId)\nResults\n| extend newValue = split(newValue, \";\")\n| extend PropertyUpdate = pack(PropertyName, newValue, \"Id\", Id)\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), PropertyUpdateSet = make_bag(PropertyUpdate) \nby InitiatedBy, IpAddress, TargetUserName, TargetResourceName, OperationName, CorrelationId\n| extend timestamp = StartTimeUtc, AccountCustomEntity = InitiatedBy, HostCustomEntity = TargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_24')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "User Granted Access and Grants others Access",
                                             "query":  "//Identifies when a new user is granted access and starts granting access to other users.  This can help you identify rogue or malicious user behavior.\n//\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan, operation:dynamic)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | where OperationName in~ (operation)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\n// Assigning time for First TargetUserName that was added\nlet FirstAdd = auditLogEvents(auditLookback, opName)  \n| project FirstAddTimeUtc = TimeGenerated, Type, FirstInitiatedBy = InitiatedBy, IpAddress, FirstTargetUserName = TargetUserName, FirstTargetResourceName = TargetResourceName, \nFirstOperationName = OperationName, FirstPropertyName = PropertyName, FirstnewValue = newValue, FirstCorrelationId = CorrelationId, FirstId = Id;\n// Assigning time for second TargetUserName that was added, which will allow us to see if a first TargetUserName added in is the Initiated by on the second in the later join\nlet SecondAdd = auditLogEvents(auditLookback, opName)  \n| project SecondAddTimeUtc = TimeGenerated, Type, SecondInitiatedBy = InitiatedBy, IpAddress, SecondTargetUserName = TargetUserName, SecondTargetResourceName = TargetResourceName, \nSecondOperationName = OperationName, SecondPropertyName = PropertyName, SecondnewValue = newValue, SecondCorrelationId = CorrelationId, SecondId = Id;\n//  Joining the FirstAdd with SecondAdd where the FirstAdd TargetUserName value matches the SecondAdd InitiatedBy.  This shows the new user adding a user.\nlet NewUserAddsUser = FirstAdd | join SecondAdd on $left.FirstTargetUserName == $right.SecondInitiatedBy\n// we only want items where the FirstAddTimeUtc is before the SecondAddTimeUtc\n| where FirstAddTimeUtc \u003c SecondAddTimeUtc\n;\n// Build out some of the properties for context\nNewUserAddsUser\n| extend FirstnewValue = split(FirstnewValue, \";\"), SecondnewValue = split(SecondnewValue, \";\")\n| extend PropertyUpdate = pack(FirstPropertyName, FirstnewValue, SecondPropertyName, SecondnewValue, \"FirstCorrelationId\", FirstCorrelationId, \"FirstId\", FirstId, \"SecondCorrelationId\", SecondCorrelationId, \"SecondId\", SecondId)\n| summarize PropertyUpdateSet = make_bag(PropertyUpdate) by FirstAddTimeUtc, FirstInitiatedBy, FirstTargetUserName, SecondAddTimeUtc, SecondInitiatedBy, SecondTargetUserName, \nIpAddress, FirstTargetResourceName, SecondTargetResourceName, FirstOperationName, SecondOperationName\n| extend timestamp = FirstAddTimeUtc, AccountCustomEntity = FirstInitiatedBy, HostCustomEntity = FirstTargetResourceName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_25')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Sentinel Analytics Rules Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Analytics Rules administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.SecurityInsights/alertRules/write\", \"Microsoft.SecurityInsights/alertRules/delete\"]);\n// Azure Sentinel Analytics - Rule Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_26')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure storage key enumeration",
                                             "query":  "//Listing of storage keys is an interesting operation in Azure which might expose additional \n//secrets and PII to callers as well as granting access to VMs. While there are many benign operations of this\n//type, it would be interesting to see if the account performing this activity or the source IP address from \n//which it is being done is anomalous. \n//The query below generates known clusters of ip address per caller, notice that users which only had single\n//operations do not appear in this list as we cannot learn from it their normal activity (only based on a single\n//event). The activities for listing storage account keys is correlated with this learned \n//clusters of expected activities and activity which is not expected is returned. \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"List Storage Account Keys\"\n| where ActivityStatus == \"Succeeded\" \n| join kind= inner (\n    AzureActivity\n    | where TimeGenerated \u003e= ago(timeframe)\n    | where OperationName == \"List Storage Account Keys\"\n    | where ActivityStatus == \"Succeeded\" \n    | project ExpectedIpAddress=CallerIpAddress, Caller \n    | evaluate autocluster()\n) on Caller \n| where CallerIpAddress != ExpectedIpAddress\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResourceIds = makeset(ResourceId), ResourceIdCount = dcount(ResourceId) by OperationName, Caller, CallerIpAddress\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_27')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Network Security Group NSG Administrative Operations",
                                             "query":  "//Identifies set of Azure NSG administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.Network/networkSecurityGroups/write\", \"Microsoft.Network/networkSecurityGroups/delete\"]);\n// Azure NSG Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_28')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Sentinel Connectors Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Data Connectors administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.SecurityInsights/dataConnectors/write\", \"Microsoft.SecurityInsights/dataConnectors/delete\"]);\n// Azure Sentinel Data Connectors Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_29')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Sentinel Workbooks Administrative Operations",
                                             "query":  "//Identifies set of Azure Sentinel Workbooks administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"microsoft.insights/workbooks/write\", \"microsoft.insights/workbooks/delete\"]);\n// Azure Sentinel Workbook Create / Update / Delete\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue in (\"Created\", \"OK\")\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_30')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Virtual Network Subnets Administrative Operations",
                                             "query":  "//Identifies set of Azure Virtual Network Subnets administrative operational detection queries for hunting activites\n//\n\nlet timeframe = 1d;\nlet opValues = dynamic([\"Microsoft.Network/virtualNetworks/subnets/write\"]);\n// Creating Virtual Network Subnets\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where Category == \"Administrative\"\n| where OperationNameValue in (opValues)\n| where ActivitySubstatusValue == \"Created\"\n| sort by TimeGenerated desc\n| extend AccountCustomEntity = Caller\n| extend IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_31')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Common deployed resources",
                                             "query":  "//This query looks for common deployed resources (resource name and resource groups) and can be used\n//in combination with other signals that show suspicious deployment to evaluate if the resource is one\n//that is commonly being deployed/created or unique. \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create or Update Virtual Machine\" or OperationName == \"Create Deployment\" \n| where ActivityStatus == \"Succeeded\" \n| project Resource, ResourceGroup \n| evaluate basket()\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_32')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Creation of an anomalous number of resources",
                                             "query":  "//Looks for anomalous number of resources creation or deployment activities in azure activity log.\n//It is best to run this query on a look back period which is at least 7 days.\n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create or Update Virtual Machine\" or OperationName == \"Create Deployment\" \n| where ActivityStatus == \"Succeeded\" \n| make-series dcount(ResourceId)  default=0 on EventSubmissionTimestamp in range(ago(7d), now(), 1d) by Caller\n| extend AccountCustomEntity = Caller\n| render timechart \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_33')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Granting permissions to account",
                                             "query":  "//Shows the most prevalent users who grant access to others on azure resources and for each account \n//their common source ip address. If an operation is not from this IP address it may be worthy of investigation.\n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName == \"Create role assignment\"\n| where ActivityStatus == \"Succeeded\" \n| project Caller, CallerIpAddress\n| evaluate basket()\n| extend AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_34')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Port opened for an Azure Resource",
                                             "query":  "//Identifies what ports may have been opened for a given Azure Resource over the last 7 days \n//\n\nlet timeframe = 7d;\nAzureActivity\n| where TimeGenerated \u003e= ago(timeframe)\n| where OperationName has_any (\"Create\", \"Update\") and OperationName has_any (\"Ip\", \"Security Rule\")\n// Choosing Accepted here because it has the Rule Attributes included\n| where ActivityStatus == \"Accepted\" \n// If there is publicIP info, include it\n| extend publicIPAddress_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).ipAddress) \n| extend publicIPAddressVersion_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).publicIPAddressVersion) \n| extend publicIPAllocationMethod_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).publicIPAllocationMethod) \n// Include rule attributes for context\n| extend access = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).access) \n| extend description = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).description) \n| extend destinationPortRange = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).destinationPortRange) \n| extend direction = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).direction) \n| extend protocol = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).protocol) \n| extend sourcePortRange = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).sourcePortRange) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ResourceIds = makeset(ResourceId) by Caller, CallerIpAddress, Resource, ResourceGroup, \nActivityStatus, ActivitySubstatus, SubscriptionId, access, description, destinationPortRange, direction, protocol, sourcePortRange  \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_35')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Rare Custom Script Extension",
                                             "query":  "//The Custom Script Extension downloads and executes scripts on Azure virtual machines. This extension is useful for post deployment configuration, software installation, or any other configuration or management tasks. \n// Scripts could be downloaded from external links, Azure storage, GitHub, or provided to the Azure portal at extension run time. This could also be used maliciously by an attacker. \n// The query tries to identify rare custom script extensions that have been executed in your envioenment\n//\nlet current = 1d;\nlet Lookback = 14d;\nlet CustomScriptExecution = AzureActivity \n| where TimeGenerated \u003e= ago(Lookback) \n| where OperationName =~ \"Create or Update Virtual Machine Extension\"\n| extend Settings = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).settings)))\n| parse Settings with * 'fileUris\":[' FileURI \"]\" *\n| parse Settings with * 'commandToExecute\":' commandToExecute '}' *\n| extend message_ = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).statusMessage)).error)).message);\nlet LookbackCustomScriptExecution = CustomScriptExecution\n| where TimeGenerated \u003e= ago(Lookback) and TimeGenerated \u003c ago(current)\n| where isnotempty(FileURI) and isnotempty(commandToExecute)\n| summarize max(TimeGenerated), OperationCount = count() by Caller, Resource, CallerIpAddress, FileURI, commandToExecute;\nlet CurrentCustomScriptExecution = CustomScriptExecution\n| where TimeGenerated \u003e= ago(current)\n| where isnotempty(FileURI) and isnotempty(commandToExecute)\n| project TimeGenerated, ActivityStatus, OperationId, CorrelationId, ResourceId, CallerIpAddress, Caller, OperationName, Resource, ResourceGroup, FileURI, commandToExecute, FailureMessage = message_, HTTPRequest, Settings;\nlet RareCustomScriptExecution =  CurrentCustomScriptExecution\n| join kind= leftanti (LookbackCustomScriptExecution) on Caller, CallerIpAddress, FileURI, commandToExecute;\nlet IPCheck = RareCustomScriptExecution \n| summarize arg_max(TimeGenerated, OperationName), OperationIds = makeset(OperationId), CallerIpAddresses = makeset(CallerIpAddress) by ActivityStatus, CorrelationId, ResourceId, Caller, Resource, ResourceGroup, FileURI, commandToExecute, FailureMessage\n| extend IPArray = arraylength(CallerIpAddresses);\n//Get IPs for later summarization so all associated CorrelationIds and Caller actions have an IP.  Success and Fails do not always have IP\nlet multiIP = IPCheck | where IPArray \u003e 1\n| mvexpand CallerIpAddresses | extend CallerIpAddress = tostring(CallerIpAddresses)\n| where isnotempty(CallerIpAddresses);\nlet singleIP = IPCheck | where IPArray \u003c= 1\n| mvexpand CallerIpAddresses | extend CallerIpAddress = tostring(CallerIpAddresses);\nlet FullDetails = singleIP | union multiIP;\n//Get IP address associated with successes and fails with no IP listed\nlet IPList = FullDetails | where isnotempty(CallerIpAddress) | summarize by CorrelationId, Caller, CallerIpAddress;\nlet EmptyIP = FullDetails | where isempty(CallerIpAddress) | project-away CallerIpAddress;\nlet IpJoin = EmptyIP | join kind= leftouter (IPList) on CorrelationId, Caller | project-away CorrelationId1, Caller1;\nlet nonEmptyIP = FullDetails | where isnotempty(CallerIpAddress);\nnonEmptyIP | union IpJoin\n// summarize all activities with a given CorrelationId and Caller together so we can provide a singular result\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ActivityStatusSet = makeset(ActivityStatus), OperationIds = makeset(OperationIds), FailureMessages = makeset(FailureMessage) by CorrelationId, ResourceId, CallerIpAddress, Caller, Resource, ResourceGroup, FileURI, commandToExecute\n| extend timestamp = StartTime, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_36')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Failed service logon attempt by user account with available AuditData",
                                             "query":  "//User account failed to logon in current period (default last 1 day). Excludes Windows Sign in attempts due to noise and limits to only more than 10 failed logons or 3 different IPs used.\n//Additionally, Azure Audit Log data from the last several days(default 7 days) related to the given UserPrincipalName will be joined if available.\n//This can help to understand any events for this same user related to User or Group Management.\n//Results may indicate a potential malicious use of an account that is rarely used. It is possible this is an account that is new or newly enabled.\n//The associated Azure Audit data should help determine any recent changes to this account and may help you understand why the logons are failing.\n//Receiving no results indicates that there were no less than 10 failed logons or that the Auditlogs related to this UserPrincipalName in the default 7 days.\n//\n\nlet current = 1d;\nlet failLimit = 10;\nlet ipLimit = 3;\nlet auditLookback = 7d;\nlet FailedSignins = SigninLogs \n| where TimeGenerated \u003e= ago(current)\n| where ResultType != \"0\" and AppDisplayName != \"Windows Sign In\"\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| extend CityState = strcat(tostring(LocationDetails.city),\"|\", tostring(LocationDetails.state))\n| extend Result = strcat(ResultType,\"-\",ResultDescription) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctIPAddressCount = dcount(IPAddress), IPAddresses = makeset(IPAddress), \nCityStates = makeset(CityState), DistinctResultCount = dcount(Result), Results = makeset(Result), AppDisplayNames = makeset(AppDisplayName), \nFailedLogonCount = count() by Type, OperationName, Category, UserPrincipalName = tolower(UserPrincipalName), ClientAppUsed, Location, CorrelationId\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, AppDisplayNames, DistinctIPAddressCount, IPAddresses, DistinctResultCount, \nResults, FailedLogonCount, Location, CityStates \n| where FailedLogonCount \u003e= failLimit or DistinctIPAddressCount \u003e= ipLimit\n| extend Activity = pack(\"IPAddresses\", IPAddresses, \"AppDisplayNames\", AppDisplayNames, \"Results\", Results, \"Location\", Location, \"CityStates\", CityStates)\n| project Type, StartTimeUtc, EndTimeUtc, OperationName, Category, UserPrincipalName, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, Activity\n| extend AccountCustomEntity = UserPrincipalName;\nlet AccountMods = AuditLogs | where TimeGenerated \u003e= ago(current+auditLookback)\n| where Category == \"UserManagement\" or Category == \"GroupManagement\"\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend InitiatedBy = case(\nisnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),\nisnotempty(tostring(parse_json(tostring(InitiatedBy.app)).displayName)), tostring(parse_json(tostring(InitiatedBy.app)).displayName),\n\"\")\n| extend UserPrincipalName = tolower(tostring(TargetResources.[0].userPrincipalName))\n| mvexpand ModProps\n| extend PropertyName = tostring(ModProps.displayName), oldValue = tostring(ModProps.oldValue), newValue = tostring(ModProps.newValue)\n| extend ModifiedProps = pack(\"PropertyName\",PropertyName,\"oldValue\",oldValue,\"newValue\",newValue) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Activity = make_bag(ModifiedProps) by Type, InitiatedBy, UserPrincipalName, Category, OperationName, CorrelationId, Id\n| extend AccountCustomEntity = UserPrincipalName;\n// Gather only Audit data for UserPrincipalNames that we have Audit data for\nlet AccountNameOnly = FailedSignins | project UserPrincipalName;\nlet AuditMods = AccountNameOnly\n| join kind= innerunique (\nAccountMods\n) on UserPrincipalName;\nlet AvailableAudits = AuditMods | project UserPrincipalName;\nlet SigninsWithAudit = AvailableAudits\n| join kind= innerunique (\nFailedSignins\n) on UserPrincipalName;\n// Union the Current Signin failures so we do not lose them with the Auditing data we do have\nlet Activity = (union isfuzzy=true\nSigninsWithAudit, AuditMods)\n| order by StartTimeUtc, UserPrincipalName;\nActivity\n| project StartTimeUtc, EndTimeUtc, DataType = Type, Category, OperationName, UserPrincipalName, InitiatedBy, Activity, FailedLogonCount, DistinctIPAddressCount, DistinctResultCount, CorrelationId, Id\n| order by UserPrincipalName, StartTimeUtc\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_37')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "User Granted Access and created resources",
                                             "query":  "//Identifies when a new user is granted access and starts creating resources in Azure.  This can help you identify rogue or malicious user behavior.\n//\n\nlet auditLookback = 14d;\nlet opName = dynamic([\"Add user\", \"Invite external user\"]);\n// Helper function to extract relevant fields from AuditLog events\nlet auditLogEvents = view (startTimeSpan:timespan, operation:dynamic)  {\n    AuditLogs | where TimeGenerated \u003e= ago(auditLookback)\n    | where OperationName in~ (operation)\n    | extend ModProps = iff(TargetResources.[0].modifiedProperties != \"[]\", TargetResources.[0].modifiedProperties, todynamic(\"NoValues\"))\n    | extend IpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)), \n    tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n    | extend InitiatedByFull = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n    tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n    | extend InitiatedBy = replace(\"_\",\"@\",tostring(split(InitiatedByFull, \"#\")[0]))\n    | extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetResourceName = case(\n    isempty(tostring(TargetResources.[0].displayName)), TargetUserPrincipalName,\n    isnotempty(tostring(TargetResources.[0].displayName)) and tostring(TargetResources.[0].displayName) startswith \"upn:\", tolower(tostring(TargetResources.[0].displayName)),\n    tolower(tostring(TargetResources.[0].displayName))\n    )\n    | extend TargetUserName = replace(\"_\",\"@\",tostring(split(TargetUserPrincipalName, \"#\")[0]))\n    | extend TargetUserName = iff(isempty(TargetUserName), tostring(split(split(TargetResourceName, \",\")[0], \" \")[1]), TargetUserName ) \n    | mvexpand ModProps\n    | extend PropertyName = tostring(ModProps.displayName), newValue = replace(\"\\\"\",\"\",tostring(ModProps.newValue));\n};\nlet UserAdd = auditLogEvents(auditLookback, opName) \n| project Action = \"User Added\", TimeGenerated, Type, InitiatedBy_Caller = InitiatedBy, IpAddress, TargetUserName = tolower(TargetUserName), OperationName, PropertyName_ResourceId = PropertyName, Value = newValue;\n// Get the simple list of creatd users so we can use later to get just the associated resource creation events\nlet SimpleUserList = UserAdd | project TimeGenerated, TargetUserName;\nlet ResourceCreation = AzureActivity\n| where TimeGenerated \u003e= ago(auditLookback)\n// We look for any Operation that created and then succeeded where ActivityStatus has a value so that we can provide context\n| where OperationName has \"Create\"\n| where ActivityStatus has \"Succeeded\"\n| project Action = \"Resource Created\", ResourceCreationTimeGenerated = TimeGenerated, Type, InitiatedBy_Caller = tolower(Caller), IpAddress = CallerIpAddress, OperationName, Value = OperationNameValue, PropertyName_ResourceId = ResourceId;\n// Get just the Resources added by the new user\nlet ResourceMatch = SimpleUserList | join kind= innerunique (\n   ResourceCreation\n) on $left.TargetUserName == $right.InitiatedBy_Caller\n// where the resource creation is after (greater than) the user addition\n| where TimeGenerated \u003c ResourceCreationTimeGenerated\n| project-away TimeGenerated \n| project-rename TimeGenerated = ResourceCreationTimeGenerated\n;\nlet SimpleResourceMatch = ResourceMatch | project InitiatedBy_Caller;\n// Get only resource add, remove, change by the new user\nlet UserAddWithResource = SimpleResourceMatch | join kind= rightsemi (\n   UserAdd \n) on $left.InitiatedBy_Caller == $right.TargetUserName;\n// union the user addition events and resource addition events and provide common column names, additionally pack the value, property and resource info to reduce result set.\nUserAddWithResource \n| union isfuzzy=true ResourceMatch\n| extend PropertySet = pack(\"Value\", Value, \"PropertyName_ResourceId\", PropertyName_ResourceId) \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), makeset(PropertySet)  by Action, Type, TargetUserName, InitiatedBy_Caller, IpAddress, OperationName\n| order by StartTimeUtc asc \n| extend timestamp = StartTimeUtc, AccountCustomEntity = TargetUserName, IPCustomEntity = IpAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_38')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. The intent is to hunt for user account compromise, possibly via a specific application\n//vector.\n//\n\nlet timeRange=ago(14d);\nSigninLogs \n// Forces Log Analytics to recognize that the query should be run over full time range\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName, UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(timeRange,now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare, Slope, Variance, RVariance, Interception, LineFit) = series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| top 3 by Slope desc\n| extend AccountCustomEntity = UserPrincipalName \n| render timechart\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_39')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Anomalous sign-in location by user account and authenticating application - with sign-in details",
                                             "query":  "//This query over Azure Active Directory sign-in considers all user sign-ins for each Azure Active \n//Directory application and picks out the most anomalous change in location profile for a user within an \n//individual application. The intent is to hunt for user account compromise, possibly via a specific application\n//vector.\n//This variation of the query joins the results back onto the original sign-in data to allow review of the \n//location set with each identified user in tabular form.\n//\n\nlet timeRange = ago(14d);\nSigninLogs \n// Forces Log Analytics to recognize that the query should be run over full time range\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\") \n| project TimeGenerated, AppDisplayName , UserPrincipalName, locationString \n// Create time series \n| make-series dLocationCount = dcount(locationString) on TimeGenerated in range(timeRange,now(), 1d) \nby UserPrincipalName, AppDisplayName \n// Compute best fit line for each entry \n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dLocationCount) \n// Chart the 3 most interesting lines  \n// A 0-value slope corresponds to an account being completely stable over time for a given Azure Active Directory application\n| top 3 by Slope desc  \n// Extract the set of locations for each top user:\n| join kind=inner (SigninLogs\n| where TimeGenerated \u003e= timeRange\n| extend  locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\")\n| summarize locationList = makeset(locationString), threeDayWindowLocationCount=dcount(locationString) by AppDisplayName, UserPrincipalName, \ntimerange=bin(TimeGenerated, 3d)) on AppDisplayName, UserPrincipalName\n| order by UserPrincipalName, timerange asc\n| project timerange, AppDisplayName , UserPrincipalName, threeDayWindowLocationCount, locationList \n| order by AppDisplayName, UserPrincipalName, timerange asc\n| extend timestamp = timerange, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_40')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Anomalous Azure Active Directory apps based on authentication location",
                                             "query":  "//This query over Azure AD sign-in activity highlights Azure AD apps with \n//an unusually high ratio of distinct geolocations versus total number of authentications\n//\n\nlet timeRange=ago(14d);\nlet azureSignIns = \nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where SourceSystem == \"Azure AD\"\n| where OperationName == \"Sign-in activity\"\n| project TimeGenerated, OperationName, AppDisplayName , Identity, UserId, UserPrincipalName, Location, LocationDetails, \nClientAppUsed, DeviceDetail, ConditionalAccessPolicies;\nazureSignIns\n| extend locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n| summarize rawSigninCount = count(), countByAccount = dcount(UserId), locationCount = dcount(locationString) by AppDisplayName\n// tail - pick a threshold to rule out the very-high volume Azure AD apps\n| where rawSigninCount \u003c 1000\n// more locations than accounts\n| where locationCount\u003ecountByAccount\n// almost as many / more locations than sign-ins!\n| where 1.0*rawSigninCount / locationCount \u003e 0.8 \n| order by rawSigninCount  desc\n| join kind = leftouter (\n   azureSignIns \n) on AppDisplayName \n| project AppDisplayName, TimeGenerated , Identity, rawSigninCount, countByAccount, locationCount,  \nlocationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \ntostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"])), UserPrincipalName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName \n| order by AppDisplayName, TimeGenerated desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_41')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Attempts to sign in to disabled accounts by account name",
                                             "query":  "//Failed attempts to sign in to disabled accounts summarized by account name\n//\n\nlet timeRange = 14d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by AppDisplayName, UserPrincipalName\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n| order by count_ desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_42')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Attempts to sign in to disabled accounts by IP address",
                                             "query":  "//Failed attempts to sign in to disabled accounts summarized by the IP address from from the sign-in attempts originate\n//\n\nlet timeRange = 14d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), numberAccountsTargeted = dcount(UserPrincipalName), \nnumberApplicationsTargeted = dcount(AppDisplayName), accountSet = makeset(UserPrincipalName), applicationSet=makeset(AppDisplayName), \nnumberLoginAttempts = count() by IPAddress\n| extend timestamp = StartTimeUtc, IPCustomEntity = IPAddress\n| order by numberLoginAttempts desc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_43')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Inactive or new account signins",
                                             "query":  "//Query for accounts seen signing in for the first time - these could be associated\n//with stale/inactive accounts that ought to have been deleted but werent - and have \n//subseuqently been compromised. \n//Results for user accounts created in the last 7 days are filtered out\n//\n\n//Inactive accounts that sign in - first-time logins for accounts created in last 7 days are filtered out\nlet starttime = 14d;\nlet midtime = 7d;\nlet endtime = 1d;\nSigninLogs\n| where TimeGenerated \u003e= ago(endtime)\n// successful sign-in\n| where ResultType == 0\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), loginCountToday=count() by UserPrincipalName, Identity\n| join kind=leftanti (\n   SigninLogs\n   // historical successful sign-in\n   | where TimeGenerated \u003c ago(endtime)\n   | where TimeGenerated \u003e= ago(starttime)\n   | where ResultType == 0\n   | summarize by UserPrincipalName, Identity\n) on UserPrincipalName \n| join kind= leftanti (\n   // filter out newly created user accounts\n   AuditLogs\n   | where TimeGenerated \u003e= ago(midtime)\n   | where OperationName == \"Add user\" \n   // Normalize to lower case in order to match against equivalent UPN in Signin logs\n   | extend NewUserPrincipalName = tolower(extractjson(\"$.userPrincipalName\", tostring(TargetResources[0]), typeof(string)))\n) on $left.UserPrincipalName == $right.NewUserPrincipalName \n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_44')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Login attempts using Legacy Auth",
                                             "query":  "//This query over Azure AD sign-in activity highlights use of legacy authentication protocol in the \n//environment. Because conditional access policies are not evaluated when legacy authentication is used, \n//legacy authentication can be used to circumvent all Azure Conditional Access policies.\n//\n\nlet endtime = 1d;\nlet starttime = 7d;\nlet legacyAuthentications =\nSigninLogs\n| where TimeGenerated \u003e= ago(starttime)\n// success logons only\n| where ResultType == 0\n| extend ClientAppUsed = iff(isempty(ClientAppUsed)==true,\"Unknown\" ,ClientAppUsed)\n| extend isLegacyAuth = case(\nClientAppUsed contains \"Browser\", \"No\", \nClientAppUsed contains \"Mobile Apps and Desktop clients\", \"No\", \nClientAppUsed contains \"Exchange ActiveSync\", \"No\", \nClientAppUsed contains \"Other clients\", \"Yes\", \n\"Unknown\")\n| where isLegacyAuth==\"Yes\";\nlegacyAuthentications \n| where TimeGenerated \u003e= ago(endtime)\n// Don't alert for accounts already seen using legacy auth in prior 7 days\n| join kind=leftanti (\n   legacyAuthentications \n   | where TimeGenerated between(ago(starttime) .. ago(endtime))\n) on UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend LocationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \ntostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), AttemptCount = count() \nby UserPrincipalName, ClientAppUsed, AppDisplayName, IPAddress, isLegacyAuth, tostring(OS), tostring(Browser), LocationString\n| sort by AttemptCount desc nulls last \n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_45')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Login attempt by Blocked MFA user",
                                             "query":  "//An account could be blocked if there are too many failed authentication attempts in a row. This hunting query identifies if a MFA user account that is set to blocked tries to login to Azure AD.\n//\nlet timeRange = 1d;\nlet lookBack = 7d;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet MFABlocked = SigninLogs\n| where TimeGenerated \u003e= ago(timeRange)\n| where ResultType != \"0\" \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails), Status = strcat(ResultType, \": \", ResultDescription)\n| where StatusDetails =~ \"MFA denied; user is blocked\"\n| extend Unresolved = iff(Identity matches regex isGUID, true, false);\n// Lookup up resolved identities from last 7 days\nlet identityLookup = SigninLogs\n| where TimeGenerated \u003e= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from MFABlocked signins\nlet unresolvedNames = MFABlocked | where Unresolved == true | join kind= inner (\n identityLookup \n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_MFABlocked = MFABlocked | where Unresolved == false | union unresolvedNames;\nu_MFABlocked \n| extend OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), \n  AttemptCount = count() by UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation , CorrelationId \n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status,  IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\n| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_46')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Active Directory signins from new locations",
                                             "query":  "//New Azure Active Directory signin locations today versus historical Azure Active Directory signin data\n//In the case of password spraying or brute force attacks one might see authentication attempts for many \n//accounts from a new location\n//\n\nlet starttime = 14d;\nlet endtime = 1d;\nlet countThreshold = 1;\nSigninLogs\n| where TimeGenerated \u003e= ago(endtime)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), perIdentityAuthCount = count() \nby Identity, locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \ntostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), distinctAccountCount = count(), identityList=makeset(Identity) by locationString\n| extend identityList = iff(distinctAccountCount\u003c10, identityList, \"multiple (\u003e10)\")\n| join kind= anti (\nSigninLogs\n  | where TimeGenerated \u003e= ago(starttime) and TimeGenerated \u003c ago(endtime)\n  | project locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", tostring(LocationDetails[\"state\"]), \"/\", \n  tostring(LocationDetails[\"city\"]), \";\" , tostring(LocationDetails[\"geoCoordinates\"]))\n  | summarize priorCount = count() by locationString\n) \non locationString\n// select threshold above which #new accounts from a new location is deemed suspicious\n| where distinctAccountCount \u003e countThreshold\n| extend timestamp = StartTimeUtc\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_47')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Azure Active Directory sign-in burst from multiple locations",
                                             "query":  "//This query over Azure Active Directory sign-in activity highlights accounts associated\n//with multiple authentications from different geographical locations in a short space of time.\n//\n\nlet timeRange = ago(10d);\nlet signIns = SigninLogs\n| where TimeGenerated \u003e= timeRange\n| extend locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\",\n tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n| where locationString != \"//\" \n// filter out signins associated with top 100 signin locations \n| join kind=anti (\nSigninLogs\n  | extend locationString= strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", \n  tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]))\n  | where locationString != \"//\"\n  | summarize count() by locationString\n  | order by count_ desc\n  | take 100) on locationString ; // TODO - make this threshold percentage-based\n// We will perform a time window join to identify signins from multiple locations within a 10-minute period\nlet lookupWindow = 10m;\nlet lookupBin = lookupWindow / 2.0; // lookup bin = equal to 1/2 of the lookup window\nsignIns \n| project-rename Start=TimeGenerated \n| extend TimeKey = bin(Start, lookupBin)\n| join kind = inner (\nsignIns \n| project-rename End=TimeGenerated, EndLocationString=locationString \n  // TimeKey on the right side of the join - emulates this authentication appearing several times\n  | extend TimeKey = range(bin(End - lookupWindow, lookupBin),\n  bin(End, lookupBin), lookupBin)\n  | mvexpand TimeKey to typeof(datetime) // translate TimeKey arrange range to a column\n) on Identity, TimeKey\n| where End \u003e Start\n| project timeSpan = End - Start, Identity, locationString, EndLocationString,tostring(Start), tostring(End), UserPrincipalName\n| where locationString != EndLocationString\n| summarize by timeSpan, Identity, locationString, EndLocationString, Start, End, UserPrincipalName\n| extend timestamp = Start, AccountCustomEntity = UserPrincipalName \n| order by Identity\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_48')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Signin Logs with expanded Conditional Access Policies",
                                             "query":  "//Example query for SigninLogs showing how to break out packed fields.  In this case extending conditional access Policies \n//\n\nlet timeframe = 1d;\nSigninLogs \n| where TimeGenerated \u003e= ago(timeframe)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName), ConditionalAccessPol0Result = tostring(ConditionalAccessPolicies[0].result)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName), ConditionalAccessPol1Result = tostring(ConditionalAccessPolicies[1].result)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName), ConditionalAccessPol2Result = tostring(ConditionalAccessPolicies[2].result)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| extend Date = startofday(TimeGenerated), Hour = datetime_part(\"Hour\", TimeGenerated)\n| summarize count() by Date, Identity, UserDisplayName, UserPrincipalName, IPAddress, ResultType, ResultDescription, StatusCode, StatusDetails, \nConditionalAccessPol0Name, ConditionalAccessPol0Result, ConditionalAccessPol1Name, ConditionalAccessPol1Result, ConditionalAccessPol2Name, ConditionalAccessPol2Result, \nLocation, State, City\n| extend timestamp = Date, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n| sort by Date \n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_49')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Sign-ins from IPs that attempt sign-ins to disabled accounts",
                                             "query":  "//Identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\n//References: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n//50057 - User account is disabled. The account has been disabled by an administrator. This analytic will additionally identify the successful signed in accounts as the mapped account entities for investigation in Sentinel.\n//\nlet lookBack = 1d;\nlet threshold = 100;\nSigninLogs \n| where TimeGenerated \u003e= ago(lookBack)\n| where ResultType == \"50057\" \n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\" \n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), disabledAccountLoginAttempts = count(), \ndisabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), disabledAccountSet = makeset(UserPrincipalName), \napplicationSet = makeset(AppDisplayName) by IPAddress\n| order by disabledAccountLoginAttempts desc\n| join kind= leftouter (\n    // Consider these IPs suspicious - and alert any related  successful sign-ins\n    SigninLogs\n    | where TimeGenerated \u003e= ago(lookBack)\n    | where ResultType == 0\n    | summarize successfulAccountSigninCount = dcount(UserPrincipalName), successfulAccountSigninSet = makeset(UserPrincipalName, 15) by IPAddress\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountSigninCount \u003c threshold\n) on IPAddress  \n// IPs from which attempts to authenticate as disabled user accounts originated, and had a non-zero success rate for some other account\n| where successfulAccountSigninCount != 0\n// Successful Account Signins occur within the same lookback period as the failed \n| extend SuccessBeforeFailure = iff(TimeGenerated \u003c StartTime, true, false) \n| project StartTime, EndTime, IPAddress, disabledAccountLoginAttempts, disabledAccountsTargeted, disabledAccountSet, applicationSet, \nsuccessfulAccountSigninCount, successfulAccountSigninSet\n| order by disabledAccountLoginAttempts\n// Break up the string of Succesfully signed into accounts into individual events\n| mvexpand successfulAccountSigninSet\n| extend AccountCustomEntity = tostring(successfulAccountSigninSet), timestamp = StartTime, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_50')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Same User - Successful logon for a given App and failure on another App within 1m and low distribution",
                                             "query":  "//This identifies when a user account successfully logs onto a given App and within 1 minute fails to logon to a different App.\n//This may indicate a malicious attempt at accessing disallowed Apps for discovery or potential lateral movement\n//\n\nlet timeFrame = ago(1d);\nlet logonDiff = 1m;\nlet Success = SigninLogs \n| where TimeGenerated \u003e= timeFrame \n| where ResultType == \"0\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\", \"Office 365 SharePoint Online\")\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, IPAddress , SuccessAppDisplayName = AppDisplayName;\nlet Fail = SigninLogs \n| where TimeGenerated \u003e= timeFrame \n| where ResultType !in (\"0\", \"50140\") \n| where ResultDescription !~ \"Other\" \n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\", \"Office 365 SharePoint Online\")\n| project FailedLogonTime = TimeGenerated, UserPrincipalName, IPAddress , FailedAppDisplayName = AppDisplayName, ResultType, ResultDescription;\nlet InitialDataSet = \nSuccess | join kind= inner (\nFail\n) on UserPrincipalName, IPAddress \n| where isnotempty(FailedAppDisplayName)\n| where SuccessLogonTime \u003c FailedLogonTime and FailedLogonTime - SuccessLogonTime \u003c= logonDiff and SuccessAppDisplayName != FailedAppDisplayName;\nlet InitialHits = \nInitialDataSet\n| summarize FailedLogonTime = min(FailedLogonTime), SuccessLogonTime = min(SuccessLogonTime) \nby UserPrincipalName, SuccessAppDisplayName, FailedAppDisplayName, IPAddress, ResultType, ResultDescription;\n// Only take hits where there is 5 or less distinct AppDisplayNames on the success side as this limits highly active applications where failures occur more regularly\nlet Distribution =\nInitialDataSet\n| summarize count(SuccessAppDisplayName) by SuccessAppDisplayName, ResultType\n| where count_SuccessAppDisplayName \u003c= 5;\nInitialHits | join (\n   Distribution \n) on SuccessAppDisplayName, ResultType\n| project UserPrincipalName, SuccessLogonTime, IPAddress, SuccessAppDisplayName, FailedLogonTime, FailedAppDisplayName, ResultType, ResultDescription \n| extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_51')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "properties":  {
                                             "category":  "Sentinel-IdentityActivity-Hunting-Common",
                                             "displayName":  "Failed attempt to access Azure Portal",
                                             "query":  "//Access attempts to Azure Portal from an unauthorized user.  Either invalid password or the user account does not exist.\n//\n\nlet timeRange=ago(7d);\nSigninLogs\n| where TimeGenerated \u003e= timeRange\n| where AppDisplayName contains \"Azure Portal\"\n// 50126 - Invalid username or password, or invalid on-premises username or password.\n// 50020? - The user doesn't exist in the tenant.\n| where ResultType in ( \"50126\" , \"50020\")\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), IPAddresses = makeset(IPAddress), DistinctIPCount = dcount(IPAddress), \nmakeset(OS), makeset(Browser), makeset(City), AttemptCount = count() \nby UserDisplayName, UserPrincipalName, AppDisplayName, ResultType, ResultDescription, StatusCode, StatusDetails, Location, State\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserPrincipalName\n| sort by AttemptCount\n",
                                             "version":  "1.0"
                                         },
                          "name":  "[concat(parameters('workspacename'), '/' , 'sentinel_query_52')]",
                          "apiVersion":  "2020-03-01-preview",
                          "type":  "Microsoft.OperationalInsights/workspaces/savedSearches",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - AzureActiveDirectoryAuditLogs_id')]",
                          "properties":  {
                                             "displayName":  "security - AzureActiveDirectoryAuditLogs",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"## Azure AD audit logs\"       },       \"name\": \"text - 1\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"query\": \"\",         \"crossComponentResources\": [],         \"parameters\": [           {             \"id\": \"bc372bf5-2dcd-4efa-aa85-94b6e6fafe14\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 7776000000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ],               \"allowCustom\": true             }           },           {             \"id\": \"e032b9f7-5449-4180-9c20-75760afa96f6\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"User\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"AuditLogs\\r\\n| where SourceSystem == \\\"Azure AD\\\"\\r\\n| extend initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n//| where initiator!= \\\"\\\"\\r\\n| summarize Count = count() by initiator\\r\\n| order by Count desc, initiator asc\\r\\n| project Value = initiator, Label = strcat(initiator, ' - ', Count), Selected = false\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           },           {             \"id\": \"0a59a0b3-6d93-4fee-bdbe-147383c510c6\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Category\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"AuditLogs\\r\\n| extend initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiator in ({User})\\r\\n| summarize Count = count() by Category\\r\\n| order by Count desc, Category asc\\r\\n| project Value = Category, Label = strcat(Category, ' - ', Count)\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           },           {             \"id\": \"4d2b245b-5e59-4eb6-9f51-ba926581ab47\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Result\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"AuditLogs\\r\\n| extend initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiator in ({User})\\r\\n| summarize Count = count() by Result\\r\\n| order by Count desc, Result asc\\r\\n| project Value = Result, Label = strcat(Result, ' - ', Count, ' sign-ins')\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           }         ],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = AuditLogs\\r\\n| where \\\"{Category:lable}\\\" == \\\"All\\\" or Category in ({Category})\\r\\n| where \\\"{Result:lable}\\\" == \\\"All\\\" or Result in ({Result})\\r\\n| extend initiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\\r\\n| where initiatingUserPrincipalName != \\\"\\\" \\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiatingUserPrincipalName in ({User});\\r\\ndata\\r\\n| summarize Count = count() by Category\\r\\n| join kind = fullouter (datatable(Category:string)['Medium', 'high', 'low']) on Category\\r\\n| project Category = iff(Category == '', Category1, Category), Count = iff(Category == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by Category)\\r\\n    on Category\\r\\n| project-away Category1, TimeGenerated\\r\\n| extend Category = Category\\r\\n| union (\\r\\n    data \\r\\n    | summarize Count = count() \\r\\n    | extend jkey = 1\\r\\n    | join kind=inner (data\\r\\n        | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n        | extend jkey = 1) on jkey\\r\\n    | extend Category = 'All', Categorys = '*'    \\r\\n)\\r\\n| order by Count desc\\r\\n| take 10\",         \"size\": 4,         \"exportFieldName\": \"Category\",         \"exportParameterName\": \"CategoryFIlter\",         \"exportDefaultValue\": \"All\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Categories volume\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"Category\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"auto\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"style\": \"decimal\",                 \"maximumFractionDigits\": 2,                 \"maximumSignificantDigits\": 3               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 21,             \"formatOptions\": {               \"palette\": \"purple\",               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 4\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = AuditLogs\\r\\n| where \\\"{Result:lable}\\\" == \\\"All\\\" or Result in ({Result})\\r\\n| extend initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiator in ({User})\\r\\n| where \\\"{Category:lable}\\\" == \\\"All\\\" or Category in ({Category})\\r\\n| where Category == '{CategoryFIlter}' or '{CategoryFIlter}' == \\\"All\\\";\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by OperationName, Category\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by OperationName\\r\\n    | project-away TimeGenerated) on OperationName\\r\\n| order by TotalCount desc, OperationName asc\\r\\n| project OperationName, TotalCount, Trend, Category\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\"), Category, OperationName\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by OperationName, initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n    | project-away TimeGenerated) on OperationName, initiator\\r\\n| order by TotalCount desc, OperationName asc\\r\\n| project OperationName, initiator, TotalCount, Category, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on OperationName\\r\\n| project Id, Name = initiator, Type = 'initiator', ['Operations Count'] = TotalCount, Trend, Category, ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = OperationName, Type = 'Operation', ['Operations Count'] = TotalCount, Category, Trend)\\r\\n| order by ['Operations Count'] desc, Name asc\",         \"size\": 0,         \"exportParameterName\": \"UserInfo\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"showAnalytics\": true,         \"showExportToExcel\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"User activities\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Operations Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 0,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"turquoise\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 0,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Category\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"rowLimit\": 1000,           \"filter\": true,           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\"           },           \"labelSettings\": []         }       },       \"customWidth\": \"70\",       \"showPin\": true,       \"name\": \"query - 2\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let details = dynamic({UserInfo});\\r\\nAuditLogs\\r\\n| where \\\"{Category:lable}\\\" == \\\"All\\\" or Category in ({Category})\\r\\n| where \\\"{Result:lable}\\\" == \\\"All\\\" or Result in ({Result})\\r\\n| extend initiatingUserPrincipalName = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n//| where initiatingUserPrincipalName != \\\"\\\" \\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiatingUserPrincipalName in ({User})\\r\\n| where details.Type == '*' or (details.Type == 'initiator' and initiatingUserPrincipalName == details.Name) or (details.Type == 'Operation' and OperationName == details.Name)\\r\\n| summarize Activities = count() by initiatingUserPrincipalName\\r\\n| sort by Activities desc nulls last \",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Top active users\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"piechart\"       },       \"customWidth\": \"30\",       \"name\": \"query - 3\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let details = dynamic({UserInfo});\\r\\nlet data = AuditLogs\\r\\n| extend initiator = iif (tostring(InitiatedBy.user.userPrincipalName) != \\\"\\\", tostring(InitiatedBy.user.userPrincipalName), \\\"unknown\\\")\\r\\n| where details.Type == '*' or (details.Type == 'initiator' and initiator == details.Name) or (details.Type == 'Operation' and OperationName == details.Name)\\r\\n| where \\\"{Category:lable}\\\" == \\\"All\\\" or Category in ({Category})\\r\\n| where \\\"{Result:lable}\\\" == \\\"All\\\" or Result in ({Result})\\r\\n| where \\\"{User:lable}\\\" == \\\"All\\\" or initiator in ({User});\\r\\nlet appData = data\\r\\n| summarize TotalCount = count() by Result\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Result\\r\\n    | project-away TimeGenerated) on Result\\r\\n| order by TotalCount desc, Result asc\\r\\n| project Result, TotalCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count() by OperationName, Result\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Result, OperationName\\r\\n    | project-away TimeGenerated) on Result, OperationName\\r\\n| order by TotalCount desc, Result asc\\r\\n| project Result, OperationName, TotalCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Result\\r\\n| project Id, Name = OperationName, Type = 'Operation', ['Results Count'] = TotalCount, Trend, ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = Result, Type = 'Result', ['Results Count'] = TotalCount, Trend)\\r\\n| order by ['Results Count'] desc, Name asc\",         \"size\": 0,         \"exportParameterName\": \"ResultInfo\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Result status\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Results Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"grayBlue\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"palette\": \"greenDark\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Category\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\"           },           \"labelSettings\": []         }       },       \"customWidth\": \"70\",       \"name\": \"query - 5\"     }   ],   \"styleSettings\": {},   \"fromTemplateId\": \"sentinel-AzureActiveDirectoryAuditLogs\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - AzureActiveDirectorySignins_id')]",
                          "properties":  {
                                             "displayName":  "security - AzureActiveDirectorySignins",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 1,       \"content\": {         \"json\": \"## Sign-in Analysis\"       },       \"name\": \"text - 0\"     },     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"query\": \"\",         \"crossComponentResources\": [],         \"parameters\": [           {             \"id\": \"13f56671-7604-4427-a4d8-663f3da0cbc5\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 1209600000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000,                   \"createdTime\": \"2018-11-13T19:33:10.162Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 900000,                   \"createdTime\": \"2018-11-13T19:33:10.164Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 1800000,                   \"createdTime\": \"2018-11-13T19:33:10.164Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 3600000,                   \"createdTime\": \"2018-11-13T19:33:10.164Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 14400000,                   \"createdTime\": \"2018-11-13T19:33:10.164Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 43200000,                   \"createdTime\": \"2018-11-13T19:33:10.164Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 86400000,                   \"createdTime\": \"2018-11-13T19:33:10.165Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 172800000,                   \"createdTime\": \"2018-11-13T19:33:10.166Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 259200000,                   \"createdTime\": \"2018-11-13T19:33:10.166Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 604800000,                   \"createdTime\": \"2018-11-13T19:33:10.166Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 1209600000,                   \"createdTime\": \"2018-11-13T19:33:10.166Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 },                 {                   \"durationMs\": 2592000000,                   \"createdTime\": \"2018-11-13T19:33:10.167Z\",                   \"isInitialTime\": false,                   \"grain\": 1,                   \"useDashboardTimeRange\": false                 }               ],               \"allowCustom\": true             }           },           {             \"id\": \"3b5cc420-8ad8-4523-ba28-a54910756794\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Apps\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"SigninLogs\\r\\n| summarize Count = count() by AppDisplayName\\r\\n| order by Count desc, AppDisplayName asc\\r\\n| project Value = AppDisplayName, Label = strcat(AppDisplayName, ' - ', Count, ' sign-ins'), Selected = false\\r\\n\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"limitSelectTo\": 10,               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"*\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           },           {             \"id\": \"f7f7970b-58c1-474f-9043-62243d2d4edd\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Users\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n| summarize Count = count() by UserDisplayName\\r\\n| order by Count desc, UserDisplayName asc\\r\\n| project Value = UserDisplayName, Label = strcat(UserDisplayName, ' - ', Count, ' sign-ins'), Selected = false\\r\\n\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"limitSelectTo\": 20,               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"*\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           }         ],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n|extend errorCode = Status.errorCode\\r\\n|extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending user action\\\",errorCode == 50140, \\\"Pending user action\\\", errorCode == 51006, \\\"Pending user action\\\", errorCode == 50059, \\\"Pending user action\\\",errorCode == 65001, \\\"Pending user action\\\", errorCode == 52004, \\\"Pending user action\\\", errorCode == 50055, \\\"Pending user action\\\", errorCode == 50144, \\\"Pending user action\\\", errorCode == 50072, \\\"Pending user action\\\", errorCode == 50074, \\\"Pending user action\\\", errorCode == 16000, \\\"Pending user action\\\", errorCode == 16001, \\\"Pending user action\\\", errorCode == 16003, \\\"Pending user action\\\", errorCode == 50127, \\\"Pending user action\\\", errorCode == 50125, \\\"Pending user action\\\", errorCode == 50129, \\\"Pending user action\\\", errorCode == 50143, \\\"Pending user action\\\", errorCode == 81010, \\\"Pending user action\\\", errorCode == 81014, \\\"Pending user action\\\", errorCode == 81012 ,\\\"Pending user action\\\", \\\"Failure\\\");\\r\\ndata\\r\\n| summarize Count = count() by SigninStatus\\r\\n| join kind = fullouter (datatable(SigninStatus:string)['Success', 'Pending action (Interrupts)', 'Failure']) on SigninStatus\\r\\n| project SigninStatus = iff(SigninStatus == '', SigninStatus1, SigninStatus), Count = iff(SigninStatus == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by SigninStatus)\\r\\n    on SigninStatus\\r\\n| project-away SigninStatus1, TimeGenerated\\r\\n| extend Status = SigninStatus\\r\\n| union (\\r\\n    data \\r\\n    | summarize Count = count() \\r\\n    | extend jkey = 1\\r\\n    | join kind=inner (data\\r\\n        | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n        | extend jkey = 1) on jkey\\r\\n    | extend SigninStatus = 'All Sign-ins', Status = '*'    \\r\\n)\\r\\n| order by Count desc\\r\\n\\r\\n\\r\\n\\r\\n\",         \"size\": 3,         \"exportFieldName\": \"Status\",         \"exportParameterName\": \"SigninStatus\",         \"exportDefaultValue\": \"*\",         \"exportToExcelOptions\": \"visible\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"SigninStatus\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"blue\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"style\": \"decimal\",                 \"maximumFractionDigits\": 2,                 \"maximumSignificantDigits\": 3               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 9,             \"formatOptions\": {               \"min\": 0,               \"palette\": \"blue\",               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 5\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"\u003cbr /\u003e\\r\\n?? _Click on a tile or a row in the grid to drill-in further_\"       },       \"name\": \"text - 6 - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n| extend AppDisplayName = iff(AppDisplayName == '', 'Unknown', AppDisplayName)\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend Country = iff(LocationDetails.countryOrRegion == '', 'Unknown country', tostring(LocationDetails.countryOrRegion))\\r\\n| extend City = iff(LocationDetails.city == '', 'Unknown city', tostring(LocationDetails.city))\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending user action\\\",errorCode == 50140, \\\"Pending user action\\\", errorCode == 51006, \\\"Pending user action\\\", errorCode == 50059, \\\"Pending user action\\\",errorCode == 65001, \\\"Pending user action\\\", errorCode == 52004, \\\"Pending user action\\\", errorCode == 50055, \\\"Pending user action\\\", errorCode == 50144, \\\"Pending user action\\\", errorCode == 50072, \\\"Pending user action\\\", errorCode == 50074, \\\"Pending user action\\\", errorCode == 16000, \\\"Pending user action\\\", errorCode == 16001, \\\"Pending user action\\\", errorCode == 16003, \\\"Pending user action\\\", errorCode == 50127, \\\"Pending user action\\\", errorCode == 50125, \\\"Pending user action\\\", errorCode == 50129, \\\"Pending user action\\\", errorCode == 50143, \\\"Pending user action\\\", errorCode == 81010, \\\"Pending user action\\\", errorCode == 81014, \\\"Pending user action\\\", errorCode == 81012 ,\\\"Pending user action\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '{SigninStatus}' or '{SigninStatus}' == '*' or '{SigninStatus}' == 'All Sign-ins';\\r\\nlet countryData = data\\r\\n| summarize TotalCount = count(), SuccessCount = countif(SigninStatus == \\\"Success\\\"), FailureCount = countif(SigninStatus == \\\"Failure\\\"), InterruptCount = countif(SigninStatus == \\\"Pending user action\\\") by Country\\r\\n| join kind=inner\\r\\n(\\r\\n    data\\r\\n   | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by  Country\\r\\n    | project-away TimeGenerated\\r\\n)\\r\\non Country\\r\\n| project Country, TotalCount, SuccessCount,FailureCount,InterruptCount,  Trend\\r\\n| order by TotalCount desc, Country asc;\\r\\ndata\\r\\n| summarize TotalCount = count(), SuccessCount = countif(SigninStatus == \\\"Success\\\"), FailureCount = countif(SigninStatus == \\\"Failure\\\"), InterruptCount = countif(SigninStatus == \\\"Pending user action\\\") by Country, City\\r\\n| join kind=inner\\r\\n(\\r\\n    data    \\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Country, City\\r\\n    | project-away TimeGenerated\\r\\n)\\r\\non Country, City\\r\\n| order by TotalCount desc, Country asc\\r\\n| project Country, City,TotalCount, SuccessCount,FailureCount,InterruptCount, Trend\\r\\n| join kind=inner\\r\\n(\\r\\n    countryData\\r\\n)\\r\\non Country\\r\\n| project Id = City, Name = City, Type = 'City', ['Sign-in Count'] = TotalCount, Trend, ['Failure Count'] = FailureCount, ['Interrupt Count'] = InterruptCount, ['Success Rate'] = 1.0 * SuccessCount / TotalCount, ParentId = Country\\r\\n| union (countryData\\r\\n| project Id = Country, Name = Country, Type = 'Country', ['Sign-in Count'] = TotalCount, Trend, ['Failure Count'] = FailureCount, ['Interrupt Count'] = InterruptCount, ['Success Rate'] = 1.0 * SuccessCount / TotalCount, ParentId = 'root')\\r\\n| order by ['Sign-in Count'] desc, Name asc\",         \"size\": 1,         \"exportParameterName\": \"LocationDetail\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Sign-ins by Location\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Sign-in Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 17,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Failure Count|Interrupt Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"orange\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 17,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Success Rate\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 0,                 \"options\": {                   \"style\": \"percent\"                 }               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\",             \"expandTopLevel\": false           },           \"labelSettings\": []         }       },       \"customWidth\": \"67\",       \"showPin\": true,       \"name\": \"query - 8\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let details = dynamic({LocationDetail});\\r\\nlet data = SigninLogs\\r\\n| extend AppDisplayName = iff(AppDisplayName == '', 'Unknown', AppDisplayName)\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend Country = tostring(LocationDetails.countryOrRegion)\\r\\n| extend City = tostring(LocationDetails.city)\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending user action\\\",errorCode == 50140, \\\"Pending user action\\\", errorCode == 51006, \\\"Pending user action\\\", errorCode == 50059, \\\"Pending user action\\\",errorCode == 65001, \\\"Pending user action\\\", errorCode == 52004, \\\"Pending user action\\\", errorCode == 50055, \\\"Pending user action\\\", errorCode == 50144, \\\"Pending user action\\\", errorCode == 50072, \\\"Pending user action\\\", errorCode == 50074, \\\"Pending user action\\\", errorCode == 16000, \\\"Pending user action\\\", errorCode == 16001, \\\"Pending user action\\\", errorCode == 16003, \\\"Pending user action\\\", errorCode == 50127, \\\"Pending user action\\\", errorCode == 50125, \\\"Pending user action\\\", errorCode == 50129, \\\"Pending user action\\\", errorCode == 50143, \\\"Pending user action\\\", errorCode == 81010, \\\"Pending user action\\\", errorCode == 81014, \\\"Pending user action\\\", errorCode == 81012 ,\\\"Pending user action\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '{SigninStatus}' or '{SigninStatus}' == '*' or '{SigninStatus}' == 'All Sign-ins'\\r\\n| where details.Type == '*' or (details.Type == 'Country' and Country == details.Name) or (details.Type == 'City' and City == details.Name);\\r\\ndata\\r\\n| top 200 by TimeGenerated desc\\r\\n| extend TimeFromNow = now() - TimeGenerated\\r\\n| extend TimeAgo = strcat(case(TimeFromNow \u003c 2m, strcat(toint(TimeFromNow / 1m), ' seconds'), TimeFromNow \u003c 2h, strcat(toint(TimeFromNow / 1m), ' minutes'), TimeFromNow \u003c 2d, strcat(toint(TimeFromNow / 1h), ' hours'), strcat(toint(TimeFromNow / 1d), ' days')), ' ago')\\r\\n| project User = UserDisplayName, ['Sign-in Status'] = strcat(iff(SigninStatus == 'Success', '??', '?'), ' ', SigninStatus), ['Sign-in Time'] = TimeAgo, App = AppDisplayName, ['Error code'] = errorCode, ['Result type'] = ResultType, ['Result signature'] = ResultSignature, ['Result description'] = ResultDescription, ['Conditional access policies'] = ConditionalAccessPolicies, ['Conditional access status'] = ConditionalAccessStatus, ['Operating system'] = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser, ['Country or region'] = LocationDetails.countryOrRegion, ['State'] = LocationDetails.state, ['City'] = LocationDetails.city, ['Time generated'] = TimeGenerated, Status, ['User principal name'] = UserPrincipalName\\r\\n\\r\\n\",         \"size\": 1,         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Location Sign-in details\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Sign-in Status\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"CellDetails\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"App\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Error code\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result signature\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result description\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access policies\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Operating system\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Browser\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Country or region\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"State\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"City\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Time generated\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"User principal name\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"TimeGenerated\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"33\",       \"name\": \"query - 8\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"\"       },       \"name\": \"text - 5\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending user action\\\",errorCode == 50140, \\\"Pending user action\\\", errorCode == 51006, \\\"Pending user action\\\", errorCode == 50059, \\\"Pending user action\\\",errorCode == 65001, \\\"Pending user action\\\", errorCode == 52004, \\\"Pending user action\\\", errorCode == 50055, \\\"Pending user action\\\", errorCode == 50144, \\\"Pending user action\\\", errorCode == 50072, \\\"Pending user action\\\", errorCode == 50074, \\\"Pending user action\\\", errorCode == 16000, \\\"Pending user action\\\", errorCode == 16001, \\\"Pending user action\\\", errorCode == 16003, \\\"Pending user action\\\", errorCode == 50127, \\\"Pending user action\\\", errorCode == 50125, \\\"Pending user action\\\", errorCode == 50129, \\\"Pending user action\\\", errorCode == 50143, \\\"Pending user action\\\", errorCode == 81010, \\\"Pending user action\\\", errorCode == 81014, \\\"Pending user action\\\", errorCode == 81012 ,\\\"Pending user action\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '{SigninStatus}' or '{SigninStatus}' == '*' or '{SigninStatus}' == 'All Sign-ins';\\r\\nlet appData = data\\r\\n| summarize TotalCount = count(), SuccessCount = countif(SigninStatus == \\\"Success\\\"), FailureCount = countif(SigninStatus == \\\"Failure\\\"), InterruptCount = countif(SigninStatus == \\\"Pending user action\\\") by Os = tostring(DeviceDetail.operatingSystem)\\r\\n| where Os != ''\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Os = tostring(DeviceDetail.operatingSystem)\\r\\n    | project-away TimeGenerated) on Os\\r\\n| order by TotalCount desc, Os asc\\r\\n| project Os, TotalCount, SuccessCount, FailureCount, InterruptCount, Trend\\r\\n| serialize Id = row_number();\\r\\ndata\\r\\n| summarize TotalCount = count(), SuccessCount = countif(SigninStatus == \\\"Success\\\"), FailureCount = countif(SigninStatus == \\\"Failure\\\"), InterruptCount = countif(SigninStatus == \\\"Pending user action\\\") by Os = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\\r\\n| join kind=inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by Os = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\\r\\n    | project-away TimeGenerated) on Os, Browser\\r\\n| order by TotalCount desc, Os asc\\r\\n| project Os, Browser, TotalCount, SuccessCount, FailureCount, InterruptCount, Trend\\r\\n| serialize Id = row_number(1000000)\\r\\n| join kind=inner (appData) on Os\\r\\n| project Id, Name = Browser, Type = 'Browser', ['Sign-in Count'] = TotalCount, Trend, ['Failure Count'] = FailureCount, ['Interrupt Count'] = InterruptCount, ['Success Rate'] = 1.0 * SuccessCount / TotalCount, ParentId = Id1\\r\\n| union (appData \\r\\n    | project Id, Name = Os, Type = 'Operating System', ['Sign-in Count'] = TotalCount, Trend, ['Failure Count'] = FailureCount, ['Interrupt Count'] = InterruptCount, ['Success Rate'] = 1.0 * SuccessCount / TotalCount, ParentId = -1)\\r\\n| order by ['Sign-in Count'] desc, Name asc\",         \"size\": 1,         \"exportParameterName\": \"DeviceDetail\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Sign-ins by Device\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Sign-in Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 17,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 17,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Failure Count|Interrupt Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"orange\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 17,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Success Rate\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 0,                 \"options\": {                   \"style\": \"percent\"                 }               }             },             {               \"columnMatch\": \"ParentId\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"ParentId\",             \"treeType\": 0,             \"expanderColumn\": \"Name\",             \"expandTopLevel\": false           },           \"labelSettings\": []         }       },       \"customWidth\": \"67\",       \"showPin\": true,       \"name\": \"query - 9\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let details = dynamic({DeviceDetail});\\r\\nlet data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending user action\\\",errorCode == 50140, \\\"Pending user action\\\", errorCode == 51006, \\\"Pending user action\\\", errorCode == 50059, \\\"Pending user action\\\",errorCode == 65001, \\\"Pending user action\\\", errorCode == 52004, \\\"Pending user action\\\", errorCode == 50055, \\\"Pending user action\\\", errorCode == 50144, \\\"Pending user action\\\", errorCode == 50072, \\\"Pending user action\\\", errorCode == 50074, \\\"Pending user action\\\", errorCode == 16000, \\\"Pending user action\\\", errorCode == 16001, \\\"Pending user action\\\", errorCode == 16003, \\\"Pending user action\\\", errorCode == 50127, \\\"Pending user action\\\", errorCode == 50125, \\\"Pending user action\\\", errorCode == 50129, \\\"Pending user action\\\", errorCode == 50143, \\\"Pending user action\\\", errorCode == 81010, \\\"Pending user action\\\", errorCode == 81014, \\\"Pending user action\\\", errorCode == 81012 ,\\\"Pending user action\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '{SigninStatus}' or '{SigninStatus}' == '*' or '{SigninStatus}' == 'All Sign-ins'\\r\\n| extend Os = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\\r\\n| where details.Type == '*' or (details.Type == 'Operating System' and Os == details.Name) or (details.Type == 'Browser' and Browser == details.Name);\\r\\ndata\\r\\n| order by TimeGenerated desc\\r\\n| top 200 by TimeGenerated desc\\r\\n| extend TimeFromNow = now() - TimeGenerated\\r\\n| extend TimeAgo = strcat(case(TimeFromNow \u003c 2m, strcat(toint(TimeFromNow / 1m), ' seconds'), TimeFromNow \u003c 2h, strcat(toint(TimeFromNow / 1m), ' minutes'), TimeFromNow \u003c 2d, strcat(toint(TimeFromNow / 1h), ' hours'), strcat(toint(TimeFromNow / 1d), ' days')), ' ago')\\r\\n| project User = UserDisplayName, ['Sign-in Status'] = strcat(iff(SigninStatus == 'Success', '??', '?'), ' ', SigninStatus), ['Sign-in Time'] = TimeAgo, App = AppDisplayName, ['Error code'] = errorCode, ['Result type'] = ResultType, ['Result signature'] = ResultSignature, ['Result description'] = ResultDescription, ['Conditional access policies'] = ConditionalAccessPolicies, ['Conditional access status'] = ConditionalAccessStatus, ['Operating system'] = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser, ['Country or region'] = LocationDetails.countryOrRegion, ['State'] = LocationDetails.state, ['City'] = LocationDetails.city, ['Time generated'] = TimeGenerated, Status, ['User principal name'] = UserPrincipalName\\r\\n\\r\\n\",         \"size\": 1,         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Device Sign-in details\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Sign-in Status\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"CellDetails\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"App\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Error code\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result signature\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result description\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access policies\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Operating system\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Browser\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Country or region\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"State\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"City\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Time generated\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"User principal name\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"33\",       \"name\": \"query - 8 - Copy\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Sign-ins using Conditional Access\"       },       \"name\": \"text - 12\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n|extend CAStatus = case(ConditionalAccessStatus ==\\\"success\\\",\\\"Successful\\\",\\r\\n                    ConditionalAccessStatus == \\\"failure\\\", \\\"Failed\\\",                                     \\r\\n                    ConditionalAccessStatus == \\\"notApplied\\\", \\\"Not applied\\\",                                     \\r\\n                    isempty(ConditionalAccessStatus), \\\"Not applied\\\", \\r\\n                    \\\"Disabled\\\")\\r\\n|mvexpand ConditionalAccessPolicies\\r\\n|extend CAGrantControlName = tostring(ConditionalAccessPolicies.enforcedGrantControls[0])\\r\\n|extend CAGrantControl = case(CAGrantControlName contains \\\"MFA\\\", \\\"Require MFA\\\", \\r\\n                            CAGrantControlName contains \\\"Terms of Use\\\", \\\"Require Terms of Use\\\", \\r\\n                            CAGrantControlName contains \\\"Privacy\\\", \\\"Require Privacy Statement\\\", \\r\\n                            CAGrantControlName contains \\\"Device\\\", \\\"Require Device Compliant\\\", \\r\\n                            CAGrantControlName contains \\\"Azure AD Joined\\\", \\\"Require Hybird Azure AD Joined Device\\\", \\r\\n                            CAGrantControlName contains \\\"Apps\\\", \\\"Require Approved Apps\\\",\\r\\n                            \\\"Other\\\");\\r\\ndata\\r\\n| summarize Count = dcount(Id) by CAStatus\\r\\n| join kind = inner (data\\r\\n                    | make-series Trend = dcount(Id) default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by CAStatus\\r\\n                    ) on CAStatus\\r\\n| project-away CAStatus1, TimeGenerated\\r\\n| order by Count desc\",         \"size\": 4,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Conditional access status\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"CAStatus\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"auto\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"maximumSignificantDigits\": 3,                 \"maximumFractionDigits\": 2               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 9,             \"formatOptions\": {               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 9\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n|extend errorCode = toint(Status.errorCode)\\r\\n|extend Reason = tostring(Status.failureReason)\\r\\n|extend CAStatus = case(ConditionalAccessStatus ==0,\\\"?? Success\\\",                                     \\r\\n                        ConditionalAccessStatus == 1, \\\"? Failure\\\",                                     \\r\\n                        ConditionalAccessStatus == 2, \\\"?? Not Applied\\\",                                     \\r\\n                        ConditionalAccessStatus == \\\"\\\", \\\"?? Not Applied\\\", \\r\\n                        \\\"?? Disabled\\\")\\r\\n|mvexpand ConditionalAccessPolicies\\r\\n|extend CAGrantControlName = tostring(ConditionalAccessPolicies.enforcedGrantControls[0])\\r\\n|extend CAGrantControl = case(CAGrantControlName contains \\\"MFA\\\", \\\"Require MFA\\\", \\r\\n                            CAGrantControlName contains \\\"Terms of Use\\\", \\\"Require Terms of Use\\\", \\r\\n                            CAGrantControlName contains \\\"Privacy\\\", \\\"Require Privacy Statement\\\", \\r\\n                            CAGrantControlName contains \\\"Device\\\", \\\"Require Device Compliant\\\", \\r\\n                            CAGrantControlName contains \\\"Azure AD Joined\\\", \\\"Require Hybird Azure AD Joined Device\\\", \\r\\n                            CAGrantControlName contains \\\"Apps\\\", \\\"Require Approved Apps\\\",\\\"Other\\\");\\r\\ndata\\r\\n| summarize Count = dcount(Id) by CAStatus, CAGrantControl\\r\\n| project Id = strcat(CAStatus, '/', CAGrantControl), Name = CAGrantControl, Parent = CAStatus, Count, Type = 'CAGrantControl'\\r\\n| join kind = inner (data\\r\\n                    | make-series Trend = dcount(Id) default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by CAStatus, CAGrantControl\\r\\n                    | project Id = strcat(CAStatus, '/', CAGrantControl), Trend\\r\\n                    ) on Id\\r\\n| project-away Id1\\r\\n| union (data\\r\\n    | summarize Count = dcount(Id) by CAStatus\\r\\n    | project Id = CAStatus, Name = CAStatus, Parent = '', Count, Type = 'CAStatus'\\r\\n    | join kind = inner (data\\r\\n                        | make-series Trend = dcount(Id) default = 0 on TimeGenerated in range({TimeRange:start}, {TimeRange:end}, {TimeRange:grain}) by CAStatus\\r\\n                        | project Id = CAStatus, Trend\\r\\n                        ) on Id\\r\\n    | project-away Id1)\\r\\n| order by Count desc\",         \"size\": 0,         \"exportParameterName\": \"Detail\",         \"exportDefaultValue\": \"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\", \\\"Parent\\\":\\\"*\\\"}\",         \"exportToExcelOptions\": \"visible\",         \"title\": \"Conditional access status\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Id\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Name\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Parent\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               },               \"numberFormat\": {                 \"unit\": 0,                 \"options\": {                   \"style\": \"decimal\"                 }               }             },             {               \"columnMatch\": \"Type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Trend\",               \"formatter\": 9,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"blue\",                 \"showIcon\": true               }             }           ],           \"hierarchySettings\": {             \"idColumn\": \"Id\",             \"parentColumn\": \"Parent\",             \"treeType\": 0,             \"expanderColumn\": \"Name\",             \"expandTopLevel\": true           },           \"labelSettings\": []         }       },       \"customWidth\": \"50\",       \"name\": \"query - 10\",       \"styleSettings\": {         \"margin\": \"50\"       }     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let details = dynamic({Detail});\\r\\nlet data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n|extend errorCode = toint(Status.errorCode)\\r\\n|extend Reason = tostring(Status.failureReason)\\r\\n|extend CAStatus = case(ConditionalAccessStatus ==\\\"success\\\",\\\"?? Success\\\",                                     \\r\\n                        ConditionalAccessStatus == \\\"failure\\\", \\\"? Failure\\\",                                     \\r\\n                        ConditionalAccessStatus == \\\"notApplied\\\", \\\"?? Not Applied\\\",                                     \\r\\n                        ConditionalAccessStatus == \\\"\\\", \\\"?? Not Applied\\\", \\r\\n                        \\\"?? Disabled\\\")\\r\\n|mvexpand ConditionalAccessPolicies\\r\\n|extend CAGrantControlName = tostring(ConditionalAccessPolicies.enforcedGrantControls[0])\\r\\n|extend CAGrantControl = case(CAGrantControlName contains \\\"MFA\\\", \\\"Require MFA\\\", \\r\\n                            CAGrantControlName contains \\\"Terms of Use\\\", \\\"Require Terms of Use\\\", \\r\\n                            CAGrantControlName contains \\\"Privacy\\\", \\\"Require Privacy Statement\\\", \\r\\n                            CAGrantControlName contains \\\"Device\\\", \\\"Require Device Compliant\\\", \\r\\n                            CAGrantControlName contains \\\"Azure AD Joined\\\", \\\"Require Hybird Azure AD Joined Device\\\", \\r\\n                            CAGrantControlName contains \\\"Apps\\\", \\\"Require Approved Apps\\\",\\r\\n                            \\\"Other\\\")\\r\\n|extend CAGrantControlRank = case(CAGrantControlName contains \\\"MFA\\\", 1, \\r\\n                            CAGrantControlName contains \\\"Terms of Use\\\", 2, \\r\\n                            CAGrantControlName contains \\\"Privacy\\\", 3, \\r\\n                            CAGrantControlName contains \\\"Device\\\", 4, \\r\\n                            CAGrantControlName contains \\\"Azure AD Joined\\\", 5, \\r\\n                            CAGrantControlName contains \\\"Apps\\\", 6,\\r\\n                            7)\\r\\n| where details.Type == '*' or (details.Type == 'CAStatus' and CAStatus == details.Name) or (details.Type == 'CAGrantControl' and CAGrantControl == details.Name and CAStatus == details.Parent);\\r\\ndata\\r\\n| order by CAGrantControlRank desc\\r\\n| summarize CAGrantControls = make_set(CAGrantControl) by AppDisplayName, CAStatus, TimeGenerated, UserDisplayName\\r\\n| extend CAGrantControlText = replace(@\\\",\\\", \\\", \\\", replace(@'\\\"', @'', replace(@\\\"\\\\]\\\", @\\\"\\\", replace(@\\\"\\\\[\\\", @\\\"\\\", tostring(CAGrantControls)))))\\r\\n| extend CAGrantControlSummary = case(array_length(CAGrantControls) \u003e 1, strcat(CAGrantControls[0], ' + ', array_length(CAGrantControls) - 1, ' more'), array_length(CAGrantControls) == 1, tostring(CAGrantControls[0]), 'None')\\r\\n| top 200 by TimeGenerated desc\\r\\n| extend TimeFromNow = now() - TimeGenerated\\r\\n| extend TimeAgo = strcat(case(TimeFromNow \u003c 2m, strcat(toint(TimeFromNow / 1m), ' seconds'), TimeFromNow \u003c 2h, strcat(toint(TimeFromNow / 1m), ' minutes'), TimeFromNow \u003c 2d, strcat(toint(TimeFromNow / 1h), ' hours'), strcat(toint(TimeFromNow / 1d), ' days')), ' ago')\\r\\n| project Application = AppDisplayName, ['CA Status'] = CAStatus, ['CA Grant Controls'] = CAGrantControlSummary, ['All CA Grant Controls'] = CAGrantControlText, ['Sign-in Time'] = TimeAgo, ['User'] = UserDisplayName\",         \"size\": 0,         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Recent sign-ins\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Application\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CA Status\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"CA Grant Controls\",               \"formatter\": 1,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"All CA Grant Controls\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Sign-in Time\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"User\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"labelSettings\": []         }       },       \"customWidth\": \"50\",       \"showPin\": true,       \"name\": \"query - 7 - Copy\"     },     {       \"type\": 1,       \"content\": {         \"json\": \"## Troubleshooting Sign-ins\"       },       \"name\": \"text - 13\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = SigninLogs\\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n|extend errorCode = Status.errorCode\\r\\n|extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending action (Interrupts)\\\",errorCode == 50140, \\\"Pending action (Interrupts)\\\", errorCode == 51006, \\\"Pending action (Interrupts)\\\", errorCode == 50059, \\\"Pending action (Interrupts)\\\",errorCode == 65001, \\\"Pending action (Interrupts)\\\", errorCode == 52004, \\\"Pending action (Interrupts)\\\", errorCode == 50055, \\\"Pending action (Interrupts)\\\", errorCode == 50144, \\\"Pending action (Interrupts)\\\", errorCode == 50072, \\\"Pending action (Interrupts)\\\", errorCode == 50074, \\\"Pending action (Interrupts)\\\", errorCode == 16000, \\\"Pending action (Interrupts)\\\", errorCode == 16001, \\\"Pending action (Interrupts)\\\", errorCode == 16003, \\\"Pending action (Interrupts)\\\", errorCode == 50127, \\\"Pending action (Interrupts)\\\", errorCode == 50125, \\\"Pending action (Interrupts)\\\", errorCode == 50129, \\\"Pending action (Interrupts)\\\", errorCode == 50143, \\\"Pending action (Interrupts)\\\", errorCode == 81010, \\\"Pending action (Interrupts)\\\", errorCode == 81014, \\\"Pending action (Interrupts)\\\", errorCode == 81012 ,\\\"Pending action (Interrupts)\\\", \\\"Failure\\\");\\r\\ndata\\r\\n| summarize Count = count() by SigninStatus\\r\\n| join kind = fullouter (datatable(SigninStatus:string)['Success', 'Pending action (Interrupts)', 'Failure']) on SigninStatus\\r\\n| project SigninStatus = iff(SigninStatus == '', SigninStatus1, SigninStatus), Count = iff(SigninStatus == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n    | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by SigninStatus)\\r\\n    on SigninStatus\\r\\n| project-away SigninStatus1, TimeGenerated\\r\\n| extend Status = SigninStatus\\r\\n| union (\\r\\n    data \\r\\n    | summarize Count = count() \\r\\n    | extend jkey = 1\\r\\n    | join kind=inner (data\\r\\n        | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n        | extend jkey = 1) on jkey\\r\\n    | extend SigninStatus = 'All Sign-ins', Status = '*'    \\r\\n)\\r\\n| order by Count desc\\r\\n\\r\\n\\r\\n\\r\\n\",         \"size\": 3,         \"exportDefaultValue\": \"*\",         \"exportToExcelOptions\": \"visible\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"SigninStatus\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"blue\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"style\": \"decimal\",                 \"maximumFractionDigits\": 2,                 \"maximumSignificantDigits\": 3               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 9,             \"formatOptions\": {               \"min\": 0,               \"palette\": \"blue\",               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 5\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"SigninLogs \\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend ErrorCode = tostring(Status.errorCode) \\r\\n| extend FailureReason = tostring(Status.failureReason) \\r\\n| where ErrorCode !in (\\\"0\\\",\\\"50058\\\",\\\"50148\\\",\\\"50140\\\", \\\"51006\\\", \\\"50059\\\", \\\"65001\\\", \\\"52004\\\", \\\"50055\\\", \\\"50144\\\",\\\"50072\\\", \\\"50074\\\", \\\"16000\\\",\\\"16001\\\", \\\"16003\\\", \\\"50127\\\", \\\"50125\\\", \\\"50129\\\",\\\"50143\\\", \\\"81010\\\", \\\"81014\\\", \\\"81012\\\") \\r\\n|summarize errCount = count() by ErrorCode, tostring(FailureReason)| sort by errCount\\r\\n|project ['? Error Code'] = ErrorCode, ['Reason']= FailureReason, ['Error Count'] = toint(errCount)\",         \"size\": 1,         \"exportFieldName\": \"? Error Code\",         \"exportParameterName\": \"ErrorCode\",         \"exportDefaultValue\": \"*\",         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Summary of top errors\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Error Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"orange\",                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"67\",       \"showPin\": true,       \"name\": \"query - 5\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"SigninLogs \\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend ErrorCode = tostring(Status.errorCode) \\r\\n| extend FailureReason = tostring(Status.failureReason) \\r\\n| where ErrorCode !in (\\\"0\\\",\\\"50058\\\",\\\"50148\\\",\\\"50140\\\", \\\"51006\\\", \\\"50059\\\", \\\"65001\\\", \\\"52004\\\", \\\"50055\\\", \\\"50144\\\",\\\"50072\\\", \\\"50074\\\", \\\"16000\\\",\\\"16001\\\", \\\"16003\\\", \\\"50127\\\", \\\"50125\\\", \\\"50129\\\",\\\"50143\\\", \\\"81010\\\", \\\"81014\\\", \\\"81012\\\") \\r\\n| where '{ErrorCode}' == '*' or '{ErrorCode}' == ErrorCode\\r\\n| top 200 by TimeGenerated desc\\r\\n| extend TimeFromNow = now() - TimeGenerated\\r\\n| extend TimeAgo = strcat(case(TimeFromNow \u003c 2m, strcat(toint(TimeFromNow / 1m), ' seconds'), TimeFromNow \u003c 2h, strcat(toint(TimeFromNow / 1m), ' minutes'), TimeFromNow \u003c 2d, strcat(toint(TimeFromNow / 1h), ' hours'), strcat(toint(TimeFromNow / 1d), ' days')), ' ago')\\r\\n| project User = UserDisplayName, IPAddress, ['? Error Code'] = ErrorCode, ['Sign-in Time'] = TimeAgo, App = AppDisplayName, ['Error code'] = ErrorCode, ['Result type'] = ResultType, ['Result signature'] = ResultSignature, ['Result description'] = ResultDescription, ['Conditional access policies'] = ConditionalAccessPolicies, ['Conditional access status'] = ConditionalAccessStatus, ['Operating system'] = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser, ['Country or region'] = LocationDetails.countryOrRegion, ['State'] = LocationDetails.state, ['City'] = LocationDetails.city, ['Time generated'] = TimeGenerated, Status, ['User principal name'] = UserPrincipalName\\r\\n\\r\\n\\r\\n\",         \"size\": 1,         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Sign-ins with errors\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"table\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"? Error Code\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"GenericDetails\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"App\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Error code\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result signature\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result description\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access policies\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Operating system\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Browser\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Country or region\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"State\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"City\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Time generated\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"User principal name\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"sortBy\": [             {               \"itemKey\": \"IPAddress\",               \"sortOrder\": 2             }           ],           \"labelSettings\": []         }       },       \"customWidth\": \"33\",       \"name\": \"query - 5 - Copy\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"SigninLogs \\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend ErrorCode = tostring(Status.errorCode) \\r\\n| extend FailureReason = Status.failureReason \\r\\n| where ErrorCode in (\\\"50058\\\",\\\"50140\\\", \\\"51006\\\", \\\"50059\\\", \\\"65001\\\", \\\"52004\\\", \\\"50055\\\", \\\"50144\\\",\\\"50072\\\", \\\"50074\\\", \\\"16000\\\",\\\"16001\\\", \\\"16003\\\", \\\"50127\\\", \\\"50125\\\", \\\"50129\\\",\\\"50143\\\", \\\"81010\\\", \\\"81014\\\", \\\"81012\\\") \\r\\n|summarize errCount = count() by ErrorCode, tostring(FailureReason)\\r\\n| sort by errCount\\r\\n|project ['? Error Code'] = ErrorCode, ['Reason'] = FailureReason, ['Interrupt Count'] = toint(errCount)\",         \"size\": 1,         \"exportFieldName\": \"? Error Code\",         \"exportParameterName\": \"InterruptErrorCode\",         \"exportDefaultValue\": \"*\",         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Summary of sign-ins waiting on user action\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Interrupt Count\",               \"formatter\": 8,               \"formatOptions\": {                 \"min\": 0,                 \"palette\": \"orange\"               }             }           ],           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"67\",       \"showPin\": true,       \"name\": \"query - 7\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"SigninLogs \\r\\n|where AppDisplayName in ({Apps}) or '*' in ({Apps})\\r\\n|where UserDisplayName in ({Users}) or '*' in ({Users})\\r\\n| extend ErrorCode = tostring(Status.errorCode) \\r\\n| extend FailureReason = Status.failureReason \\r\\n| where ErrorCode in (\\\"50058\\\",\\\"50140\\\", \\\"51006\\\", \\\"50059\\\", \\\"65001\\\", \\\"52004\\\", \\\"50055\\\", \\\"50144\\\",\\\"50072\\\", \\\"50074\\\", \\\"16000\\\",\\\"16001\\\", \\\"16003\\\", \\\"50127\\\", \\\"50125\\\", \\\"50129\\\",\\\"50143\\\", \\\"81010\\\", \\\"81014\\\", \\\"81012\\\") \\r\\n| where '{InterruptErrorCode}' == '*' or '{InterruptErrorCode}' == ErrorCode\\r\\n| top 200 by TimeGenerated desc\\r\\n| extend TimeFromNow = now() - TimeGenerated\\r\\n| extend TimeAgo = strcat(case(TimeFromNow \u003c 2m, strcat(toint(TimeFromNow / 1m), ' seconds'), TimeFromNow \u003c 2h, strcat(toint(TimeFromNow / 1m), ' minutes'), TimeFromNow \u003c 2d, strcat(toint(TimeFromNow / 1h), ' hours'), strcat(toint(TimeFromNow / 1d), ' days')), ' ago')\\r\\n| project User = UserDisplayName, IPAddress, ['? Error Code'] = ErrorCode, ['Sign-in Time'] = TimeAgo, App = AppDisplayName, ['Error code'] = ErrorCode, ['Result type'] = ResultType, ['Result signature'] = ResultSignature, ['Result description'] = ResultDescription, ['Conditional access policies'] = ConditionalAccessPolicies, ['Conditional access status'] = ConditionalAccessStatus, ['Operating system'] = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser, ['Country or region'] = LocationDetails.countryOrRegion, ['State'] = LocationDetails.state, ['City'] = LocationDetails.city, ['Time generated'] = TimeGenerated, Status, ['User principal name'] = UserPrincipalName\\r\\n\\r\\n\",         \"size\": 1,         \"showAnalytics\": true,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Sign-ins waiting on user action\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"? Error Code\",               \"formatter\": 7,               \"formatOptions\": {                 \"linkTarget\": \"GenericDetails\",                 \"showIcon\": true               }             },             {               \"columnMatch\": \"App\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Error code\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result type\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result signature\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Result description\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access policies\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Conditional access status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Operating system\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Browser\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Country or region\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"State\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"City\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Time generated\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"Status\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"User principal name\",               \"formatter\": 5,               \"formatOptions\": {                 \"showIcon\": true               }             }           ],           \"filter\": true,           \"labelSettings\": []         }       },       \"customWidth\": \"33\",       \"showPin\": true,       \"name\": \"query - 7 - Copy\"     }   ],   \"styleSettings\": {},   \"fromTemplateId\": \"sentinel-AzureActiveDirectorySigninLogs\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      },
                      {
                          "name":  "[parameters('security - AzureActivity_id')]",
                          "properties":  {
                                             "displayName":  "security - AzureActivity",
                                             "serializedData":  "{   \"version\": \"Notebook/1.0\",   \"items\": [     {       \"type\": 9,       \"content\": {         \"version\": \"KqlParameterItem/1.0\",         \"query\": \"\",         \"crossComponentResources\": [],         \"parameters\": [           {             \"id\": \"52bfbd84-1639-480c-bda5-bfc87fd81832\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"TimeRange\",             \"type\": 4,             \"isRequired\": true,             \"value\": {               \"durationMs\": 604800000             },             \"typeSettings\": {               \"selectableValues\": [                 {                   \"durationMs\": 300000                 },                 {                   \"durationMs\": 900000                 },                 {                   \"durationMs\": 1800000                 },                 {                   \"durationMs\": 3600000                 },                 {                   \"durationMs\": 14400000                 },                 {                   \"durationMs\": 43200000                 },                 {                   \"durationMs\": 86400000                 },                 {                   \"durationMs\": 172800000                 },                 {                   \"durationMs\": 259200000                 },                 {                   \"durationMs\": 604800000                 },                 {                   \"durationMs\": 1209600000                 },                 {                   \"durationMs\": 2419200000                 },                 {                   \"durationMs\": 2592000000                 },                 {                   \"durationMs\": 5184000000                 },                 {                   \"durationMs\": 7776000000                 }               ]             }           },           {             \"id\": \"eeb5dcf9-e898-46af-9c12-d91d97e13cd3\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"Caller\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"AzureActivity\\r\\n| summarize by Caller\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"queryType\": 0,             \"resourceType\": \"microsoft.resources/resourcegroups\"           },           {             \"id\": \"46375a76-7ae1-4d7e-9082-4191531198a9\",             \"version\": \"KqlParameterItem/1.0\",             \"name\": \"ResourceGroup\",             \"type\": 2,             \"isRequired\": true,             \"multiSelect\": true,             \"quote\": \"'\",             \"delimiter\": \",\",             \"query\": \"AzureActivity\\r\\n| summarize by ResourceGroup\",             \"value\": [               \"value::all\"             ],             \"typeSettings\": {               \"resourceTypeFilter\": {                 \"microsoft.resources/resourcegroups\": true               },               \"additionalResourceOptions\": [                 \"value::all\"               ],               \"selectAllValue\": \"All\"             },             \"timeContext\": {               \"durationMs\": 0             },             \"timeContextFromParameter\": \"TimeRange\",             \"queryType\": 0,             \"resourceType\": \"microsoft.operationalinsights/workspaces\"           }         ],         \"style\": \"pills\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\"       },       \"name\": \"parameters - 2\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"let data = AzureActivity\\r\\n| where \\\"{Caller:lable}\\\" == \\\"All\\\" or \\\"{Caller:lable}\\\" == \\\"All\\\" or Caller in ({Caller})\\r\\n| where \\\"{ResourceGroup:lable}\\\" == \\\"All\\\" or \\\"{ResourceGroup:lable}\\\" == \\\"All\\\" or ResourceGroup in ({ResourceGroup});\\r\\ndata\\r\\n| summarize Count = count() by ResourceGroup\\r\\n| join kind = fullouter (datatable(ResourceGroup:string)['Medium', 'high', 'low']) on ResourceGroup\\r\\n| project ResourceGroup = iff(ResourceGroup == '', ResourceGroup1, ResourceGroup), Count = iff(ResourceGroup == '', 0, Count)\\r\\n| join kind = inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by ResourceGroup)\\r\\n on ResourceGroup\\r\\n| project-away ResourceGroup1, TimeGenerated\\r\\n| extend ResourceGroups = ResourceGroup\\r\\n| union (\\r\\n data \\r\\n | summarize Count = count() \\r\\n | extend jkey = 1\\r\\n | join kind=inner (data\\r\\n | make-series Trend = count() default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain}\\r\\n | extend jkey = 1) on jkey\\r\\n | extend ResourceGroup = 'All', ResourceGroups = '*' \\r\\n)\\r\\n| order by Count desc\\r\\n| take 10\",         \"size\": 4,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Top 10 active resource groups\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"tiles\",         \"tileSettings\": {           \"titleContent\": {             \"columnMatch\": \"ResourceGroup\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"leftContent\": {             \"columnMatch\": \"Count\",             \"formatter\": 12,             \"formatOptions\": {               \"palette\": \"auto\",               \"showIcon\": true             },             \"numberFormat\": {               \"unit\": 17,               \"options\": {                 \"maximumSignificantDigits\": 3,                 \"maximumFractionDigits\": 2               }             }           },           \"secondaryContent\": {             \"columnMatch\": \"Trend\",             \"formatter\": 9,             \"formatOptions\": {               \"palette\": \"blueOrange\",               \"showIcon\": true             }           },           \"showBorder\": false         }       },       \"name\": \"query - 3\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"AzureActivity\\r\\n| where \\\"{Caller:lable}\\\" == \\\"All\\\" or Caller in ({Caller})\\r\\n| where \\\"{ResourceGroup:lable}\\\" == \\\"All\\\" or ResourceGroup in ({ResourceGroup})\\r\\n| summarize deletions = countif(OperationName contains \\\"Delete\\\"), creations = countif(OperationName contains \\\"Create\\\"), updates = countif(OperationName contains \\\"Update\\\"), Activities = count(OperationName) by bin_at(TimeGenerated, 1h, now())\\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Activities over time\",         \"color\": \"gray\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"linechart\",         \"graphSettings\": {           \"type\": 0         }       },       \"name\": \"query - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"AzureActivity\\r\\n| where \\\"{Caller:lable}\\\" == \\\"All\\\" or Caller in ({Caller})\\r\\n| where \\\"{ResourceGroup:lable}\\\" == \\\"All\\\" or ResourceGroup in ({ResourceGroup})\\r\\n| summarize deletions = countif(OperationName contains \\\"Delete\\\"), creations = countif(OperationName contains \\\"Create\\\"), updates = countif(OperationName contains \\\"Update\\\"), Activities = count() by Caller\\r\\n\",         \"size\": 1,         \"exportToExcelOptions\": \"visible\",         \"title\": \"Caller activities\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"gridSettings\": {           \"formatters\": [             {               \"columnMatch\": \"Caller\",               \"formatter\": 0,               \"formatOptions\": {                 \"showIcon\": true               }             },             {               \"columnMatch\": \"deletions\",               \"formatter\": 4,               \"formatOptions\": {                 \"showIcon\": true,                 \"aggregation\": \"Count\"               }             },             {               \"columnMatch\": \"creations\",               \"formatter\": 4,               \"formatOptions\": {                 \"palette\": \"purple\",                 \"showIcon\": true,                 \"aggregation\": \"Count\"               }             },             {               \"columnMatch\": \"updates\",               \"formatter\": 4,               \"formatOptions\": {                 \"palette\": \"gray\",                 \"showIcon\": true,                 \"aggregation\": \"Count\"               }             },             {               \"columnMatch\": \"Activities\",               \"formatter\": 4,               \"formatOptions\": {                 \"palette\": \"greenDark\",                 \"linkTarget\": \"GenericDetails\",                 \"linkIsContextBlade\": true,                 \"showIcon\": true,                 \"aggregation\": \"Count\",                 \"workbookContext\": {                   \"componentIdSource\": \"workbook\",                   \"resourceIdsSource\": \"workbook\",                   \"templateIdSource\": \"static\",                   \"templateId\": \"https://go.microsoft.com/fwlink/?linkid=874159\u0026resourceId=%2Fsubscriptions%2F44e4eff8-1fcb-4a22-a7d6-992ac7286382%2FresourceGroups%2FSOC\u0026featureName=Workbooks\u0026itemId=%2Fsubscriptions%2F44e4eff8-1fcb-4a22-a7d6-992ac7286382%2Fresourcegroups%2Fsoc%2Fproviders%2Fmicrosoft.insights%2Fworkbooks%2F4c195aec-747f-40bb-addb-934acb3ec646\u0026name=CiscoASA\u0026func=NavigateToPortalFeature\u0026type=workbook\",                   \"typeSource\": \"workbook\",                   \"gallerySource\": \"workbook\"                 }               }             }           ],           \"sortBy\": [             {               \"itemKey\": \"$gen_bar_updates_3\",               \"sortOrder\": 2             }           ],           \"labelSettings\": []         }       },       \"name\": \"query - 1\"     },     {       \"type\": 3,       \"content\": {         \"version\": \"KqlItem/1.0\",         \"query\": \"AzureActivity \\r\\n| where \\\"{Caller:lable}\\\" == \\\"All\\\" or Caller in ({Caller})\\r\\n| where \\\"{ResourceGroup:lable}\\\" == \\\"All\\\" or ResourceGroup in ({ResourceGroup})\\r\\n| summarize Informational = countif(Level == \\\"Informational\\\"), Warning = countif(Level == \\\"Warning\\\"), Error = countif(Level == \\\"Error\\\") by bin_at(TimeGenerated, 1h, now())\\r\\n\",         \"size\": 0,         \"exportToExcelOptions\": \"visible\",         \"color\": \"redBright\",         \"timeContext\": {           \"durationMs\": 0         },         \"timeContextFromParameter\": \"TimeRange\",         \"queryType\": 0,         \"resourceType\": \"microsoft.operationalinsights/workspaces\",         \"visualization\": \"scatterchart\",         \"tileSettings\": {           \"showBorder\": false         },         \"graphSettings\": {           \"type\": 2,           \"topContent\": {             \"columnMatch\": \"Error\",             \"formatter\": 12,             \"formatOptions\": {               \"showIcon\": true             }           },           \"hivesContent\": {             \"columnMatch\": \"TimeGenerated\",             \"formatter\": 1,             \"formatOptions\": {               \"showIcon\": true             }           },           \"nodeIdField\": \"Error\",           \"sourceIdField\": \"Error\",           \"targetIdField\": \"Error\",           \"nodeSize\": null,           \"staticNodeSize\": 100,           \"colorSettings\": null,           \"groupByField\": \"TimeGenerated\",           \"hivesMargin\": 5         }       },       \"name\": \"query - 4\"     }   ],   \"styleSettings\": {},   \"fromTemplateId\": \"sentinel-AzureActivity\",   \"$schema\": \"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\" }",
                                             "category":  "workbook",
                                             "version":  "1.0",
                                             "sourceId":  "[resourceid('Microsoft.OperationalInsights/workspaces',parameters('workspacename'))]"
                                         },
                          "type":  "microsoft.insights/workbooks",
                          "kind":  "shared",
                          "apiVersion":  "2018-06-17-preview",
                          "location":  "[parameters('location')]"
                      }
                  ]
}
